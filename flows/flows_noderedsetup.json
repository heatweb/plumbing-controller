[
    {
        "id": "5715139153db24f7",
        "type": "tab",
        "label": "Config",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d26c3be6.b5ef58",
        "type": "tab",
        "label": "Setup",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7b2fdb7c9fb3c336",
        "type": "tab",
        "label": "Setup 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ac900a3fdc09a7bf",
        "type": "tab",
        "label": "Setup 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "594506cc.51e408",
        "type": "tab",
        "label": "Scrolling text ",
        "disabled": true,
        "info": ""
    },
    {
        "id": "d1f3d002.63ee48",
        "type": "subflow",
        "name": "rbe 1m",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "dd19c0de.9bebd"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 160,
                "wires": [
                    {
                        "id": "29eae4ad.d68f2c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "a8d56bd2.c3c6f",
        "type": "subflow",
        "name": "runScript",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 139,
                "y": 96,
                "wires": [
                    {
                        "id": "469bad72.0a7394"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 830,
                "y": 460,
                "wires": [
                    {
                        "id": "6b7c3cb6.c9c104",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99",
        "inputLabels": [
            "Script"
        ],
        "outputLabels": [
            "Completed",
            ""
        ]
    },
    {
        "id": "cb203bcb.f1ec68",
        "type": "ui_group",
        "name": "Configuration Settings",
        "tab": "888f4ceb.4b158",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "36b47e47.04f1c2",
        "type": "ui_group",
        "name": "Select Mods",
        "tab": "5d24c14b70500a20",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "db644eb4.b9d0a",
        "type": "ui_group",
        "name": "M",
        "tab": "ad9b32d2.b3054",
        "order": 2,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "4d0f060d.dee7e8",
        "type": "ui_group",
        "name": "Update",
        "tab": "907bbe60.b555f",
        "order": 2,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a1e7431b.229d5",
        "type": "ui_group",
        "name": "Settings",
        "tab": "907bbe60.b555f",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "888f4ceb.4b158",
        "type": "ui_tab",
        "name": "Setup",
        "icon": "fa-cog",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ad9b32d2.b3054",
        "type": "ui_tab",
        "name": "Browser",
        "icon": "fa-line-chart",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "907bbe60.b555f",
        "type": "ui_tab",
        "name": "Wifi",
        "icon": "wifi",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a9e1ea79a1b255d4",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#ee1b1b",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#ee1b1b",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#292929",
                    "edited": true
                },
                "page-backgroundColor": {
                    "value": "#303030",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#212121",
                    "edited": true
                },
                "group-textColor": {
                    "value": "#f36262",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#493c3c",
                    "edited": true
                },
                "group-backgroundColor": {
                    "value": "#4b3f3f",
                    "edited": true
                },
                "widget-textColor": {
                    "value": "#ebe5e5",
                    "edited": true
                },
                "widget-backgroundColor": {
                    "value": "#ba3636",
                    "edited": true
                },
                "widget-borderColor": {
                    "value": "#363636",
                    "edited": true
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 57,
                "sy": 52,
                "gx": 2,
                "gy": 2,
                "cx": 6,
                "cy": 6,
                "px": 6,
                "py": 6
            }
        }
    },
    {
        "id": "ee34b8ab.222b68",
        "type": "ui_group",
        "name": "MQTT Data ",
        "tab": "c6a43c18.30063",
        "order": 2,
        "disp": false,
        "width": "12",
        "collapse": false
    },
    {
        "id": "c982fbb8.1deb38",
        "type": "ui_group",
        "name": "hidden_group",
        "tab": "7c447e96.4b96a",
        "order": 1,
        "disp": false,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3d9e45e.bcd50ba",
        "type": "ui_group",
        "name": "Radial Gauges",
        "tab": "e625ce36.34cf3",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c6a43c18.30063",
        "type": "ui_tab",
        "name": "Readings",
        "icon": "fa-table",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7c447e96.4b96a",
        "type": "ui_tab",
        "name": "Zooland Sys",
        "icon": "home",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e625ce36.34cf3",
        "type": "ui_tab",
        "name": "Widgets",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": true
    },
    {
        "id": "ca5f942cb2c395aa",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "61c70212c61507f5",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "1ebe6305.3aa6ad",
        "type": "ui_group",
        "name": "LAB",
        "tab": "5d24c14b70500a20",
        "order": 3,
        "disp": false,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2d3c18ea.7ea3d8",
        "type": "ui_tab",
        "name": "Table",
        "icon": "dashboard",
        "order": 9
    },
    {
        "id": "d1282254e8888410",
        "type": "ui_tab",
        "name": "Applications",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5d24c14b70500a20",
        "type": "ui_tab",
        "name": "Mods",
        "icon": "dashboard",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "23eed81a7ee85c56",
        "type": "ui_group",
        "name": "Select Applications",
        "tab": "d1282254e8888410",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dd19c0de.9bebd",
        "type": "rbe",
        "z": "d1f3d002.63ee48",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "29eae4ad.d68f2c"
            ]
        ]
    },
    {
        "id": "8b22fc2a.83d07",
        "type": "inject",
        "z": "d1f3d002.63ee48",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "dd19c0de.9bebd"
            ]
        ]
    },
    {
        "id": "29eae4ad.d68f2c",
        "type": "switch",
        "z": "d1f3d002.63ee48",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "eb92fac.cb1f108",
        "type": "exec",
        "z": "a8d56bd2.c3c6f",
        "command": "sudo bash /home/pi/node-hiu/addmqttacl.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 246.2857208251953,
        "y": 418.28569984436035,
        "wires": [
            [
                "6b7c3cb6.c9c104"
            ],
            [],
            []
        ]
    },
    {
        "id": "ef9bf9d9.e12f28",
        "type": "exec",
        "z": "a8d56bd2.c3c6f",
        "command": "sudo chown root:node-red /home/pi/node-hiu/addmqttacl.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 296.2857208251953,
        "y": 298.28569984436035,
        "wires": [
            [
                "47ddca7f.78036c"
            ],
            [],
            []
        ]
    },
    {
        "id": "47ddca7f.78036c",
        "type": "exec",
        "z": "a8d56bd2.c3c6f",
        "command": "sudo chmod 755 /home/pi/node-hiu/addmqttacl.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 266.2857208251953,
        "y": 358.28569984436035,
        "wires": [
            [
                "eb92fac.cb1f108"
            ],
            [],
            []
        ]
    },
    {
        "id": "6b7c3cb6.c9c104",
        "type": "exec",
        "z": "a8d56bd2.c3c6f",
        "command": "sudo mv /home/pi/node-hiu/addmqttacl.sh /home/pi/node-hiu/_lastrun.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 336.2857208251953,
        "y": 478.28569984436035,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "5ee23677.67d8e",
        "type": "file",
        "z": "a8d56bd2.c3c6f",
        "name": "",
        "filename": "/home/pi/node-hiu/addmqttacl.sh",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "x": 540,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "59609ed4.bee04",
        "type": "delay",
        "z": "a8d56bd2.c3c6f",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 126.28572082519531,
        "y": 238.28569984436035,
        "wires": [
            [
                "ef9bf9d9.e12f28"
            ]
        ]
    },
    {
        "id": "469bad72.0a7394",
        "type": "trigger",
        "z": "a8d56bd2.c3c6f",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "5",
        "extend": false,
        "units": "s",
        "reset": "",
        "outputs": 1,
        "x": 279,
        "y": 96,
        "wires": [
            [
                "5ee23677.67d8e",
                "59609ed4.bee04"
            ]
        ]
    },
    {
        "id": "01e6f04422e315bb",
        "type": "inject",
        "z": "5715139153db24f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "5da31f3d874fcd4c"
            ]
        ]
    },
    {
        "id": "5da31f3d874fcd4c",
        "type": "file in",
        "z": "5715139153db24f7",
        "name": "",
        "filename": "/boot/heatweb/config.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 370,
        "y": 100,
        "wires": [
            [
                "03689db0a1229d7d"
            ]
        ]
    },
    {
        "id": "60014b30ddf0f588",
        "type": "change",
        "z": "5715139153db24f7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "03689db0a1229d7d",
        "type": "json",
        "z": "5715139153db24f7",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 570,
        "y": 100,
        "wires": [
            [
                "60014b30ddf0f588"
            ]
        ]
    },
    {
        "id": "72fc070f.39dd8",
        "type": "link in",
        "z": "5715139153db24f7",
        "name": "handler",
        "links": [
            "e2a5359d.ef1ea",
            "296debf8.d54624",
            "dccb789b.a3499",
            "a8d7bac.0f6fbc8",
            "ae865c20.2fec3",
            "cfc9202e.f210d8",
            "acd796d4.015d48",
            "491f0ea6.f770b",
            "9a1d4893.b22ed8",
            "32f9b18e.982aee",
            "25d0fd81.1972e2",
            "c7f36015.8ce9f",
            "e44a91c9.939dc",
            "54651d5b.108064",
            "ed0a2c14.1c501",
            "6ce87828.9e4298",
            "d30d586c.915748",
            "c0a0bdc5.f60f3",
            "a1c82691.72a528",
            "9abe6fd2.97b23",
            "4383d483.c5616c",
            "2b500c07ee3ffae7",
            "4a837d4dcc6ad59d",
            "4c2623596b85456b",
            "1e2c3dc4f1a6d2b4",
            "c7c3bbe3c8fd890c",
            "1e7605b26f46c401",
            "08d37f854e265fcf",
            "3b8abba47b97affa",
            "a70869c7c01cbeaf",
            "bd7d48d62f53c173",
            "c319a36a810036dd",
            "392d126135d185ae",
            "0a7561544c78863d",
            "e162d709.82b3",
            "c52dea4958c2f7ea",
            "110e496a3bb255d1",
            "1dab6e911927df71",
            "f7208d4e26313df7"
        ],
        "x": 1055,
        "y": 420,
        "wires": [
            [
                "d6517dd7678960cb"
            ]
        ]
    },
    {
        "id": "a6df218d.b650f",
        "type": "ui_template",
        "z": "5715139153db24f7",
        "group": "c982fbb8.1deb38",
        "name": "Fonts",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto\">\n<!--<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Lato\">-->\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 750,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "142dae9.49d4751",
        "type": "ui_template",
        "z": "5715139153db24f7",
        "group": "3d9e45e.bcd50ba",
        "name": "Dashboard stylesheet",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n\n.invisible {\n    display: none;\n}\n\n.dot {\n    height: 13px;\n    width: 13px;\n    background-color: rgb(52, 58, 52);\n    border-radius: 20%;\n    border: 2px;\n    border-color: rgb(5, 5, 20);\n    display: inline-block;\n}\n\n.maxsiz {\n    position: absolute;\n    top:0;\n    left:0;\n    width: 100%;\n    height: 100vh;\n}\n\n/* SCROLL BAR */\n/* width */\n::-webkit-scrollbar {\n  width: 12px;\n}\n\n/* Track */\n::-webkit-scrollbar-track {\n  box-shadow: inset 0 0 5px grey; \n  border-radius: 6px;\n}\n \n/* Handle */\n::-webkit-scrollbar-thumb {\n  background: #3037e8; \n  border-radius: 6px;\n}\n\n/* Handle on hover */\n::-webkit-scrollbar-thumb:hover {\n  background: #3037e8; \n}\n\n\n.nr-dashboard-theme .nr-dashboard-form {    \n    overflow: hidden;\n    \n}\n\n.nr-dashboard-theme .nr-dashboard-form-button {\n    \n    max-height: 40px;\n}\n\n.padd {\n    \n    padding: 10px;\n    padding-top: 10px;\n}\n\na {\n    color: #97b1eb;\n    text-decoration: none;\n    font-size: large;\n}\n    \n/*\nIt is reasnoble to declare the colors as CSS variables\nso they can be easily called by name where needed.\n\nYou can see that in many places the variables are not used. Change it!\n*/\n\n:root {\n  --color-green-primary: rgb(51, 204, 51);\n  --color-green-secondary: rgb(26, 101, 26);\n  --color-red-primary: rgb(255, 0, 0);\n  --color-red-secondary: rgba(153,0,0,1);\n  --color-gray-primary:rgba(40,40,40,1);\n  --color-gray-secondary:rgba(65,65,65,1);\n  --color-text-primary: rgb(230, 226, 209);\n  --color-widget-border: rgb(84, 78, 78);\n}\n\n/*\nAll CSS adjustments are commented out.\nTurn rules on one by one and see the changes.\nDon't use too many elements cos it wil be confusing\nStart with simple elements like text, slider or button\n\nMany of elements like buttons have states, \nthose rules must be found and adjusted also.\n*/\n\n.nr-dashboard-textinput md-input-container .md-input {\n    text-align: right;\n}\n\n\nmd-list-item {\n    min-height: 40px;\n    height: 40px;\n}\n.masonry-container {\n    position: relative;\n    width: 100%;\n    height:100%;\n    margin: 0 auto;\n    background: rgb(255,0,0);\n    background: linear-gradient(180deg,  var(--color-gray-primary) 0%, var(--color-gray-secondary) 100%);\n}\n\n.nr-dashboard-gauge-titlel {\n    padding-top: 8px;\n}\n\n.nr-dashboard-cardcontainer {\n    position: relative;\n    box-shadow: inset 0px 1px 4px 0px #000000bb;\n    border-radius: 15px;\n}\n\n\n \n.nr-dashboard-theme ui-card-panel {\n    background-color: #33333300;\n    color:var(--color-text-primary);\n    border-radius: 15px;\n    box-shadow: 0 0 8px 0px #00000080;\n}\n\n\n \nbody.nr-dashboard-theme md-content md-card {\n    background-color: #33333300;\n    color: var(--color-text-primary);\n    text-shadow: 4px 2px 4px #00000045;\n    box-shadow: 0 -1px 5px 1px #00000045;\n    border-radius: 8px;\n    border: 1px solid var(--color-widget-border);\n    padding-top: 0px;\n}\n \n\n\n\n.nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n    color: var(--color-text-primary);\n}\n\n\n\n\n.md-button {\n    display: inline-block;\n    position: relative;\n    cursor: pointer;\n    min-height: 36px;\n    min-width: 88px;\n    line-height: 36px;\n    vertical-align: middle;\n    align-items: center;\n    text-align: center;\n    border-radius: 8px;\n    box-sizing: border-box;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    outline: none;\n    border: 0;\n    padding: 0 6px;\n    margin: 6px 8px;\n    background: transparent;\n    color:var(--color-text-primary);\n    white-space: nowrap;\n    text-transform: uppercase;\n    font-weight: 500;\n    font-size: 14px;\n    font-style: inherit;\n    font-variant: inherit;\n    font-family: inherit;\n    text-decoration: none;\n    overflow: hidden;\n    transition: box-shadow .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1);\n}\n\n\n\n/*\n.nr-dashboard-theme .nr-dashboard-button .md-button {\n    background-color: #88888800;\n    color:var(--color-text-primary);\n}\n*/\n\n/*\n.nr-dashboard-theme .nr-dashboard-button .md-button:hover {\n    background-color: #88888855;\n}\n*/\n\n\n/*\nmd-slider .md-thumb {\n    z-index: 1;\n    position: absolute;\n    left: -10px;\n    top: 14px;\n    width: 20px;\n    height: 20px;\n    border-radius: 20px;\n    -webkit-transform: scale(.7);\n    transform: scale(.7);\n    transition: all .4s cubic-bezier(.25,.8,.25,1);\n    box-shadow: 0 0 6px #00000070;\n}\n\n*/\n\n/*\nAdvanced stuff - dynamic change of card CSS\n\nClasses here can be used to make colored stripe at the top of card\nUsage is not in here, but they are added to md-card when needed within another template\n\n.carderr {\n    background: rgb(255,0,0);\n    background: linear-gradient(180deg, var(--color-red-primary) 0px, var(--color-red-secondary) 3px, rgba(80,80,80,1) 4px, rgba(45,45,45,1) 100%);\n}\n.cardok {\n    background: rgb(39,255,0);\n    background: linear-gradient(180deg, var(--color-green-primary) 0px, var(--color-green-secondary) 3px, rgba(70,70,70,1) 4px, rgba(40,40,40,1) 100%);\n}\n*/\n\n</style>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 280,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "8bde670521c4d24a",
        "type": "ui_template",
        "z": "5715139153db24f7",
        "group": "c982fbb8.1deb38",
        "name": "Clock Toolbar",
        "order": 2,
        "width": "0",
        "height": "0",
        "format": " \n<script>\n    (function(scope) {\n        console.log('Position 1');\n        console.dir(scope);\n        console.log(scope.msg);\n        scope.$watch('msg.payload', function(data) {\n            console.log('Position 2');\n            console.dir(data);\n            alert(data);\n        });\n    })(scope);\n</script>\n\n<script id=\"titleScript\" type=\"text/javascript\">\n\n\n$(function() {\n    if($('.md-toolbar-tools').length != 0){\n        loadClock();\n    }else setTimeout(loadClock, 500)\n});\n\nvar instr = \"\";\n\nfunction loadClock(){\n    $('#clock').remove();\n    var toolbar = $('.md-toolbar-tools');\n    \n    var div = $('<div/>');\n    var p = $('<p/ id=\"clock\">');\n    \n    \n    \n    div.append(p);\n    div[0].style.margin = '5px 5px 5px auto';\n    div[0].style.fontSize = '18px';\n    toolbar.append(div);\n\n    function displayTitle(lh) {\n        p.text(lh); \n    }\n    \n    function upTime() {\n        var d = new Date();\n        p.html(d.toLocaleString('en-GB') + (instr||\"\"));\n    }\n\n    if(document.clockInterval){ \n            clearInterval(document.clockInterval);\n            document.clockInterval = null;\n    }\n        \n    document.clockInterval = setInterval(upTime,1000);\n    \n    \n}\n\n\n\n\n</script>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 560,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "d6517dd7678960cb",
        "type": "debug",
        "z": "5715139153db24f7",
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 420,
        "wires": []
    },
    {
        "id": "307de46a7f2b649a",
        "type": "inject",
        "z": "5715139153db24f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "c38ffe5bfd0dd27d"
            ]
        ]
    },
    {
        "id": "c38ffe5bfd0dd27d",
        "type": "file in",
        "z": "5715139153db24f7",
        "name": "",
        "filename": "/boot/heatweb/credentials.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 390,
        "y": 180,
        "wires": [
            [
                "ad93699b4f67b45e"
            ]
        ]
    },
    {
        "id": "fe3ce37e31818309",
        "type": "change",
        "z": "5715139153db24f7",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "credentials",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ad93699b4f67b45e",
        "type": "json",
        "z": "5715139153db24f7",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 180,
        "wires": [
            [
                "fe3ce37e31818309"
            ]
        ]
    },
    {
        "id": "36117836bad06b7d",
        "type": "function",
        "z": "5715139153db24f7",
        "name": "Add Credential",
        "func": "var credentials = flow.get(\"credentials\")||{};\n\ncredentials[msg.topic] = msg.payload;\n\nflow.set(\"credentials\", credentials) || {};\n\nmsg.payload = credentials;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 520,
        "wires": [
            [
                "a11833d32d5afaa2"
            ]
        ]
    },
    {
        "id": "7dcb3f4049bf3039",
        "type": "inject",
        "z": "5715139153db24f7",
        "name": "adminPassword",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "adminPassword",
        "payload": "zccamei4ies@",
        "payloadType": "str",
        "x": 200,
        "y": 520,
        "wires": [
            [
                "36117836bad06b7d"
            ]
        ]
    },
    {
        "id": "cb9c45d3b0fd9de7",
        "type": "inject",
        "z": "5715139153db24f7",
        "name": "remoteInfluxServer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "remoteInfluxServer",
        "payload": "https://europe-west1-1.gcp.cloud2.influxdata.com",
        "payloadType": "str",
        "x": 190,
        "y": 580,
        "wires": [
            [
                "36117836bad06b7d"
            ]
        ]
    },
    {
        "id": "de35c923bed35131",
        "type": "inject",
        "z": "5715139153db24f7",
        "name": "localInfluxToken",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "localInfluxToken",
        "payload": "oHyHPxoTEHQysurXl_4Kxbmj5EnpWtsg3RnSXoMnLeO01ICmIBUXIo3yXNEsLxMtPzTb9lwgzHDX5tL4ipOzjw==",
        "payloadType": "str",
        "x": 200,
        "y": 720,
        "wires": [
            [
                "36117836bad06b7d"
            ]
        ]
    },
    {
        "id": "2f132fdd9475fe4d",
        "type": "inject",
        "z": "5715139153db24f7",
        "name": "remoteAdminCommand",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "remoteAdminCommand",
        "payload": "sudo wget -O - \"https://connect.jfrog.io/v2/install_connect\" | sudo sh -s HKFpL8CSxjiG8HPrcpwBY5cUpukezbRg9A heatwebremote",
        "payloadType": "str",
        "x": 180,
        "y": 780,
        "wires": [
            [
                "36117836bad06b7d"
            ]
        ]
    },
    {
        "id": "56cf418b6808cc80",
        "type": "inject",
        "z": "5715139153db24f7",
        "name": "remoteInfluxBucket",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "remoteInfluxBucket",
        "payload": "heatweb",
        "payloadType": "str",
        "x": 190,
        "y": 620,
        "wires": [
            [
                "36117836bad06b7d"
            ]
        ]
    },
    {
        "id": "384d28fee320bc97",
        "type": "inject",
        "z": "5715139153db24f7",
        "name": "remoteInfluxToken",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "remoteInfluxToken",
        "payload": "__fuM9rpv_zub-WskhxYxKySio0H0ZeDKrM4WttE9lkkrje_YWwll1BRLV4CPKyVJasdhyOZblymLwS3XD418w==",
        "payloadType": "str",
        "x": 190,
        "y": 660,
        "wires": [
            [
                "36117836bad06b7d"
            ]
        ]
    },
    {
        "id": "a8524a57fe4e5a1f",
        "type": "inject",
        "z": "5715139153db24f7",
        "name": "localMqttPassword",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "localMqttPassword",
        "payload": "zccamei4ies@",
        "payloadType": "str",
        "x": 190,
        "y": 860,
        "wires": [
            [
                "36117836bad06b7d"
            ]
        ]
    },
    {
        "id": "48a3df2fd2764d92",
        "type": "inject",
        "z": "5715139153db24f7",
        "name": "emailUser",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "emailUser",
        "payload": "nodered@heatweb.com",
        "payloadType": "str",
        "x": 220,
        "y": 920,
        "wires": [
            [
                "36117836bad06b7d"
            ]
        ]
    },
    {
        "id": "3612f4aa7e1a3538",
        "type": "inject",
        "z": "5715139153db24f7",
        "name": "emailPassword",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "emailPassword",
        "payload": "nodered@heatweb.com",
        "payloadType": "str",
        "x": 200,
        "y": 960,
        "wires": [
            [
                "36117836bad06b7d"
            ]
        ]
    },
    {
        "id": "a11833d32d5afaa2",
        "type": "json",
        "z": "5715139153db24f7",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 570,
        "y": 520,
        "wires": [
            [
                "9bbe6f283617b40e"
            ]
        ]
    },
    {
        "id": "9bbe6f283617b40e",
        "type": "file",
        "z": "5715139153db24f7",
        "d": true,
        "name": "",
        "filename": "/home/pi/credentials.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 750,
        "y": 520,
        "wires": [
            [
                "726d9075c9f3aee0"
            ]
        ]
    },
    {
        "id": "726d9075c9f3aee0",
        "type": "exec",
        "z": "5715139153db24f7",
        "d": true,
        "command": "cp /home/pi/credentials.json /boot/heatweb/credentials.json && rm /home/pi/credentials.json",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1220,
        "y": 520,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "3487cfb8.28fdf",
        "type": "ui_text_input",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "label": "System Name",
        "tooltip": "e.g. St.Trinians",
        "group": "cb203bcb.f1ec68",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": false,
        "mode": "text",
        "delay": "5000",
        "topic": "setconfig/name",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 520,
        "y": 640,
        "wires": [
            [
                "93e55623.1ae628"
            ]
        ]
    },
    {
        "id": "c346ae2f.2c43e",
        "type": "ui_template",
        "z": "d26c3be6.b5ef58",
        "d": true,
        "group": "36b47e47.04f1c2",
        "name": "Virtual Keyboard",
        "order": 5,
        "width": "3",
        "height": "1",
        "format": "<script> \n    \n// the semi-colon before function invocation is a safety net against concatenated\n// scripts and/or other plugins which may not be closed properly.\n; (function ($, window, document, undefined) {\n\n    // undefined is used here as the undefined global variable in ECMAScript 3 is\n    // mutable (ie. it can be changed by someone else). undefined isn't really being\n    // passed in so we can ensure the value of it is truly undefined. In ES5, undefined\n    // can no longer be modified.\n\n    // window and document are passed through as local variable rather than global\n    // as this (slightly) quickens the resolution process and can be more efficiently\n    // minified (especially when both are regularly referenced in your plugin).\n\n    // Create the defaults once\n    var pluginName = \"jkeyboard\",\n        defaults = {\n            layout: \"english\",\n            input: $('#input'),\n            customLayouts: {\n                selectable: []\n            },\n        };\n\n\n    var function_keys = {\n        backspace: {\n            text: 'DEL',\n        },\n        return: {\n            text: 'Enter'\n        },\n        shift: {\n            text: 'Shift'\n        },\n        space: {\n            text: 'Space'\n        },\n        numeric_switch: {\n            text: '123',\n            command: function () {\n                this.createKeyboard('numeric');\n                this.events();\n            }\n        },\n        layout_switch: {\n            text: '<i class=\"fa fa-keyboard-o\" aria-hidden=\"true\"></i>',\n            command: function () {\n                var l = this.toggleLayout();\n                this.createKeyboard(l);\n                this.events();\n            }\n        },\n        character_switch: {\n            text: 'ABC',\n            command: function () {\n                this.createKeyboard(layout);\n                this.events();\n            }\n        },\n        symbol_switch: {\n            text: '#+=',\n            command: function () {\n                this.createKeyboard('symbolic');\n                this.events();\n            }\n        }\n    };\n\n\n    var layouts = {\n        selectable: ['azeri', 'english', 'russian','french', 'emoji'],\n        azeri: [\n            ['q', 'ü', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'ö', 'ğ'],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'ı', 'ə'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'ç', 'ş', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        english: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l',],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        russian: [\n            ['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х'],\n            ['ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э'],\n            ['shift', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        french: [\n            ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',],\n            ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],\n        emoji: [\n            ['😀', '😁', '😂', '🤣', '😃', '😄', '😅', '😆', '😉', '😊',],\n            ['😋', '😎', '😍', '😘', 'g', 'h', 'j', 'k', 'l','à','ç'],\n            ['shift', 'z', 'x', 'c', 'v', 'b', 'n', 'm','é','è', 'backspace'],\n            ['numeric_switch', 'layout_switch', 'space', 'return']\n        ],            \n        numeric: [\n            ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n            ['-', '/', ':', ';', '(', ')', '$', '&', '@', '\"'],\n            ['symbol_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n        ],\n        numbers_only: [\n            ['1', '2', '3',],\n            ['4', '5', '6',],\n            ['7', '8', '9',],\n            ['0', 'backspace'],\n        ],\n        symbolic: [\n            ['[', ']', '{', '}', '#', '%', '^', '*', '+', '='],\n            ['_', '\\\\', '|', '~', '<', '>'],\n            ['numeric_switch', '.', ',', '?', '!', \"'\", 'backspace'],\n            ['character_switch', 'layout_switch', 'space', 'return'],\n\n        ]\n    }\n\n    var shift = false, capslock = false, layout = 'english', layout_id = 0;\n\n    // The actual plugin constructor\n    function Plugin(element, options) {\n        this.element = element;\n        // jQuery has an extend method which merges the contents of two or\n        // more objects, storing the result in the first object. The first object\n        // is generally empty as we don't want to alter the default options for\n        // future instances of the plugin\n        this.settings = $.extend({}, defaults, options);\n        // Extend & Merge the cusom layouts\n        layouts = $.extend(true, {}, this.settings.customLayouts, layouts);\n        if (Array.isArray(this.settings.customLayouts.selectable)) {\n            $.merge(layouts.selectable, this.settings.customLayouts.selectable);\n        }\n        this._defaults = defaults;\n        this._name = pluginName;\n        this.init();\n    }\n\n    Plugin.prototype = {\n        init: function () {\n            layout = this.settings.layout;\n            this.createKeyboard(layout);\n            this.events();\n        },\n\n        setInput: function (newInputField) {\n            this.settings.input = newInputField;\n        },\n\n        createKeyboard: function (layout) {\n            shift = false;\n            capslock = false;\n\n            var keyboard_container = $('<ul/>').addClass('jkeyboard'),\n                me = this;\n\n            layouts[layout].forEach(function (line, index) {\n                var line_container = $('<li/>').addClass('jline');\n                line_container.append(me.createLine(line));\n                keyboard_container.append(line_container);\n            });\n\n            $(this.element).html('').append(keyboard_container);\n        },\n\n        createLine: function (line) {\n            var line_container = $('<ul/>');\n\n            line.forEach(function (key, index) {\n                var key_container = $('<li/>').addClass('jkey').data('command', key);\n\n                if (function_keys[key]) {\n                    key_container.addClass(key).html(function_keys[key].text);\n                }\n                else {\n                    key_container.addClass('letter').html(key);\n                }\n\n                line_container.append(key_container);\n            })\n\n            return line_container;\n        },\n\n        events: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift'),\n                space_key = $(this.element).find('.space'),\n                backspace_key = $(this.element).find('.backspace'),\n                return_key = $(this.element).find('.return'),\n\n                me = this,\n                fkeys = Object.keys(function_keys).map(function (k) {\n                    return '.' + k;\n                }).join(',');\n\n            letters.on('click', function () {\n                me.type((shift || capslock) ? $(this).text().toUpperCase() : $(this).text());\n            });\n\n            space_key.on('click', function () {\n                me.type(' ');\n            });\n\n            return_key.on('click', function () {\n                me.type(\"\\n\");\n                me.settings.input.parents('form').submit();\n            });\n\n            backspace_key.on('click', function () {\n                me.backspace();\n            });\n\n            shift_key.on('click', function () {\n                if (capslock) {\n                    me.toggleShiftOff();\n                    capslock = false;\n                } else {\n                    me.toggleShiftOn();\n                }\n            }).on('dblclick', function () {\n                capslock = true;\n            });\n\n\n            $(fkeys).on('click', function () {\n                var command = function_keys[$(this).data('command')].command;\n                if (!command) return;\n\n                command.call(me);\n            });\n        },\n\n        type: function (key) {\n            var input = this.settings.input,\n                val = input.val(),\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n\n            var max_length = $(input).attr(\"maxlength\");\n            if (start == end && end == val.length) {\n                if (!max_length || val.length < max_length) {\n                    input.val(val + key);\n                    input.change()\n                    $('#vkeyname').text(val + key)\n                }\n            } else {\n                if (input_node.type == \"text\"){\n                    var new_string = this.insertToString(start, end, val, key);\n                    input.val(new_string);\n                    start++;\n                    end = start;\n                    input_node.setSelectionRange(start, end);\n                }else{\n                    input.val(val + key);\n                }\n                input.change()\n                $('#vkeyname').text(val + key)\n                \n            }\n            input.trigger('focus');\n\n            if (shift && !capslock) {\n                this.toggleShiftOff();\n            }\n        },\n\n        backspace: function () {\n            var input = this.settings.input,\n                val = input.val();\n                input_node = input.get(0),\n                start = input_node.selectionStart,\n                end = input_node.selectionEnd;\n            if (input.type == \"text\"){\n                input.val(val.slice(0, start-1) + val.slice(start))\n                input_node.setSelectionRange(start-1, start-1);\n                console.log(val)\n                $('#vkeyname').text(val)\n            }else{\n                input.val(val.slice(0,-1))\n                $('#vkeyname').text(val.slice(0,-1))\n            }\n            input.change()\n            input.focus()\n        },\n\n        toggleShiftOn: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.addClass('uppercase');\n            shift_key.addClass('active')\n            shift = true;\n        },\n\n        toggleShiftOff: function () {\n            var letters = $(this.element).find('.letter'),\n                shift_key = $(this.element).find('.shift');\n\n            letters.removeClass('uppercase');\n            shift_key.removeClass('active');\n            shift = false;\n        },\n\n        toggleLayout: function () {\n            layout_id = layout_id || 0;\n            var plain_layouts = layouts.selectable;\n            layout_id++;\n\n            var current_id = layout_id % plain_layouts.length;\n            var SelectedLayoutName = plain_layouts[current_id];\n            $('#vkeyname').text('V-Keyboard ' + SelectedLayoutName )\n            return plain_layouts[current_id];\n        },\n\n        insertToString: function (start, end, string, insert_string) {\n            return string.substring(0, start) + insert_string + string.substring(end, string.length);\n        }\n    };\n\n        /*\n\t\t// A really lightweight plugin wrapper around the constructor,\n\t\t// preventing against multiple instantiations\n\t\t$.fn[ pluginName ] = function ( options ) {\n\t\t\t\treturn this.each(function() {\n\t\t\t\t\t\tif ( !$.data( this, \"plugin_\" + pluginName ) ) {\n\t\t\t\t\t\t\t\t$.data( this, \"plugin_\" + pluginName, new Plugin( this, options ) );\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t};\n        */\n        var methods = {\n            init: function(options) {\n                if (!this.data(\"plugin_\" + pluginName)) {\n                    this.data(\"plugin_\" + pluginName, new Plugin(this, options));\n                }\n            },\n\t\t\tsetInput: function(content) {\n\t\t\t\tthis.data(\"plugin_\" + pluginName).setInput($(content));\n            },\n            setLayout: function(layoutname) {\n                // change layout if it is not match current\n                object = this.data(\"plugin_\" + pluginName);\n                if (typeof(layouts[layoutname]) !== 'undefined' && object.settings.layout != layoutname) {\n                    object.settings.layout = layoutname;\n                    object.createKeyboard(layoutname);\n                    object.events();\n                };\n            },\n        };\n\n\t\t$.fn[pluginName] = function (methodOrOptions) {\n            if (methods[methodOrOptions]) {\n                return methods[methodOrOptions].apply(this.first(), Array.prototype.slice.call( arguments, 1));\n            } else if (typeof methodOrOptions === 'object' || ! methodOrOptions) {\n                // Default to \"init\"\n                return methods.init.apply(this.first(), arguments);\n            } else {\n                $.error('Method ' +  methodOrOptions + ' does not exist on jQuery.tooltip');\n            }\n        };\n\n})(jQuery, window, document);\n</script>\n<style>\n    .jkeyboard {\n  display: inline-block;\n}\n.jkeyboard, .jkeyboard .jline, .jkeyboard .jline ul {\n  display: block;\n  margin: 0;\n  padding: 0;\n}\n.jkeyboard .jline {\n  text-align: center;\n  margin-left: -14px;\n}\n.jkeyboard .jline ul li {\n  font-family: arial, sans-serif;\n  font-size: 20px;\n  display: inline-block;\n  border: 1px solid #468db3;\n  -webkit-box-shadow: 0 0 3px #468db3;\n  -webkit-box-shadow: inset 0 0 3px #468db3;\n  margin: 5px 0 1px 6px;\n  color: #000000;\n  border-radius: 5px;\n  width: 52px;\n  height: 52px;\n  box-sizing: border-box;\n  text-align: center;\n  line-height: 52px;\n  overflow: hidden;\n  cursor: pointer;\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: -moz-none;\n  -ms-user-select: none;\n  user-select: none;\n}\n.jkeyboard .jline ul li.uppercase {\n  text-transform: uppercase;\n}\n.jkeyboard .jline ul li:hover, .jkeyboard .jline ul li:active {\n  background-color: #185a82;\n}\n.jkeyboard .jline .return {\n  width: 80px;\n}\n.jkeyboard .jline .space {\n  width: 366px;\n}\n.jkeyboard .jline .numeric_switch {\n  width: 65px;\n}\n.jkeyboard .jline .layout_switch {\n}\n.jkeyboard .jline .shift {\n  width: 60px;\n}\n.jkeyboard .jline .backspace {\n  width: 69px;\n}\n</style>\n\n\n\n\n<style>\nbody {font-family: Arial, Helvetica, sans-serif;}\n\n.nr-dashboard-theme .nr-dashboard-template .md-button:not(:first-of-type) {\n    margin-top: 0px;\n}\n\n/* The Modal (background) */\n.modal {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    opacity:0.99;\n    z-index: 100; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n/* Modal Content */\n.modal-content {\n    position: fixed;\n    background-color: #fefefe;\n    margin: auto;\n    padding: 0;\n    bottom: 0%;\n    left: 50%;\n    transform: translate(-50%, 0%);\n    border: 1px solid #888;\n    width: fit-content;\n    max-width: 100%;\n    max-height: 100%;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);\n    -webkit-animation-name: animate;\n    -webkit-animation-duration: 0.4s;\n    animation-name: animate;\n    animation-duration: 0.4s\n}\n\n/* Add Animation */\n@-webkit-keyframes animate {\n    from {bottom:100%; opacity:0} \n    to {bottom:0%; opacity:1}\n}\n\n@keyframes animate {\n    from {bottom:100%; opacity:0}\n    to {bottom:0%; opacity:1}\n}\n\n/* The Close Button */\n.close {\n    color: black;\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n}\n\n.close:hover,\n.close:focus {\n    color: #000;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n.modal-header {\n    padding: 2px 16px;\n    background-color: aliceblue;\n    color: white;\n}\n\n.modal-body {padding: 2px 16px;}\n\n.modal-footer {\n    padding: 2px 16px;\n    background-color: #5cb85c;\n    color: white;\n}\n</style>\n\n<!-- The Modal -->\n<div id=\"myModal\" class=\"modal\">\n\n  <!-- Modal content -->\n  <div class=\"modal-content\">\n      <div class=\"modal-header\">\n      <span class=\"close\" onclick=\"closeModal()\">&times;</span>\n      <h2 id=\"vkeyname\" style=\"background-color: aliceblue !important; color: black !important; text-align: center; min-height: 30px;\">V-Keyboard</h2>\n    </div>\n    <div class=\"modal-body\">\n        <div id=\"keyboard\"></div>\n        <div>\n        </div>\n    </div>\n  </div>\n</div>\n\n\n<script>\n    // Get the modal\nvar modal = document.getElementById('myModal');\n\n/*\n$('input[type=text]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"english\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n\n$('input[type=number]').click(function () {\n    $('#keyboard').unbind().removeData();\n        $('#keyboard').jkeyboard({\n            layout: \"numbers_only\",\n            input: $('#'+$(this).attr('id'))\n    });\n});\n*/\n\nvar inputTags;\nvar inputType;\n\nvar getinputs = function() {\n    inputTags = document.getElementsByTagName(\"input\");\n    console.log(inputTags)\n    for (var i = 0; i < inputTags.length; i++) {\n        inputTags[i].addEventListener('click', openModal, false)\n    }\n}\n\nsetTimeout(function(){ getinputs(); }, 1000);\n\nvar inputTarget;\n\nvar openModal = function() {\n    inputType = event.target.type\n    inputTarget = event.target\n    var layoutName;\n    if (inputType == \"number\"){\n        //inputTarget.type = \"number\" //hack because chrome doesn't allow setselection in number inputs\n        //inputTarget.value = \"\"\n        layoutName = \"numbers_only\"\n    }else{\n        layoutName = \"english\"\n    }\n    $('#vkeyname').text(event.target.value)\n    $('#keyboard').unbind().removeData();\n    modal.style.display = \"block\";\n    $('#keyboard').jkeyboard({\n        layout: layoutName,\n        input: $('#'+$(this).attr('id'))\n    });\n}\n\n\n// Get the <span> element that closes the modal\nvar span = document.getElementsByClassName(\"close\")[0];\n\n// When the user clicks on <span> (x), close the modal\n//span.onclick = function(event) {\n  //closeModal()\n//}\n\n// When the user clicks anywhere outside of the modal, close it\nwindow.onclick = function(event) {\n    var source = event.target;\n    if (source == modal || source == span) {\n        closeModal(source)\n    }\n};\n\nvar closeModal = function(source){\n    //console.log(\"closing\")\n    modal.style.display = \"none\";\n   \n    if (inputType == \"number\"){\n        inputTarget.type = \"number\" //hack because chrome doesn't allow selectionstart on number inputs\n    }\n}\n\n</script>\n<script>\n\nvar clickState = 1;\nvar btn = document.querySelector('.VK');\n\nbtn.addEventListener('click', function(){\n\n  if (clickState == 0) {\n    this.textContent = 'V-KeyBoard On';\n    modal = document.getElementById('myModal');\n    clickState = 1;\n  } else {\n    this.textContent = 'V-KeyBoard Off';\n    modal = document.getElementById('empty');\n    clickState = 0;\n  }\n\n});\n</script>\n\n<style>\n.VK{\n    position: fixed;\n    top: 60px;\n    right: 20px;\n    height: 30px;\n}\n</style>\n\n<div id=\"empty\"></div>\n<button class=\"VK\" style=\"display:none\">V-KeyBoard On</button> ",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 520,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "efc92398.82dbf",
        "type": "ui_text_input",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "label": "Email Address",
        "tooltip": "",
        "group": "cb203bcb.f1ec68",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": false,
        "mode": "email",
        "delay": "5000",
        "topic": "setconfig/email",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 520,
        "y": 680,
        "wires": [
            [
                "bbcdf11f.f906a"
            ]
        ]
    },
    {
        "id": "bf47904.d275a7",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 640,
        "wires": [
            [
                "f8a0f6f2.95b158",
                "343dbd59.0f0e52",
                "2f3f1fbca1384eaa",
                "361cb15862152b56"
            ]
        ]
    },
    {
        "id": "bbcdf11f.f906a",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "title",
                "pt": "msg",
                "to": "Email address for alarms",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 680,
        "wires": [
            [
                "e44a91c9.939dc",
                "10386a58.ef2e16",
                "3ca1cdfc.ddcb12"
            ]
        ]
    },
    {
        "id": "93e55623.1ae628",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "title",
                "pt": "msg",
                "to": "System name",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 640,
        "wires": [
            [
                "e44a91c9.939dc",
                "10386a58.ef2e16"
            ]
        ]
    },
    {
        "id": "e44a91c9.939dc",
        "type": "link out",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1055,
        "y": 640,
        "wires": []
    },
    {
        "id": "f8a0f6f2.95b158",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "name",
        "func": "msg.payload = global.get(\"config.name\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 640,
        "wires": [
            [
                "3487cfb8.28fdf"
            ]
        ]
    },
    {
        "id": "343dbd59.0f0e52",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "email",
        "func": "msg.payload = global.get(\"config.email\") || \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 680,
        "wires": [
            [
                "efc92398.82dbf"
            ]
        ]
    },
    {
        "id": "cfa092d4.4a897",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "post changes",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "cmd/request",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "local/+/+/settings/#",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 720,
        "wires": [
            [
                "e44a91c9.939dc"
            ]
        ]
    },
    {
        "id": "10386a58.ef2e16",
        "type": "trigger",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "30",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 990,
        "y": 760,
        "wires": [
            [
                "cfa092d4.4a897"
            ]
        ]
    },
    {
        "id": "3ca1cdfc.ddcb12",
        "type": "trigger",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "30",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 990,
        "y": 840,
        "wires": [
            [
                "334db306.ec4e5c"
            ]
        ]
    },
    {
        "id": "334db306.ec4e5c",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "attach",
        "func": "msg.to = msg.payload;\n\nmsg.payload=\"Update from \"+global.get(\"node\");\nmsg.topic=\"Change of email on \"+global.get(\"node\");\n\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 900,
        "wires": [
            [
                "162d2a4d.5abdb6"
            ]
        ]
    },
    {
        "id": "162d2a4d.5abdb6",
        "type": "link out",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "links": [
            "4bf50365.a06d4c",
            "a1744584.91173"
        ],
        "x": 1175,
        "y": 900,
        "wires": []
    },
    {
        "id": "69fb06c8fbd9afa9",
        "type": "ui_template",
        "z": "d26c3be6.b5ef58",
        "group": "cb203bcb.f1ec68",
        "name": "",
        "order": 3,
        "width": "12",
        "height": "4",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 140,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "8a859164739d093a",
        "type": "ui_text_input",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "label": "Node Identity",
        "tooltip": "No spaces or punctuation allowed",
        "group": "cb203bcb.f1ec68",
        "order": 1,
        "width": "0",
        "height": "0",
        "passthru": false,
        "mode": "text",
        "delay": "5000",
        "topic": "setconfig/nodeId",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 510,
        "y": 720,
        "wires": [
            [
                "73c8f559be13a034"
            ]
        ]
    },
    {
        "id": "95d9a4328b60897a",
        "type": "ui_text_input",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "label": "Network Identity",
        "tooltip": "",
        "group": "cb203bcb.f1ec68",
        "order": 2,
        "width": "0",
        "height": "0",
        "passthru": false,
        "mode": "text",
        "delay": "5000",
        "topic": "setconfig/networkId",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 520,
        "y": 760,
        "wires": [
            [
                "7ce7a2c76a2fb580"
            ]
        ]
    },
    {
        "id": "2f3f1fbca1384eaa",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "nodeId",
        "func": "msg.payload = global.get(\"config.nodeId\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 720,
        "wires": [
            [
                "8a859164739d093a"
            ]
        ]
    },
    {
        "id": "361cb15862152b56",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "networkId",
        "func": "msg.payload = global.get(\"config.networkId\") || \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 760,
        "wires": [
            [
                "95d9a4328b60897a"
            ]
        ]
    },
    {
        "id": "73c8f559be13a034",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "title",
                "pt": "msg",
                "to": "Node Identity",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "7ce7a2c76a2fb580",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "title",
                "pt": "msg",
                "to": "Network Identity",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 730,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "2d072824c6553cb9",
        "type": "fs-file-lister",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "start": "/home/pi/plumbing-controller/flows/mods",
        "pattern": "flow_*.json",
        "folders": "*",
        "hidden": true,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": "3",
        "stat": false,
        "showWarnings": true,
        "x": 440,
        "y": 140,
        "wires": [
            [
                "d19d75dc0cf0b6fd",
                "778a715403c263da"
            ]
        ]
    },
    {
        "id": "868df38dada71be9",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 140,
        "wires": [
            [
                "2d072824c6553cb9"
            ]
        ]
    },
    {
        "id": "d19d75dc0cf0b6fd",
        "type": "debug",
        "z": "d26c3be6.b5ef58",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 140,
        "wires": []
    },
    {
        "id": "38f185597cb5b3ac",
        "type": "ui_template",
        "z": "d26c3be6.b5ef58",
        "group": "36b47e47.04f1c2",
        "name": "",
        "order": 5,
        "width": "6",
        "height": "8",
        "format": "<script>\n    var value = \"hello world\";\n// or overwrite value in your callback function ...\nthis.scope.action = function() { return value; }\n</script>\n<br>\n<md-button ng-click=\"send({payload:action()})\">\n    Click me to send a hello world\n</md-button>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 800,
        "y": 200,
        "wires": [
            [
                "227f235df3f0c946",
                "7f769c6e77c5fa51"
            ]
        ]
    },
    {
        "id": "227f235df3f0c946",
        "type": "debug",
        "z": "d26c3be6.b5ef58",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 200,
        "wires": []
    },
    {
        "id": "6849d4565b71eaf0",
        "type": "ui_ui_control",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "events": "change",
        "x": 240,
        "y": 200,
        "wires": [
            [
                "2d072824c6553cb9",
                "7bc4773ca6357551"
            ]
        ]
    },
    {
        "id": "778a715403c263da",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "function 1",
        "func": "\nvar searchfor = flow.get(\"searchfor\")||\"\";\n\nmsg.template =\"<script>\\n\";\nmsg.template += 'this.scope.action = function(m) { return m; }\\n';\nmsg.template += '</script>\\n';\nmsg.template += '<div style=\"margin-bottom: 15px;\"><br><p>Press to install from the following mods.</p>\\n';\nmsg.template += '<small><p>To remove mods, start from a fresh application.</p></small><br></div>\\n';\n\nmsg.payload.sort();\n//var onfirst = \"<br>\";\nfor (var item in msg.payload) {\n\n    var loot = \"\";\n    var tit = msg.payload[item].split(\"flow_\")[1].split(\".json\")[0].replace(/_/g, \" \");\n    var fileid = \"flow_\" + msg.payload[item].split(\"flow_\")[1].split(\".json\")[0].replace(/ /g, \"_\");\n    var info = flow.get(\"flowinfo.\" + fileid); \n\n    loot += '\\n<div style=\"border: 1px solid; padding: 10px; border-radius: 5px; border-color: #837360; padding-bottom: 16px; margin-bottom: 15px;\">';\n    loot += '<small><p style=\"padding-bottom: 10px;\"><b>' + tit +'</b></p></small>\\n';\n\n    if (searchfor && (tit + \" \" + info).toLowerCase().indexOf(searchfor.toLowerCase()) < 0) {  continue;  }\n    \n    //msg.template += '<small><p>' + fileid + '</p></small>\\n';\n    if (info) { loot += '<p>' + info + '</p><br>\\n'; }\n\n\n    loot += '<md-button style=\"width:100%\" ng-click=\"send({payload:action(' + \"'\" + msg.payload[item] + \"'\" + ')})\">\\n';\n    // onfirst = \"\";\n    loot += 'INSTALL ' + tit + '\\n';\n    loot += '</md-button></div>\\n';\n\n\n\n    msg.template += loot;\n    \n\n}\n    \nmsg.payload = null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 200,
        "wires": [
            [
                "38f185597cb5b3ac"
            ]
        ]
    },
    {
        "id": "76d8e235c0410b97",
        "type": "link out",
        "z": "d26c3be6.b5ef58",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "c2e30f26d233c6a0"
        ],
        "x": 1645,
        "y": 260,
        "wires": []
    },
    {
        "id": "3c8e957812aaab8d",
        "type": "file in",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1520,
        "y": 260,
        "wires": [
            [
                "76d8e235c0410b97"
            ]
        ]
    },
    {
        "id": "717546fd81815f0c",
        "type": "ui_toast",
        "z": "d26c3be6.b5ef58",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Continue",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1180,
        "y": 260,
        "wires": [
            [
                "7a17c287a8da3d3b"
            ]
        ]
    },
    {
        "id": "7a17c287a8da3d3b",
        "type": "switch",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Continue",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1340,
        "y": 260,
        "wires": [
            [
                "3c8e957812aaab8d"
            ],
            []
        ]
    },
    {
        "id": "7f769c6e77c5fa51",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 260,
        "wires": [
            [
                "717546fd81815f0c"
            ]
        ]
    },
    {
        "id": "c357940457183e69",
        "type": "file in",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 860,
        "y": 360,
        "wires": [
            [
                "9fd7f2062c46a1d0"
            ]
        ]
    },
    {
        "id": "c7095a20e528cc48",
        "type": "split",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 360,
        "wires": [
            [
                "7642388ecb8d41cc"
            ]
        ]
    },
    {
        "id": "caf57c6e7c8ebff8",
        "type": "debug",
        "z": "d26c3be6.b5ef58",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 360,
        "wires": []
    },
    {
        "id": "7642388ecb8d41cc",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename",
                "pt": "msg",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 360,
        "wires": [
            [
                "c357940457183e69"
            ]
        ]
    },
    {
        "id": "9fd7f2062c46a1d0",
        "type": "function",
        "z": "d26c3be6.b5ef58",
        "name": "function 2",
        "func": "// https://adamvleggett.github.io/drawdown/\n\n\n\nfunction markdown(src) {\n\n    var rx_lt = /</g;\n    var rx_gt = />/g;\n    var rx_space = /\\t|\\r|\\uf8ff/g;\n    var rx_escape = /\\\\([\\\\\\|`*_{}\\[\\]()#+\\-~])/g;\n    var rx_hr = /^([*\\-=_] *){3,}$/gm;\n    var rx_blockquote = /\\n *&gt; *([^]*?)(?=(\\n|$){2})/g;\n    var rx_list = /\\n( *)(?:[*\\-+]|((\\d+)|([a-z])|[A-Z])[.)]) +([^]*?)(?=(\\n|$){2})/g;\n    var rx_listjoin = /<\\/(ol|ul)>\\n\\n<\\1>/g;\n    var rx_highlight = /(^|[^A-Za-z\\d\\\\])(([*_])|(~)|(\\^)|(--)|(\\+\\+)|`)(\\2?)([^<]*?)\\2\\8(?!\\2)(?=\\W|_|$)/g;\n    var rx_code = /\\n((```|~~~).*\\n?([^]*?)\\n?\\2|((    .*?\\n)+))/g;\n    var rx_link = /((!?)\\[(.*?)\\]\\((.*?)( \".*\")?\\)|\\\\([\\\\`*_{}\\[\\]()#+\\-.!~]))/g;\n    var rx_table = /\\n(( *\\|.*?\\| *\\n)+)/g;\n    var rx_thead = /^.*\\n( *\\|( *\\:?-+\\:?-+\\:? *\\|)* *\\n|)/;\n    var rx_row = /.*\\n/g;\n    var rx_cell = /\\||(.*?[^\\\\])\\|/g;\n    var rx_heading = /(?=^|>|\\n)([>\\s]*?)(#{1,6}) (.*?)( #*)? *(?=\\n|$)/g;\n    var rx_para = /(?=^|>|\\n)\\s*\\n+([^<]+?)\\n+\\s*(?=\\n|<|$)/g;\n    var rx_stash = /-\\d+\\uf8ff/g;\n\n    function replace(rex, fn) {\n        src = src.replace(rex, fn);\n    }\n\n    function element(tag, content) {\n        return '<' + tag + '>' + content + '</' + tag + '>';\n    }\n\n    function blockquote(src) {\n        return src.replace(rx_blockquote, function (all, content) {\n            return element('blockquote', blockquote(highlight(content.replace(/^ *&gt; */gm, ''))));\n        });\n    }\n\n    function list(src) {\n        return src.replace(rx_list, function (all, ind, ol, num, low, content) {\n            var entry = element('li', highlight(content.split(\n                RegExp('\\n ?' + ind + '(?:(?:\\\\d+|[a-zA-Z])[.)]|[*\\\\-+]) +', 'g')).map(list).join('</li><li>')));\n\n            return '\\n' + (ol\n                ? '<ol start=\"' + (num\n                    ? ol + '\">'\n                    : parseInt(ol, 36) - 9 + '\" style=\"list-style-type:' + (low ? 'low' : 'upp') + 'er-alpha\">') + entry + '</ol>'\n                : element('ul', entry));\n        });\n    }\n\n    function highlight(src) {\n        return src.replace(rx_highlight, function (all, _, p1, emp, sub, sup, small, big, p2, content) {\n            return _ + element(\n                emp ? (p2 ? 'strong' : 'em')\n                    : sub ? (p2 ? 's' : 'sub')\n                        : sup ? 'sup'\n                            : small ? 'small'\n                                : big ? 'big'\n                                    : 'code',\n                highlight(content));\n        });\n    }\n\n    function unesc(str) {\n        return str.replace(rx_escape, '$1');\n    }\n\n    var stash = [];\n    var si = 0;\n\n    src = '\\n' + src + '\\n';\n\n    replace(rx_lt, '&lt;');\n    replace(rx_gt, '&gt;');\n    replace(rx_space, '  ');\n\n    // blockquote\n    src = blockquote(src);\n\n    // horizontal rule\n    replace(rx_hr, '<hr/>');\n\n    // list\n    src = list(src);\n    replace(rx_listjoin, '');\n\n    // code\n    replace(rx_code, function (all, p1, p2, p3, p4) {\n        stash[--si] = element('pre', element('code', p3 || p4.replace(/^    /gm, '')));\n        return si + '\\uf8ff';\n    });\n\n    // link or image\n    replace(rx_link, function (all, p1, p2, p3, p4, p5, p6) {\n        stash[--si] = p4\n            ? p2\n                ? '<img src=\"' + p4 + '\" alt=\"' + p3 + '\"/>'\n                : '<a href=\"' + p4 + '\">' + unesc(highlight(p3)) + '</a>'\n            : p6;\n        return si + '\\uf8ff';\n    });\n\n    // table\n    replace(rx_table, function (all, table) {\n        var sep = table.match(rx_thead)[1];\n        return '\\n' + element('table',\n            table.replace(rx_row, function (row, ri) {\n                return row == sep ? '' : element('tr', row.replace(rx_cell, function (all, cell, ci) {\n                    return ci ? element(sep && !ri ? 'th' : 'td', unesc(highlight(cell || ''))) : ''\n                }))\n            })\n        )\n    });\n\n    // heading\n    replace(rx_heading, function (all, _, p1, p2) { return _ + element('h' + p1.length, unesc(highlight(p2))) });\n\n    // paragraph\n    replace(rx_para, function (all, content) { return element('p', unesc(highlight(content))) });\n\n    // stash\n    replace(rx_stash, function (all) { return stash[parseInt(all)] });\n\n    return src.trim();\n}\n\n\n\n\nvar fileid = \"flow\" + msg.filename.split(\"/flow\")[2].replace(\".json\", \"\").replace(/ /g,\"_\");\n\n\nfunction checkTab(nodeitem) {\n    return nodeitem.type == \"tab\";\n}\n\n\nvar ff = JSON.parse(msg.payload);\n\n\nvar info = ff.filter(checkTab)[0].info || \"\";\n\nif (info) { flow.set(\"flowinfo.\" + fileid,markdown(info)); }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 360,
        "wires": [
            [
                "caf57c6e7c8ebff8"
            ]
        ]
    },
    {
        "id": "7bc4773ca6357551",
        "type": "trigger",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 390,
        "y": 360,
        "wires": [
            [
                "c7095a20e528cc48"
            ]
        ]
    },
    {
        "id": "ca76704180c26cf6",
        "type": "ui_text_input",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "label": "Search",
        "tooltip": "",
        "group": "36b47e47.04f1c2",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": 300,
        "topic": "topic",
        "sendOnBlur": true,
        "className": "",
        "topicType": "msg",
        "x": 240,
        "y": 80,
        "wires": [
            [
                "ed9b0fe21821cd30"
            ]
        ]
    },
    {
        "id": "ed9b0fe21821cd30",
        "type": "change",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "searchfor",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 80,
        "wires": [
            [
                "2d072824c6553cb9"
            ]
        ]
    },
    {
        "id": "358963331e684e54",
        "type": "inject",
        "z": "d26c3be6.b5ef58",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 360,
        "wires": [
            [
                "7bc4773ca6357551"
            ]
        ]
    },
    {
        "id": "e3b7bcf37e26b9f2",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1270,
        "y": 1680,
        "wires": []
    },
    {
        "id": "176a799451bd1a04",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 1070,
        "y": 1680,
        "wires": [
            [
                "e3b7bcf37e26b9f2"
            ]
        ]
    },
    {
        "id": "d0d0cbd4e8c54410",
        "type": "file in",
        "z": "7b2fdb7c9fb3c336",
        "name": "flow_mysql_influxdb.json",
        "filename": "/home/pi/plumbing-controller/flows/flow_mysql_influxdb.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 550,
        "y": 1680,
        "wires": [
            [
                "32c9fbe6b2a71042"
            ]
        ]
    },
    {
        "id": "14706ee08a7281cc",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1130,
        "y": 2280,
        "wires": []
    },
    {
        "id": "965f6774a2f6bc4a",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "flow",
        "func": "\nmsg.payload = JSON.stringify({\n   \"id\": \"91ad452.0000111\",\n   \"label\": \"Public MQTT\",\n   \"nodes\": JSON.parse(msg.payload),\n   \"configs\": []\n});\n\n\n\n\nmsg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/flow\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\n\nif (global.get(\"noderedmqttpass\")) {\n\n   var cfrom = '\"broker\":\"localhost\"';\n   var cto = '\"broker\":\"localhost\", \"credentials\":{\"user\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\n   msg.payload = msg.payload.replace(cfrom, cto);\n\n\n}\n\nif (global.get(\"settings.flow\")==\"flows_ihiu_setup\") {\n    \n   var cfrom = '\"broker\":\"mqtt.heatweb.com\"';\n   var cto = '\"broker\":\"mqtt.heatweb.com\",\"credentials\":{\"user\":\"setup\",\"password\":\"setup\"}';\n   msg.payload = msg.payload.replace(cfrom, cto);\n\n} else {\n\n   var cfrom = '\"broker\":\"mqtt.heatweb.com\"';\n   var cto = '\"broker\":\"mqtt.heatweb.com\",\"credentials\":{\"user\":\"' + global.get(\"settings.node\") + '\",\"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n   msg.payload = msg.payload.replace(cfrom, cto);\n\n}\n\n\nvar cfrom = '\"broker\":\"192.168.0.3\"';\nvar cto = '\"broker\":\"192.168.0.3\",\"credentials\":{\"user\":\"' + global.get(\"settings.node\") + '\",\"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\nmsg.payload = msg.payload.replace(cfrom, cto);\n\nvar cfrom = '\"broker\":\"192.168.1.3\"';\nvar cto = '\"broker\":\"192.168.1.3\",\"credentials\":{\"user\":\"' + global.get(\"settings.node\") + '\",\"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\nmsg.payload = msg.payload.replace(cfrom, cto);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 2280,
        "wires": [
            [
                "533585d0507e1846"
            ]
        ]
    },
    {
        "id": "10c3f10f2034697f",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 950,
        "y": 2280,
        "wires": [
            [
                "14706ee08a7281cc"
            ]
        ]
    },
    {
        "id": "1c17f55858a0b059",
        "type": "file in",
        "z": "7b2fdb7c9fb3c336",
        "name": "nodes_public_mqtt.json",
        "filename": "/home/pi/plumbing-controller/flows/nodes_public_mqtt.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 430,
        "y": 2280,
        "wires": [
            [
                "965f6774a2f6bc4a"
            ]
        ]
    },
    {
        "id": "533585d0507e1846",
        "type": "change",
        "z": "7b2fdb7c9fb3c336",
        "name": "Credentials",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "\"type\": \"MySQLdatabase\"",
                "fromt": "str",
                "to": "\"type\": \"MySQLdatabase\", \"credentials\":{\"user\":\"root\", \"password\":\"zccamei4ies@\"}",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "\"type\": \"influxdb\"",
                "fromt": "str",
                "to": "\"type\": \"influxdb\", \"credentials\":{\"token\":\"oHyHPxoTEHQysurXl_4Kxbmj5EnpWtsg3RnSXoMnLeO01ICmIBUXIo3yXNEsLxMtPzTb9lwgzHDX5tL4ipOzjw==\"}",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 2280,
        "wires": [
            [
                "10c3f10f2034697f"
            ]
        ]
    },
    {
        "id": "e140c8274e4b5ebd",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1680,
        "wires": [
            [
                "d0d0cbd4e8c54410"
            ]
        ]
    },
    {
        "id": "767dd487c1453cf3",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 2280,
        "wires": [
            [
                "1c17f55858a0b059"
            ]
        ]
    },
    {
        "id": "23fc0244c98512b9",
        "type": "comment",
        "z": "7b2fdb7c9fb3c336",
        "name": "Deploy Complete Flows",
        "info": "",
        "x": 160,
        "y": 1320,
        "wires": []
    },
    {
        "id": "0f803df82ea3e268",
        "type": "comment",
        "z": "7b2fdb7c9fb3c336",
        "name": "Deploy Individual Parts",
        "info": "",
        "x": 160,
        "y": 2220,
        "wires": []
    },
    {
        "id": "f99552bd6f696c2f",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1470,
        "y": 1880,
        "wires": []
    },
    {
        "id": "b221904688d7c8fc",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "flow",
        "func": "\n\nvar credentials = global.get(\"credentials\") || {};\n\nmsg.headers = {};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/flow\";\n\n\n// {\n//    \"id\": \"e090c99b.574098\",\n//       \"type\": \"tab\",\n//          \"label\": \"HIU\",\n//             \"disabled\": false,\n//                \"info\": \"\"\n// },\n\n\nfunction checkTab(nodeitem) {\n   return nodeitem.type == \"tab\";\n}\n\nfunction filterTab(nodeitem) {\n   return nodeitem.type != \"tab\";\n}\n\nfunction filterMqttBroker(nodeitem) {\n   return nodeitem.type != \"mqtt-broker\";\n}\n\nvar ff = JSON.parse(msg.payload);\n\n\nvar tabf = ff.filter(checkTab)[0];\n\ntabf.nodes = ff.filter(filterTab).filter(filterMqttBroker);\n\n// msg.payload = JSON.stringify({\n//    \"id\": \"91ad452.0000112\",\n//    \"label\": \"HIU\",\n//    \"nodes\": JSON.parse(msg.payload),\n//    \"configs\": []\n// });\n\nmsg.payload = tabf;\nreturn msg;\n\n\n\n\n\n\nmsg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://localhost:\" + msg.port + \"/flow\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\n\nif (global.get(\"noderedmqttpass\")) {\n\n   var cfrom = '\"broker\":\"localhost\"';\n   var cto = '\"broker\":\"localhost\", \"credentials\":{\"user\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\n   msg.payload = msg.payload.replace(cfrom, cto);\n\n\n}\n\nif (global.get(\"settings.flow\")==\"flows_ihiu_setup\") {\n    \n   var cfrom = '\"broker\":\"mqtt.heatweb.com\"';\n   var cto = '\"broker\":\"mqtt.heatweb.com\",\"credentials\":{\"user\":\"setup\",\"password\":\"setup\"}';\n   msg.payload = msg.payload.replace(cfrom, cto);\n\n} else {\n\n   var cfrom = '\"broker\":\"mqtt.heatweb.com\"';\n   var cto = '\"broker\":\"mqtt.heatweb.com\",\"credentials\":{\"user\":\"' + global.get(\"settings.node\") + '\",\"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n   msg.payload = msg.payload.replace(cfrom, cto);\n\n}\n\n\nvar cfrom = '\"broker\":\"192.168.0.3\"';\nvar cto = '\"broker\":\"192.168.0.3\",\"credentials\":{\"user\":\"' + global.get(\"settings.node\") + '\",\"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\nmsg.payload = msg.payload.replace(cfrom, cto);\n\nvar cfrom = '\"broker\":\"192.168.1.3\"';\nvar cto = '\"broker\":\"192.168.1.3\",\"credentials\":{\"user\":\"' + global.get(\"settings.node\") + '\",\"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\nmsg.payload = msg.payload.replace(cfrom, cto);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1880,
        "wires": [
            [
                "d26f1e46f3f21fa1"
            ]
        ]
    },
    {
        "id": "89e22620f67be7a4",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1290,
        "y": 1880,
        "wires": [
            [
                "f99552bd6f696c2f",
                "0b642012c1953bc9",
                "8d2434ea4445563e"
            ]
        ]
    },
    {
        "id": "d26f1e46f3f21fa1",
        "type": "change",
        "z": "7b2fdb7c9fb3c336",
        "name": "Credentials",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "\"type\": \"MySQLdatabase\"",
                "fromt": "str",
                "to": "\"type\": \"MySQLdatabase\", \"credentials\":{\"user\":\"root\", \"password\":\"zccamei4ies@\"}",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "\"type\": \"influxdb\"",
                "fromt": "str",
                "to": "\"type\": \"influxdb\", \"credentials\":{\"token\":\"oHyHPxoTEHQysurXl_4Kxbmj5EnpWtsg3RnSXoMnLeO01ICmIBUXIo3yXNEsLxMtPzTb9lwgzHDX5tL4ipOzjw==\"}",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 1880,
        "wires": [
            [
                "89e22620f67be7a4"
            ]
        ]
    },
    {
        "id": "06c7d5a7fef386d1",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1880,
        "wires": [
            [
                "645788c03a8699d8"
            ]
        ]
    },
    {
        "id": "a85413b8d379f0e5",
        "type": "comment",
        "z": "7b2fdb7c9fb3c336",
        "name": "Deploy Individual Tab",
        "info": "",
        "x": 160,
        "y": 1820,
        "wires": []
    },
    {
        "id": "645788c03a8699d8",
        "type": "file in",
        "z": "7b2fdb7c9fb3c336",
        "name": "flow_public_mqtt.json",
        "filename": "/home/pi/plumbing-controller/flows/flow_public_mqtt.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 720,
        "y": 1880,
        "wires": [
            [
                "b221904688d7c8fc"
            ]
        ]
    },
    {
        "id": "a06aba1a407da363",
        "type": "file in",
        "z": "7b2fdb7c9fb3c336",
        "name": "flows_original.json",
        "filename": "/home/pi/plumbing-controller/flows/flows_original.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 570,
        "y": 1540,
        "wires": [
            [
                "32c9fbe6b2a71042"
            ]
        ]
    },
    {
        "id": "8b97855a89807a51",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1540,
        "wires": [
            [
                "a06aba1a407da363"
            ]
        ]
    },
    {
        "id": "cf592bc2076605a6",
        "type": "file in",
        "z": "7b2fdb7c9fb3c336",
        "name": "flows_setup_5002.json",
        "filename": "/home/pi/plumbing-controller/flows/flows_setup_5002.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 560,
        "y": 1760,
        "wires": [
            [
                "32c9fbe6b2a71042"
            ]
        ]
    },
    {
        "id": "90e4dc298ab5af9d",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1760,
        "wires": [
            [
                "cf592bc2076605a6"
            ]
        ]
    },
    {
        "id": "32c9fbe6b2a71042",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "flows",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\")  + \"/flows\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nvar credentials = global.get(\"credentials\")||{};\nvar config = global.get(\"config\") || {};\n\n//var ff = msg.payload;\nvar ff = JSON.parse(msg.payload);\n\nfor (var part in ff) {\n\n   if (ff[part].type == \"heatwebConfig\") { \n      \n      ff[part].name = config.name ; \n      ff[part].description = config.description;\n      ff[part].nodeId = config.nodeId;\n      ff[part].networkId = config.networkId; \n\n   }\n   \n\n   if (credentials.localMqttPassword) {\n\n      if (ff[part].type == \"mqtt-broker\" && (ff[part].broker == \"mqtt\" || ff[part].broker == \"localhost\")) { ff[part].credentials = { \"user\": \"admin\", \"password\": credentials.localMqttPassword }; }\n    \n   }\n\n   if (credentials.adminPassword) {\n\n      if (ff[part].type == \"MySQLdatabase\" && ff[part].host == \"mysql\") { ff[part].credentials = { \"user\": \"root\", \"password\": credentials.adminPassword }; }\n\n   }\n\n   if (credentials.localInfluxToken) {\n\n      if (ff[part].type == \"influxdb\" && ff[part].name == \"local\") { ff[part].credentials = { \"token\": credentials.localInfluxToken }; }\n\n   }\n   if (credentials.remoteInfluxToken) {\n\n      if (ff[part].type == \"influxdb\" && ff[part].name == \"heatweb\") { ff[part].credentials = { \"token\": credentials.remoteInfluxToken }; }\n\n   }\n\n   if (credentials.emailPassword && credentials.emailUser) {\n\n      if (ff[part].type == \"e-mail\") { ff[part].credentials = { \"userid\": credentials.emailUser, \"password\": credentials.emailPassword }; }\n\n   }\n\n   \n\n// //testing\n// var str1 = '\"type\": \"credentials\"'\nvar creds = [{ \"value\": \"xxx\", \"type\": \"str\" }, { \"value\": \"ddddd\", \"type\": \"str\" }, { \"value\": \"fffff\", \"type\": \"str\" }];\nvar creds2 = JSON.stringify(creds) ;\n// creds2 = creds2.substr(1);\n// creds2 = creds2.substr(0, creds2.length - 1);\n// msg.payload = msg.payload.replace(str1, creds2);\n// // not working !!!\n\n   if (ff[part].type == \"credentials\") { ff[part].credentials = creds2; }\n\n\n}\n\nmsg.payload = JSON.stringify(ff);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1680,
        "wires": [
            [
                "176a799451bd1a04"
            ]
        ]
    },
    {
        "id": "7bbd05597af223b0",
        "type": "file in",
        "z": "7b2fdb7c9fb3c336",
        "name": "flows_influx_json_api.json",
        "filename": "/home/pi/plumbing-controller/flows/flows_influx_json_api.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 550,
        "y": 1720,
        "wires": [
            [
                "32c9fbe6b2a71042"
            ]
        ]
    },
    {
        "id": "7f881095e06c085a",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1720,
        "wires": [
            [
                "7bbd05597af223b0"
            ]
        ]
    },
    {
        "id": "fb71f086a9303911",
        "type": "ui_button",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "group": "23eed81a7ee85c56",
        "order": 2,
        "width": "6",
        "height": "2",
        "passthru": false,
        "label": "Plumbing Controller",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Install Plumbing Controller",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 210,
        "y": 1380,
        "wires": [
            [
                "ab9a448ddcfb1d4f"
            ]
        ]
    },
    {
        "id": "ab9a448ddcfb1d4f",
        "type": "ui_toast",
        "z": "7b2fdb7c9fb3c336",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Continue",
        "cancel": "Cancel",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 450,
        "y": 1380,
        "wires": [
            [
                "6651e63fb67d34aa"
            ]
        ]
    },
    {
        "id": "6651e63fb67d34aa",
        "type": "switch",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Continue",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 1380,
        "wires": [
            [
                "da164e179ed2b0ce"
            ],
            []
        ]
    },
    {
        "id": "f577692b9357a7ef",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "func": "//var cmd = \"curl http://localhost:5002/auth/token --data 'client_id=node-red-admin&grant_type=password&scope=*&username=admin&password=Duu1cahe'\";\n\nmsg.payload={};\nmsg.payload['client_id']=\"node-red-admin\";\nmsg.payload['grant_type']=\"password\";\nmsg.payload['scope']=\"*\";\nmsg.payload['username']=\"admin\";\nmsg.payload['password']=\"admin\";\n\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/auth/token\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 280,
        "wires": [
            [
                "b81174c82640bd62"
            ]
        ]
    },
    {
        "id": "b81174c82640bd62",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 560,
        "y": 280,
        "wires": [
            [
                "860cf58e8448c295",
                "923be63513b069af"
            ]
        ]
    },
    {
        "id": "04d7b2859669c79c",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1280,
        "y": 280,
        "wires": []
    },
    {
        "id": "0f36a514d2352bf3",
        "type": "change",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "auth",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1080,
        "y": 280,
        "wires": [
            [
                "04d7b2859669c79c",
                "36833ea5dda46a5d"
            ]
        ]
    },
    {
        "id": "dab262188d0131f6",
        "type": "json",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "pretty": false,
        "x": 900,
        "y": 280,
        "wires": [
            [
                "0f36a514d2352bf3"
            ]
        ]
    },
    {
        "id": "860cf58e8448c295",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 220,
        "wires": []
    },
    {
        "id": "b21caca4c34108cc",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 400,
        "wires": []
    },
    {
        "id": "a7af7538eff8c473",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 740,
        "y": 400,
        "wires": [
            [
                "b21caca4c34108cc",
                "72a952a77b8623e5"
            ]
        ]
    },
    {
        "id": "05c415c4fa8a787e",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "targetport",
                "vt": "global"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 400,
        "wires": [
            [
                "36833ea5dda46a5d"
            ]
        ]
    },
    {
        "id": "a2a4c0839cfd2f0c",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 940,
        "y": 460,
        "wires": []
    },
    {
        "id": "72a952a77b8623e5",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-node-mysql ",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-node-mysql\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 460,
        "wires": [
            [
                "7c081a93eb4433e5"
            ]
        ]
    },
    {
        "id": "7c081a93eb4433e5",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 740,
        "y": 460,
        "wires": [
            [
                "a2a4c0839cfd2f0c",
                "62e176450d63003d"
            ]
        ]
    },
    {
        "id": "36833ea5dda46a5d",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-contrib-influxdb",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-influxdb\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 400,
        "wires": [
            [
                "a7af7538eff8c473"
            ]
        ]
    },
    {
        "id": "923be63513b069af",
        "type": "switch",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "access_token",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 740,
        "y": 280,
        "wires": [
            [
                "dab262188d0131f6"
            ],
            [
                "36833ea5dda46a5d"
            ]
        ]
    },
    {
        "id": "00d558de92d4f2d9",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 940,
        "y": 520,
        "wires": []
    },
    {
        "id": "62e176450d63003d",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-contrib-crypto-js",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-crypto-js\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 520,
        "wires": [
            [
                "80bf7bc59f92332a"
            ]
        ]
    },
    {
        "id": "80bf7bc59f92332a",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 740,
        "y": 520,
        "wires": [
            [
                "00d558de92d4f2d9",
                "94a2888a10ccbb66"
            ]
        ]
    },
    {
        "id": "107b54e0285396ab",
        "type": "comment",
        "z": "7b2fdb7c9fb3c336",
        "name": "Request for Authorisation where password is set",
        "info": "",
        "x": 250,
        "y": 180,
        "wires": []
    },
    {
        "id": "89332ed62c4dea9c",
        "type": "comment",
        "z": "7b2fdb7c9fb3c336",
        "name": "Install Nodes required for Flows",
        "info": "",
        "x": 200,
        "y": 340,
        "wires": []
    },
    {
        "id": "0b66b613d7024aa0",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "targetport",
                "vt": "global"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "f577692b9357a7ef"
            ]
        ]
    },
    {
        "id": "761cd91e72ca4fd4",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 940,
        "y": 580,
        "wires": []
    },
    {
        "id": "94a2888a10ccbb66",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-contrib-heatweb",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-heatweb\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 580,
        "wires": [
            [
                "b1e3d7e6e4942611"
            ]
        ]
    },
    {
        "id": "b1e3d7e6e4942611",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 740,
        "y": 580,
        "wires": [
            [
                "761cd91e72ca4fd4",
                "0e9162479a56550f"
            ]
        ]
    },
    {
        "id": "f3b0f0fba2991abb",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 940,
        "y": 640,
        "wires": []
    },
    {
        "id": "0e9162479a56550f",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-node-email",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-node-email\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 640,
        "wires": [
            [
                "85c02ecce6191ce6"
            ]
        ]
    },
    {
        "id": "85c02ecce6191ce6",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 740,
        "y": 640,
        "wires": [
            [
                "f3b0f0fba2991abb",
                "2fec15cb03c3bb2e"
            ]
        ]
    },
    {
        "id": "a2071d05e2433fbc",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 940,
        "y": 700,
        "wires": []
    },
    {
        "id": "2fec15cb03c3bb2e",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-contrib-credentials",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-credentials\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 700,
        "wires": [
            [
                "d0dc25e3cfd97dda"
            ]
        ]
    },
    {
        "id": "d0dc25e3cfd97dda",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 740,
        "y": 700,
        "wires": [
            [
                "a2071d05e2433fbc",
                "b157782a7f5d3c78"
            ]
        ]
    },
    {
        "id": "5647f10621a55987",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 940,
        "y": 760,
        "wires": []
    },
    {
        "id": "b157782a7f5d3c78",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-contrib-m-bus",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-m-bus\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 760,
        "wires": [
            [
                "5299fd1a6fca3005"
            ]
        ]
    },
    {
        "id": "5299fd1a6fca3005",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 740,
        "y": 760,
        "wires": [
            [
                "5647f10621a55987",
                "976b96c1d659c7ed"
            ]
        ]
    },
    {
        "id": "0564ec9aa1057ded",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 940,
        "y": 820,
        "wires": []
    },
    {
        "id": "976b96c1d659c7ed",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-node-ui-table",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-node-ui-table\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 820,
        "wires": [
            [
                "d790321d5055f524"
            ]
        ]
    },
    {
        "id": "d790321d5055f524",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 740,
        "y": 820,
        "wires": [
            [
                "0564ec9aa1057ded",
                "652a73845768e5b0"
            ]
        ]
    },
    {
        "id": "414a768b6f7b1ff5",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 940,
        "y": 880,
        "wires": []
    },
    {
        "id": "652a73845768e5b0",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-contrib-ui-heatmap",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-ui-heatmap\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 880,
        "wires": [
            [
                "1adbdc239bd24598"
            ]
        ]
    },
    {
        "id": "1adbdc239bd24598",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 740,
        "y": 880,
        "wires": [
            [
                "414a768b6f7b1ff5",
                "f6bc9ed249718e9d"
            ]
        ]
    },
    {
        "id": "82a2c35ff7adc44f",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 940,
        "y": 940,
        "wires": []
    },
    {
        "id": "f6bc9ed249718e9d",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-contrib-arp",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-arp\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 940,
        "wires": [
            [
                "1b5d359c77d59c1b"
            ]
        ]
    },
    {
        "id": "1b5d359c77d59c1b",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 740,
        "y": 940,
        "wires": [
            [
                "82a2c35ff7adc44f",
                "95e748b2f7a2de9e"
            ]
        ]
    },
    {
        "id": "8dbf405d73a48d0e",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 940,
        "y": 1000,
        "wires": []
    },
    {
        "id": "95e748b2f7a2de9e",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-node-daemon",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-node-daemon\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1000,
        "wires": [
            [
                "ade008d008de76d6"
            ]
        ]
    },
    {
        "id": "ade008d008de76d6",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 740,
        "y": 1000,
        "wires": [
            [
                "8dbf405d73a48d0e",
                "46c512b93b02edd7"
            ]
        ]
    },
    {
        "id": "71fff983c6fb1a37",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 940,
        "y": 1060,
        "wires": []
    },
    {
        "id": "46c512b93b02edd7",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-node-smooth",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-node-smooth\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1060,
        "wires": [
            [
                "f8d3fdf15eab1d8c"
            ]
        ]
    },
    {
        "id": "f8d3fdf15eab1d8c",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 740,
        "y": 1060,
        "wires": [
            [
                "71fff983c6fb1a37",
                "4f30a90ef1c308e1"
            ]
        ]
    },
    {
        "id": "2d9d902c739fe4ea",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 940,
        "y": 1120,
        "wires": []
    },
    {
        "id": "4f30a90ef1c308e1",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-contrib-ip",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-ip\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1120,
        "wires": [
            [
                "010e29b32b47f138",
                "a9a9417f8b63b435"
            ]
        ]
    },
    {
        "id": "010e29b32b47f138",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 740,
        "y": 1120,
        "wires": [
            [
                "2d9d902c739fe4ea"
            ]
        ]
    },
    {
        "id": "d8f5d36fb5552dc0",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 630,
        "y": 80,
        "wires": [
            [
                "5db60751793ec972"
            ]
        ]
    },
    {
        "id": "5db60751793ec972",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "host.docker.internal:1880",
        "func": "flow.set(\"targethost\",\"host.docker.internal\");\nflow.set(\"targetport\", \"1880\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 80,
        "wires": [
            [
                "f36dce9ceb2a72f9"
            ]
        ]
    },
    {
        "id": "3e7ccd639a8bc2eb",
        "type": "link in",
        "z": "7b2fdb7c9fb3c336",
        "name": "link in 1",
        "links": [
            "f36dce9ceb2a72f9"
        ],
        "x": 295,
        "y": 240,
        "wires": [
            [
                "f577692b9357a7ef"
            ]
        ]
    },
    {
        "id": "f36dce9ceb2a72f9",
        "type": "link out",
        "z": "7b2fdb7c9fb3c336",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "3e7ccd639a8bc2eb"
        ],
        "x": 1035,
        "y": 80,
        "wires": []
    },
    {
        "id": "3d0d451ef8900caf",
        "type": "file in",
        "z": "7b2fdb7c9fb3c336",
        "name": "flows_setup_1.json",
        "filename": "/home/pi/plumbing-controller/flows/flows_setup_1.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 570,
        "y": 1620,
        "wires": [
            [
                "32c9fbe6b2a71042"
            ]
        ]
    },
    {
        "id": "297e5c8951b57319",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1620,
        "wires": [
            [
                "3d0d451ef8900caf"
            ]
        ]
    },
    {
        "id": "5afe6270a3dc9e31",
        "type": "file in",
        "z": "7b2fdb7c9fb3c336",
        "name": "flows_standard_plumbing_controller_1880",
        "filename": "/home/pi/plumbing-controller/flows/flows_standard_plumbing_controller_1880.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 500,
        "y": 1480,
        "wires": [
            [
                "32c9fbe6b2a71042"
            ]
        ]
    },
    {
        "id": "3db01696e71d2168",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1480,
        "wires": [
            [
                "5afe6270a3dc9e31"
            ]
        ]
    },
    {
        "id": "e88caaa53fcaf4c6",
        "type": "file in",
        "z": "7b2fdb7c9fb3c336",
        "name": "flows_install_installer.json",
        "filename": "/home/pi/plumbing-controller/flows/flows_install_installer.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 550,
        "y": 1580,
        "wires": [
            [
                "32c9fbe6b2a71042"
            ]
        ]
    },
    {
        "id": "e566953760313feb",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1580,
        "wires": [
            [
                "e88caaa53fcaf4c6"
            ]
        ]
    },
    {
        "id": "7fddbf716a47caa3",
        "type": "mqtt in",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "topic": "#",
        "qos": "0",
        "datatype": "auto",
        "broker": "61c70212c61507f5",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1210,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b55a05b92ed2eea2",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 950,
        "y": 1180,
        "wires": []
    },
    {
        "id": "a9a9417f8b63b435",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-contrib-pid",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-pid\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1180,
        "wires": [
            [
                "2d77017cf83ab0e5",
                "5272449b39741252"
            ]
        ]
    },
    {
        "id": "2d77017cf83ab0e5",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 750,
        "y": 1180,
        "wires": [
            [
                "b55a05b92ed2eea2"
            ]
        ]
    },
    {
        "id": "1afd3057efd64a6e",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 950,
        "y": 1240,
        "wires": []
    },
    {
        "id": "5272449b39741252",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-node-ping",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-node-ping\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1240,
        "wires": [
            [
                "16957a90e206a36d",
                "f565de59feac159a"
            ]
        ]
    },
    {
        "id": "16957a90e206a36d",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 750,
        "y": 1240,
        "wires": [
            [
                "1afd3057efd64a6e"
            ]
        ]
    },
    {
        "id": "ee62ecc4e843d9ad",
        "type": "file in",
        "z": "7b2fdb7c9fb3c336",
        "name": "flow_sontay_modbus.json",
        "filename": "/home/pi/plumbing-controller/flows/flow_sontay_modbus.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 710,
        "y": 1940,
        "wires": [
            [
                "b221904688d7c8fc"
            ]
        ]
    },
    {
        "id": "c4a49d9c57d86a9f",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 1940,
        "wires": [
            [
                "ee62ecc4e843d9ad"
            ]
        ]
    },
    {
        "id": "30c3f2c51fd6fab3",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "d": true,
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "0c5d0549e78f6489"
            ]
        ]
    },
    {
        "id": "0c5d0549e78f6489",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "host.docker.internal:1880",
        "func": "flow.set(\"targethost\",\"host.docker.internal\");\nflow.set(\"targetport\", \"1880\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "3fa85d7b19a76c90",
        "type": "file in",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "filename": "/home/pi/plumbing-controller/flows/flow_beta_sontay_modbus.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 580,
        "y": 1980,
        "wires": [
            [
                "b221904688d7c8fc"
            ]
        ]
    },
    {
        "id": "cff5441ba2a0d6f3",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 1980,
        "wires": [
            [
                "3fa85d7b19a76c90"
            ]
        ]
    },
    {
        "id": "da164e179ed2b0ce",
        "type": "file in",
        "z": "7b2fdb7c9fb3c336",
        "name": "flows_beta_plumbing_controller_1880",
        "filename": "/home/pi/plumbing-controller/flows/flows_beta_plumbing_controller_1880.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 510,
        "y": 1440,
        "wires": [
            [
                "32c9fbe6b2a71042"
            ]
        ]
    },
    {
        "id": "c3a0879b515a7b0b",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1440,
        "wires": [
            [
                "da164e179ed2b0ce"
            ]
        ]
    },
    {
        "id": "86f8b246aa1f52a5",
        "type": "file in",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "filename": "/home/pi/plumbing-controller/flows/mods/flow_m_bus.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 610,
        "y": 2040,
        "wires": [
            [
                "b221904688d7c8fc"
            ]
        ]
    },
    {
        "id": "149a97749a287f0c",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 2040,
        "wires": [
            [
                "86f8b246aa1f52a5"
            ]
        ]
    },
    {
        "id": "df75842f86ae0323",
        "type": "file in",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "filename": "/home/pi/plumbing-controller/flows/mods/flow_bluetooth.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 600,
        "y": 2080,
        "wires": [
            [
                "b221904688d7c8fc"
            ]
        ]
    },
    {
        "id": "0dbeb19795c1e853",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 2080,
        "wires": [
            [
                "df75842f86ae0323"
            ]
        ]
    },
    {
        "id": "7510f392f22305fe",
        "type": "file in",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "filename": "/home/pi/plumbing-controller/flows/mods/flow_modem.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 610,
        "y": 2120,
        "wires": [
            [
                "b221904688d7c8fc"
            ]
        ]
    },
    {
        "id": "8fc221c511844bd0",
        "type": "inject",
        "z": "7b2fdb7c9fb3c336",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 2120,
        "wires": [
            [
                "7510f392f22305fe"
            ]
        ]
    },
    {
        "id": "0e2b815ea7ce504a",
        "type": "debug",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 950,
        "y": 1300,
        "wires": []
    },
    {
        "id": "f565de59feac159a",
        "type": "function",
        "z": "7b2fdb7c9fb3c336",
        "name": "node-red-contrib-fs",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + flow.get(\"targethost\") + \":\" + flow.get(\"targetport\") + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-fs\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1300,
        "wires": [
            [
                "a6937f93fd0e2f96"
            ]
        ]
    },
    {
        "id": "a6937f93fd0e2f96",
        "type": "http request",
        "z": "7b2fdb7c9fb3c336",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 750,
        "y": 1300,
        "wires": [
            [
                "0e2b815ea7ce504a"
            ]
        ]
    },
    {
        "id": "c2e30f26d233c6a0",
        "type": "link in",
        "z": "7b2fdb7c9fb3c336",
        "name": "link in 2",
        "links": [
            "76d8e235c0410b97"
        ],
        "x": 895,
        "y": 1820,
        "wires": [
            [
                "b221904688d7c8fc"
            ]
        ]
    },
    {
        "id": "0b642012c1953bc9",
        "type": "link out",
        "z": "7b2fdb7c9fb3c336",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "ef7f6e180ea4284c"
        ],
        "x": 1425,
        "y": 1940,
        "wires": []
    },
    {
        "id": "8d2434ea4445563e",
        "type": "ui_toast",
        "z": "7b2fdb7c9fb3c336",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1490,
        "y": 1820,
        "wires": []
    },
    {
        "id": "97d4f0dbe521c35a",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1270,
        "y": 1420,
        "wires": []
    },
    {
        "id": "09c4bf47696ba509",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 1090,
        "y": 1420,
        "wires": [
            [
                "97d4f0dbe521c35a"
            ]
        ]
    },
    {
        "id": "8796446282db9c4e",
        "type": "file in",
        "z": "ac900a3fdc09a7bf",
        "name": "flow_mysql_influxdb.json",
        "filename": "/home/pi/plumbing-controller/flows/flow_mysql_influxdb.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 410,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "288eaef20e642ecb",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1130,
        "y": 1800,
        "wires": []
    },
    {
        "id": "15de0fd6f58a78be",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "flow",
        "func": "\nmsg.payload = JSON.stringify({\n   \"id\": \"91ad452.0000111\",\n   \"label\": \"Public MQTT\",\n   \"nodes\": JSON.parse(msg.payload),\n   \"configs\": []\n});\n\n\n\n\nmsg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://localhost:\" + msg.port + \"/flow\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\n\nif (global.get(\"noderedmqttpass\")) {\n\n   var cfrom = '\"broker\":\"localhost\"';\n   var cto = '\"broker\":\"localhost\", \"credentials\":{\"user\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\n   msg.payload = msg.payload.replace(cfrom, cto);\n\n\n}\n\nif (global.get(\"settings.flow\")==\"flows_ihiu_setup\") {\n    \n   var cfrom = '\"broker\":\"mqtt.heatweb.com\"';\n   var cto = '\"broker\":\"mqtt.heatweb.com\",\"credentials\":{\"user\":\"setup\",\"password\":\"setup\"}';\n   msg.payload = msg.payload.replace(cfrom, cto);\n\n} else {\n\n   var cfrom = '\"broker\":\"mqtt.heatweb.com\"';\n   var cto = '\"broker\":\"mqtt.heatweb.com\",\"credentials\":{\"user\":\"' + global.get(\"settings.node\") + '\",\"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n   msg.payload = msg.payload.replace(cfrom, cto);\n\n}\n\n\nvar cfrom = '\"broker\":\"192.168.0.3\"';\nvar cto = '\"broker\":\"192.168.0.3\",\"credentials\":{\"user\":\"' + global.get(\"settings.node\") + '\",\"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\nmsg.payload = msg.payload.replace(cfrom, cto);\n\nvar cfrom = '\"broker\":\"192.168.1.3\"';\nvar cto = '\"broker\":\"192.168.1.3\",\"credentials\":{\"user\":\"' + global.get(\"settings.node\") + '\",\"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\nmsg.payload = msg.payload.replace(cfrom, cto);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1800,
        "wires": [
            [
                "032c14af78649f3b"
            ]
        ]
    },
    {
        "id": "b7bed141afd0d73b",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 950,
        "y": 1800,
        "wires": [
            [
                "288eaef20e642ecb"
            ]
        ]
    },
    {
        "id": "0fc04fa639364717",
        "type": "file in",
        "z": "ac900a3fdc09a7bf",
        "name": "nodes_public_mqtt.json",
        "filename": "/home/pi/plumbing-controller/flows/nodes_public_mqtt.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 430,
        "y": 1800,
        "wires": [
            [
                "15de0fd6f58a78be"
            ]
        ]
    },
    {
        "id": "032c14af78649f3b",
        "type": "change",
        "z": "ac900a3fdc09a7bf",
        "name": "Credentials",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "\"type\": \"MySQLdatabase\"",
                "fromt": "str",
                "to": "\"type\": \"MySQLdatabase\", \"credentials\":{\"user\":\"root\", \"password\":\"zccamei4ies@\"}",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "\"type\": \"influxdb\"",
                "fromt": "str",
                "to": "\"type\": \"influxdb\", \"credentials\":{\"token\":\"oHyHPxoTEHQysurXl_4Kxbmj5EnpWtsg3RnSXoMnLeO01ICmIBUXIo3yXNEsLxMtPzTb9lwgzHDX5tL4ipOzjw==\"}",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 1800,
        "wires": [
            [
                "b7bed141afd0d73b"
            ]
        ]
    },
    {
        "id": "67c009f0411c8299",
        "type": "inject",
        "z": "ac900a3fdc09a7bf",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1420,
        "wires": [
            [
                "8796446282db9c4e"
            ]
        ]
    },
    {
        "id": "85f6f1001955c4ee",
        "type": "inject",
        "z": "ac900a3fdc09a7bf",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1800,
        "wires": [
            [
                "0fc04fa639364717"
            ]
        ]
    },
    {
        "id": "775445f28c7e016c",
        "type": "comment",
        "z": "ac900a3fdc09a7bf",
        "name": "Deploy Complete Flows",
        "info": "",
        "x": 160,
        "y": 1300,
        "wires": []
    },
    {
        "id": "753c89bda373e552",
        "type": "comment",
        "z": "ac900a3fdc09a7bf",
        "name": "Deploy Individual Tab",
        "info": "",
        "x": 160,
        "y": 1740,
        "wires": []
    },
    {
        "id": "cd85c4a980403ed1",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1210,
        "y": 1600,
        "wires": []
    },
    {
        "id": "d0d5d4dda1d26f70",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "flow",
        "func": "\n\nmsg.headers = {};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://localhost:\" + msg.port + \"/flow\";\n\n\n// {\n//    \"id\": \"e090c99b.574098\",\n//       \"type\": \"tab\",\n//          \"label\": \"HIU\",\n//             \"disabled\": false,\n//                \"info\": \"\"\n// },\n\n\nfunction checkTab(nodeitem) {\n   return nodeitem.type == \"tab\";\n}\n\nfunction filterTab(nodeitem) {\n   return nodeitem.type != \"tab\";\n}\n\nmsg.payload = JSON.parse(msg.payload);\n\nvar tabf = msg.payload.filter(checkTab)[0];\n\ntabf.nodes = msg.payload.filter(filterTab);\n\n// msg.payload = JSON.stringify({\n//    \"id\": \"91ad452.0000112\",\n//    \"label\": \"HIU\",\n//    \"nodes\": JSON.parse(msg.payload),\n//    \"configs\": []\n// });\n\nmsg.payload = tabf;\nreturn msg;\n\n\n\n\n\n\nmsg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://localhost:\" + msg.port + \"/flow\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\n\nif (global.get(\"noderedmqttpass\")) {\n\n   var cfrom = '\"broker\":\"localhost\"';\n   var cto = '\"broker\":\"localhost\", \"credentials\":{\"user\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\n   msg.payload = msg.payload.replace(cfrom, cto);\n\n\n}\n\nif (global.get(\"settings.flow\")==\"flows_ihiu_setup\") {\n    \n   var cfrom = '\"broker\":\"mqtt.heatweb.com\"';\n   var cto = '\"broker\":\"mqtt.heatweb.com\",\"credentials\":{\"user\":\"setup\",\"password\":\"setup\"}';\n   msg.payload = msg.payload.replace(cfrom, cto);\n\n} else {\n\n   var cfrom = '\"broker\":\"mqtt.heatweb.com\"';\n   var cto = '\"broker\":\"mqtt.heatweb.com\",\"credentials\":{\"user\":\"' + global.get(\"settings.node\") + '\",\"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n   msg.payload = msg.payload.replace(cfrom, cto);\n\n}\n\n\nvar cfrom = '\"broker\":\"192.168.0.3\"';\nvar cto = '\"broker\":\"192.168.0.3\",\"credentials\":{\"user\":\"' + global.get(\"settings.node\") + '\",\"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\nmsg.payload = msg.payload.replace(cfrom, cto);\n\nvar cfrom = '\"broker\":\"192.168.1.3\"';\nvar cto = '\"broker\":\"192.168.1.3\",\"credentials\":{\"user\":\"' + global.get(\"settings.node\") + '\",\"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\nmsg.payload = msg.payload.replace(cfrom, cto);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1600,
        "wires": [
            [
                "cf586d4bd7f24034",
                "aca36bf3864cc267"
            ]
        ]
    },
    {
        "id": "be86f14993865fe2",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1030,
        "y": 1600,
        "wires": [
            [
                "cd85c4a980403ed1"
            ]
        ]
    },
    {
        "id": "aca36bf3864cc267",
        "type": "change",
        "z": "ac900a3fdc09a7bf",
        "name": "Credentials",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "\"type\": \"MySQLdatabase\"",
                "fromt": "str",
                "to": "\"type\": \"MySQLdatabase\", \"credentials\":{\"user\":\"root\", \"password\":\"zccamei4ies@\"}",
                "tot": "str"
            },
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "\"type\": \"influxdb\"",
                "fromt": "str",
                "to": "\"type\": \"influxdb\", \"credentials\":{\"token\":\"oHyHPxoTEHQysurXl_4Kxbmj5EnpWtsg3RnSXoMnLeO01ICmIBUXIo3yXNEsLxMtPzTb9lwgzHDX5tL4ipOzjw==\"}",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 1600,
        "wires": [
            [
                "be86f14993865fe2"
            ]
        ]
    },
    {
        "id": "429afe0f293b591a",
        "type": "inject",
        "z": "ac900a3fdc09a7bf",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1600,
        "wires": [
            [
                "fd0ab91fb5e3b28c"
            ]
        ]
    },
    {
        "id": "53e684ac2805fd16",
        "type": "comment",
        "z": "ac900a3fdc09a7bf",
        "name": "Deploy Individual Tab",
        "info": "",
        "x": 160,
        "y": 1540,
        "wires": []
    },
    {
        "id": "cf586d4bd7f24034",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1660,
        "wires": []
    },
    {
        "id": "fd0ab91fb5e3b28c",
        "type": "file in",
        "z": "ac900a3fdc09a7bf",
        "name": "flow_public_mqtt.json",
        "filename": "/home/pi/plumbing-controller/flows/flow_public_mqtt.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 420,
        "y": 1600,
        "wires": [
            [
                "d0d5d4dda1d26f70"
            ]
        ]
    },
    {
        "id": "b25ce75334084ab2",
        "type": "file in",
        "z": "ac900a3fdc09a7bf",
        "name": "flow_hiu.json",
        "filename": "/home/pi/plumbing-controller/flows/flow_hiu.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 410,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "bfe7b40b9bc0ae5d",
        "type": "file in",
        "z": "ac900a3fdc09a7bf",
        "name": "flows_original.json",
        "filename": "/home/pi/plumbing-controller/flows/flows_original.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 430,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "3f0777a813e5c8b4",
        "type": "inject",
        "z": "ac900a3fdc09a7bf",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1360,
        "wires": [
            [
                "bfe7b40b9bc0ae5d"
            ]
        ]
    },
    {
        "id": "461cb2d1bf2ad801",
        "type": "file in",
        "z": "ac900a3fdc09a7bf",
        "name": "flows_setup_5002.json",
        "filename": "/home/pi/plumbing-controller/flows/flows_setup_5002.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 420,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "0f215c25b8170f4f",
        "type": "inject",
        "z": "ac900a3fdc09a7bf",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1500,
        "wires": [
            [
                "461cb2d1bf2ad801"
            ]
        ]
    },
    {
        "id": "42bb74a741bba713",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "flows",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url=\"http://localhost:\" + msg.port + \"/flows\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\n\n\n//var ff = msg.payload;\nvar ff = JSON.parse(msg.payload);\n\nfor (var part in ff) {\n\n\n   if (msg.mqttpass) {\n\n      if (ff[part].type == \"mqtt-broker\" && ff[part].broker == \"mqtt\") { ff[part].credentials = { \"user\": \"admin\", \"password\": msg.mqttpass }; }\n    \n   }\n\n   if (msg.mysqlpass) {\n\n      if (ff[part].type == \"MySQLdatabase\" && ff[part].host == \"mysql\") { ff[part].credentials = { \"user\": \"root\", \"password\": msg.mysqlpass }; }\n\n   }\n\n   if (msg.influxdblocalpass) {\n\n      if (ff[part].type == \"influxdb\" && ff[part].name == \"local\") { ff[part].credentials = { \"token\": msg.influxdblocalpass }; }\n\n   }\n   if (msg.influxdbpass) {\n\n      if (ff[part].type == \"influxdb\" && ff[part].name == \"heatweb\") { ff[part].credentials = { \"token\": msg.influxdbpass }; }\n\n   }\n\n   if (msg.emailpass && msg.emailuser) {\n\n      if (ff[part].type == \"e-mail\") { ff[part].credentials = { \"userid\": msg.emailuser, \"password\": msg.emailpass }; }\n\n   }\n\n   \n\n// //testing\n// var str1 = '\"type\": \"credentials\"'\nvar creds = [{ \"value\": \"xxx\", \"type\": \"str\" }, { \"value\": \"ddddd\", \"type\": \"str\" }, { \"value\": \"fffff\", \"type\": \"str\" }];\nvar creds2 = JSON.stringify(creds) ;\n// creds2 = creds2.substr(1);\n// creds2 = creds2.substr(0, creds2.length - 1);\n// msg.payload = msg.payload.replace(str1, creds2);\n// // not working !!!\n\n   if (ff[part].type == \"credentials\") { ff[part].credentials = creds2; }\n\n\n}\n\nmsg.payload = JSON.stringify(ff);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1420,
        "wires": [
            [
                "09c4bf47696ba509"
            ]
        ]
    },
    {
        "id": "870dfc79f790ad51",
        "type": "file in",
        "z": "ac900a3fdc09a7bf",
        "name": "flows_influx_json_api.json",
        "filename": "/home/pi/plumbing-controller/flows/flows_influx_json_api.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "allProps": false,
        "x": 410,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "c85bbbf80de242fb",
        "type": "inject",
        "z": "ac900a3fdc09a7bf",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "5002",
                "vt": "num"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 1460,
        "wires": [
            [
                "870dfc79f790ad51"
            ]
        ]
    },
    {
        "id": "6503c07adda7fcdc",
        "type": "ui_button",
        "z": "ac900a3fdc09a7bf",
        "d": true,
        "name": "",
        "group": "23eed81a7ee85c56",
        "order": 2,
        "width": "2",
        "height": "2",
        "passthru": false,
        "label": "Install",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "Shutdown now",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "047f363a6d3c774d"
            ]
        ]
    },
    {
        "id": "047f363a6d3c774d",
        "type": "ui_toast",
        "z": "ac900a3fdc09a7bf",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "Continue",
        "cancel": "Cancel",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 330,
        "y": 120,
        "wires": [
            [
                "54affb768a61ac89"
            ]
        ]
    },
    {
        "id": "54affb768a61ac89",
        "type": "switch",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Continue",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 120,
        "wires": [
            [
                "800381e20b825b80"
            ],
            []
        ]
    },
    {
        "id": "4a0aac0be317696c",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "func": "//var cmd = \"curl http://localhost:5002/auth/token --data 'client_id=node-red-admin&grant_type=password&scope=*&username=admin&password=Duu1cahe'\";\n\nmsg.payload={};\nmsg.payload['client_id']=\"node-red-admin\";\nmsg.payload['grant_type']=\"password\";\nmsg.payload['scope']=\"*\";\nmsg.payload['username']=\"admin\";\nmsg.payload['password']=\"admin\";\n\n\nmsg.url = \"http://\" + global.get(\"localhost\") + \":\" + msg.port + \"/auth/token\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 340,
        "wires": [
            [
                "9c801a77b9e4a9cc"
            ]
        ]
    },
    {
        "id": "9c801a77b9e4a9cc",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 580,
        "y": 340,
        "wires": [
            [
                "55433855560208bd",
                "f9688af46a44345f"
            ]
        ]
    },
    {
        "id": "ff25a01770cf7476",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1300,
        "y": 340,
        "wires": []
    },
    {
        "id": "ea6ce91adca2108e",
        "type": "change",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "auth",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 340,
        "wires": [
            [
                "ff25a01770cf7476"
            ]
        ]
    },
    {
        "id": "8e5c58a72922043a",
        "type": "json",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "pretty": false,
        "x": 920,
        "y": 340,
        "wires": [
            [
                "ea6ce91adca2108e"
            ]
        ]
    },
    {
        "id": "55433855560208bd",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 280,
        "wires": []
    },
    {
        "id": "2a62155797e36ab5",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 460,
        "wires": []
    },
    {
        "id": "fa9122113ff1052b",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 760,
        "y": 460,
        "wires": [
            [
                "2a62155797e36ab5",
                "0b78b4156d2aec37"
            ]
        ]
    },
    {
        "id": "38481ca65c88513a",
        "type": "inject",
        "z": "ac900a3fdc09a7bf",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "targetport",
                "vt": "global"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 460,
        "wires": [
            [
                "8c6aa974bf85becd"
            ]
        ]
    },
    {
        "id": "7cf0581385e7a969",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 960,
        "y": 520,
        "wires": []
    },
    {
        "id": "0b78b4156d2aec37",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "node-red-node-mysql ",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + global.get(\"localhost\") + \":\" + msg.port + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-node-mysql\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 520,
        "wires": [
            [
                "c3eca6a7049f1cd3"
            ]
        ]
    },
    {
        "id": "c3eca6a7049f1cd3",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 760,
        "y": 520,
        "wires": [
            [
                "7cf0581385e7a969",
                "d53aef22c1ed2f74"
            ]
        ]
    },
    {
        "id": "8c6aa974bf85becd",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "node-red-contrib-influxdb",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + global.get(\"localhost\") + \":\" + msg.port + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-influxdb\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 460,
        "wires": [
            [
                "fa9122113ff1052b"
            ]
        ]
    },
    {
        "id": "f9688af46a44345f",
        "type": "switch",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "access_token",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 760,
        "y": 340,
        "wires": [
            [
                "8e5c58a72922043a"
            ]
        ]
    },
    {
        "id": "77fe588545c27dc1",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 960,
        "y": 580,
        "wires": []
    },
    {
        "id": "d53aef22c1ed2f74",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "node-red-contrib-crypto-js",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + global.get(\"localhost\") + \":\" + msg.port + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-crypto-js\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 580,
        "wires": [
            [
                "c808571140d2ed62"
            ]
        ]
    },
    {
        "id": "c808571140d2ed62",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 760,
        "y": 580,
        "wires": [
            [
                "77fe588545c27dc1",
                "ea6b27dfd134f0e5"
            ]
        ]
    },
    {
        "id": "168cb87c150a3689",
        "type": "comment",
        "z": "ac900a3fdc09a7bf",
        "name": "Request for Authorisation where password is set",
        "info": "",
        "x": 270,
        "y": 240,
        "wires": []
    },
    {
        "id": "8c9c49675ce7c1ee",
        "type": "comment",
        "z": "ac900a3fdc09a7bf",
        "name": "Install Nodes required for Flows",
        "info": "",
        "x": 220,
        "y": 400,
        "wires": []
    },
    {
        "id": "e89e52ee88cf4399",
        "type": "inject",
        "z": "ac900a3fdc09a7bf",
        "name": "5002",
        "props": [
            {
                "p": "port",
                "v": "targetport",
                "vt": "global"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 240,
        "y": 340,
        "wires": [
            [
                "4a0aac0be317696c"
            ]
        ]
    },
    {
        "id": "0c2fe6ee5665607c",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 960,
        "y": 640,
        "wires": []
    },
    {
        "id": "ea6b27dfd134f0e5",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "node-red-contrib-heatweb",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + global.get(\"localhost\") + \":\" + msg.port + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-heatweb\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 640,
        "wires": [
            [
                "0ece526815605643"
            ]
        ]
    },
    {
        "id": "0ece526815605643",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 760,
        "y": 640,
        "wires": [
            [
                "0c2fe6ee5665607c",
                "3e68b4104d5e2743"
            ]
        ]
    },
    {
        "id": "dbec858e52bd2423",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 960,
        "y": 700,
        "wires": []
    },
    {
        "id": "3e68b4104d5e2743",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "node-red-node-email",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + global.get(\"localhost\") + \":\" + msg.port + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-node-email\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 700,
        "wires": [
            [
                "f84ebac9fe9e5a68"
            ]
        ]
    },
    {
        "id": "f84ebac9fe9e5a68",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 760,
        "y": 700,
        "wires": [
            [
                "dbec858e52bd2423",
                "cc8dff33020360bd"
            ]
        ]
    },
    {
        "id": "508fdc3fdc3e6bd1",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 960,
        "y": 760,
        "wires": []
    },
    {
        "id": "cc8dff33020360bd",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "node-red-contrib-credentials",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + global.get(\"localhost\") + \":\" + msg.port + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-credentials\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 760,
        "wires": [
            [
                "ec37932b8d6da507"
            ]
        ]
    },
    {
        "id": "ec37932b8d6da507",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 760,
        "y": 760,
        "wires": [
            [
                "508fdc3fdc3e6bd1",
                "8ac71ddf0b267ba8"
            ]
        ]
    },
    {
        "id": "6b1b652ca71d5aaa",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 960,
        "y": 820,
        "wires": []
    },
    {
        "id": "8ac71ddf0b267ba8",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "node-red-contrib-m-bus",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + global.get(\"localhost\") + \":\" + msg.port + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-m-bus\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 820,
        "wires": [
            [
                "4275eb192e660de0"
            ]
        ]
    },
    {
        "id": "4275eb192e660de0",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 760,
        "y": 820,
        "wires": [
            [
                "6b1b652ca71d5aaa",
                "a8229ab08373c28f"
            ]
        ]
    },
    {
        "id": "b482c1cc7dd08193",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 960,
        "y": 880,
        "wires": []
    },
    {
        "id": "a8229ab08373c28f",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "node-red-node-ui-table",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + global.get(\"localhost\") + \":\" + msg.port + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-node-ui-table\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 880,
        "wires": [
            [
                "66c4c2aa0c8ef2c8"
            ]
        ]
    },
    {
        "id": "66c4c2aa0c8ef2c8",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 760,
        "y": 880,
        "wires": [
            [
                "b482c1cc7dd08193",
                "1bc60c1a37c317d0"
            ]
        ]
    },
    {
        "id": "b7509b86aec9b572",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 960,
        "y": 940,
        "wires": []
    },
    {
        "id": "1bc60c1a37c317d0",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "node-red-contrib-ui-heatmap",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + global.get(\"localhost\") + \":\" + msg.port + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-ui-heatmap\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 940,
        "wires": [
            [
                "d64be858c6cb3d7f"
            ]
        ]
    },
    {
        "id": "d64be858c6cb3d7f",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 760,
        "y": 940,
        "wires": [
            [
                "b7509b86aec9b572",
                "8068c53645263ba4"
            ]
        ]
    },
    {
        "id": "a23de75463ee5605",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 960,
        "y": 1000,
        "wires": []
    },
    {
        "id": "8068c53645263ba4",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "node-red-contrib-arp",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + global.get(\"localhost\") + \":\" + msg.port + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-arp\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1000,
        "wires": [
            [
                "76b05bb184f1ce6d"
            ]
        ]
    },
    {
        "id": "76b05bb184f1ce6d",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 760,
        "y": 1000,
        "wires": [
            [
                "a23de75463ee5605",
                "87aa0ea323c5d023"
            ]
        ]
    },
    {
        "id": "42e94c7aad69b79b",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 960,
        "y": 1060,
        "wires": []
    },
    {
        "id": "87aa0ea323c5d023",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "node-red-node-daemon",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + global.get(\"localhost\") + \":\" + msg.port + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-node-daemon\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1060,
        "wires": [
            [
                "4cb1ce54bdd11c40"
            ]
        ]
    },
    {
        "id": "4cb1ce54bdd11c40",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 760,
        "y": 1060,
        "wires": [
            [
                "42e94c7aad69b79b",
                "aad98372c4d52c88"
            ]
        ]
    },
    {
        "id": "0a386175a7937d9e",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 960,
        "y": 1120,
        "wires": []
    },
    {
        "id": "aad98372c4d52c88",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "node-red-node-smooth",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + global.get(\"localhost\") + \":\" + msg.port + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-node-smooth\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1120,
        "wires": [
            [
                "d7f40a2ecf58727c"
            ]
        ]
    },
    {
        "id": "d7f40a2ecf58727c",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 760,
        "y": 1120,
        "wires": [
            [
                "0a386175a7937d9e",
                "b5d9f17d3ba2a8b1"
            ]
        ]
    },
    {
        "id": "a560f8df7b3179b3",
        "type": "debug",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 960,
        "y": 1180,
        "wires": []
    },
    {
        "id": "b5d9f17d3ba2a8b1",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "node-red-contrib-ip",
        "func": "msg.headers={};\n\nmsg.headers.Authorization = \"Bearer \" + flow.get(\"auth.access_token\");\nmsg.headers['Content-type'] = \"application/json\";\nmsg.headers['Node-RED-Deployment-Type'] = \"full\";\n\nmsg.url = \"http://\" + global.get(\"localhost\") + \":\" + msg.port + \"/nodes\";\n\n//var cfrom = '\"broker\":\"localhost\"';\n//var cto = '\"broker\":\"localhost\", \"credentials\":{\"username\":\"nodereduser\", \"password\":\"' + global.get(\"noderedmqttpass\") + '\"}';\n\nmsg.payload = { \"module\": \"node-red-contrib-ip\" };\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1180,
        "wires": [
            [
                "6deed4a83544adaa"
            ]
        ]
    },
    {
        "id": "6deed4a83544adaa",
        "type": "http request",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "url": "",
        "tls": "",
        "x": 760,
        "y": 1180,
        "wires": [
            [
                "a560f8df7b3179b3"
            ]
        ]
    },
    {
        "id": "d3d1faad6eb9aa5e",
        "type": "inject",
        "z": "ac900a3fdc09a7bf",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 490,
        "y": 180,
        "wires": [
            [
                "800381e20b825b80"
            ]
        ]
    },
    {
        "id": "800381e20b825b80",
        "type": "function",
        "z": "ac900a3fdc09a7bf",
        "name": "Initialise host.docker.internal:5002",
        "func": "global.set(\"localhost\",\"host.docker.internal\");\nglobal.set(\"targetport\", \"5002\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 120,
        "wires": [
            [
                "cb35b536d99161dd"
            ]
        ]
    },
    {
        "id": "516afe7a9d9c6897",
        "type": "link in",
        "z": "ac900a3fdc09a7bf",
        "name": "link in 1",
        "links": [
            "cb35b536d99161dd"
        ],
        "x": 1135,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "cb35b536d99161dd",
        "type": "link out",
        "z": "ac900a3fdc09a7bf",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "516afe7a9d9c6897"
        ],
        "x": 1025,
        "y": 120,
        "wires": []
    },
    {
        "id": "1b54f92a3bf37049",
        "type": "exec",
        "z": "ac900a3fdc09a7bf",
        "command": "sudo docker run -d -it -p 5002:1880 -p 8002:8000 --net mqtt --restart=always -v node_red_data_2:/data -v /boot/heatweb/:/boot/heatweb/ -v /home/pi/plumbing-controller/:/home/pi/plumbing-controller/ --add-host=host.docker.internal:host-gateway --privileged --device /dev/ttyAMA1 --device /dev/ttyAMA2 --device /dev/ttyAMA3 --device /dev/ttyAMA4 --name mynodered2 heatweb/plumbing-controller:latest",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1850,
        "y": 40,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "92a11851fbdbc43f",
        "type": "inject",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 40,
        "wires": [
            [
                "df9db160fa189b93"
            ]
        ]
    },
    {
        "id": "df9db160fa189b93",
        "type": "exec",
        "z": "ac900a3fdc09a7bf",
        "command": "sudo docker rm --force mynodered2",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 420,
        "y": 40,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "064b48217e68226b",
        "type": "inject",
        "z": "ac900a3fdc09a7bf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 740,
        "y": 40,
        "wires": [
            [
                "1b54f92a3bf37049"
            ]
        ]
    },
    {
        "id": "f26df972.5d3ae8",
        "type": "ui_template",
        "z": "594506cc.51e408",
        "group": "1ebe6305.3aa6ad",
        "name": "SVG based template",
        "order": 0,
        "width": "6",
        "height": "6",
        "format": "<style>\n\n    #tex1 {\n        font-size: 8;\n        fill: lightgreen;\n    }\n    \n</style>\n\n\n<svg height=\"300\" width=\"350\" >\n\n<text id=\"tex1\" x=\"10\" y=\"30\" > {{msg.payload[0]}} </text>\n<text id=\"tex1\" x=\"10\" y=\"50\" > {{msg.payload[1]}} </text>\n<text id=\"tex1\" x=\"10\" y=\"70\" > {{msg.payload[2]}} </text>\n<text id=\"tex1\" x=\"10\" y=\"90\" > {{msg.payload[3]}} </text>\n<text id=\"tex1\" x=\"10\" y=\"110\" > {{msg.payload[4]}} </text>\n<text id=\"tex1\" x=\"10\" y=\"130\" > {{msg.payload[5]}} </text>\n<text id=\"tex1\" x=\"10\" y=\"150\" > {{msg.payload[6]}} </text>\n<text id=\"tex1\" x=\"10\" y=\"170\" > {{msg.payload[7]}} </text>\n<text id=\"tex1\" x=\"10\" y=\"190\" > {{msg.payload[8]}} </text>\n<text id=\"tex1\" x=\"10\" y=\"210\" > {{msg.payload[9]}} </text>\n</svg>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 760,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "3438664c.1d39ba",
        "type": "function",
        "z": "594506cc.51e408",
        "name": "Create table in context",
        "func": "let sctab = [];\nflow.set(\"sctab\", sctab);\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 400,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "6b543271.7a47fc",
        "type": "inject",
        "z": "594506cc.51e408",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "Start",
        "payloadType": "str",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "3438664c.1d39ba"
            ]
        ]
    },
    {
        "id": "67195cf7.a5ea24",
        "type": "function",
        "z": "594506cc.51e408",
        "name": "Add word to scrolling table",
        "func": "let pay = msg.payload;\n\n// Read scrolling table from context\nlet sctab = flow.get(\"sctab\");\n\n// Modify scrolling table by adding msg.payload as first element\nlet size = sctab.unshift(pay);\n\n// Remove last element from scrolling table\nif (size >9) sctab.pop();\n\n// Update context for scrolling text\nflow.set(\"sctab\",sctab);\n\n// Shalow copy updated scrolling table to msg.payload\nmsg.payload = [...sctab];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 380,
        "wires": [
            [
                "f26df972.5d3ae8"
            ]
        ]
    },
    {
        "id": "e4b42f5e.2458c",
        "type": "inject",
        "z": "594506cc.51e408",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10:33:56 - Flow updates on 1880",
        "payloadType": "str",
        "x": 250,
        "y": 340,
        "wires": [
            [
                "67195cf7.a5ea24"
            ]
        ]
    },
    {
        "id": "d5d60837.4cadd8",
        "type": "inject",
        "z": "594506cc.51e408",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Bravo",
        "payloadType": "str",
        "x": 250,
        "y": 380,
        "wires": [
            [
                "67195cf7.a5ea24"
            ]
        ]
    },
    {
        "id": "79f8982e.19f1d8",
        "type": "inject",
        "z": "594506cc.51e408",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Charlie",
        "payloadType": "str",
        "x": 250,
        "y": 420,
        "wires": [
            [
                "67195cf7.a5ea24"
            ]
        ]
    },
    {
        "id": "68b03084.d691",
        "type": "inject",
        "z": "594506cc.51e408",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Delta",
        "payloadType": "str",
        "x": 250,
        "y": 460,
        "wires": [
            [
                "67195cf7.a5ea24"
            ]
        ]
    },
    {
        "id": "ef7f6e180ea4284c",
        "type": "link in",
        "z": "594506cc.51e408",
        "name": "link in 3",
        "links": [
            "0b642012c1953bc9"
        ],
        "x": 305,
        "y": 280,
        "wires": [
            [
                "67195cf7.a5ea24"
            ]
        ]
    }
]