[
    {
        "id": "b2d492ed.c4def",
        "type": "subflow",
        "name": "rbe 3min",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 160,
                "wires": [
                    {
                        "id": "ee023f13.5958c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 460,
                "y": 160,
                "wires": [
                    {
                        "id": "61b66a77.aec334",
                        "port": 0
                    }
                ]
            }
        ],
        "env": []
    },
    {
        "id": "61b66a77.aec334",
        "type": "switch",
        "z": "b2d492ed.c4def",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "23f9ad60.8b4b82",
        "type": "change",
        "z": "b2d492ed.c4def",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 120,
        "wires": [
            [
                "ee023f13.5958c"
            ]
        ]
    },
    {
        "id": "44580c0c.eb7c04",
        "type": "inject",
        "z": "b2d492ed.c4def",
        "name": "",
        "repeat": "180",
        "crontab": "",
        "once": false,
        "onceDelay": "60",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 80,
        "wires": [
            [
                "23f9ad60.8b4b82"
            ]
        ]
    },
    {
        "id": "ee023f13.5958c",
        "type": "rbe",
        "z": "b2d492ed.c4def",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 200,
        "y": 160,
        "wires": [
            [
                "61b66a77.aec334"
            ]
        ]
    },
    {
        "id": "647bea769565bae6",
        "type": "tab",
        "label": "Modutherm Modbus",
        "disabled": false,
        "info": "https://www.binaryconvert.com/convert_signed_int.html?hexadecimal=000019FD"
    },
    {
        "id": "63e1d6a192f21d6a",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "",
        "func": "//if(Buffer.from(msg.payload, 'ascii')[1]!==3) { return null; }\n\nif (msg.payload[1]==6) { return null; }\nif (msg.payload[1] == 16) { return null; }\nif (msg.payload[1] != 3) { return null; }\n\nfunction hex2bin(hex){\n    return (\"00000000\" + (parseInt(hex)).toString(2)).substr(-8);\n}\n\nfunction dec2bin(dec){\n  return (dec >>> 0).toString(2);\n}\n\nfunction Int2Float32(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n\n    if (exponent == 128)\n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n\n    if (exponent == -127) {\n        if (significand === 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n\n    return sign * significand * Math.pow(2, exponent);\n}\n\nvar msg2 = { \"payload\": Buffer.from(msg.payload, 'ascii') };\n\nmsg.address = msg.payload[0];\n//msg.register = (256 * msg.payload[2]) + msg.payload[3];\nmsg.register = flow.get(\"curreg\");\n\n\nvar minfo = flow.get(\"registers.r\" + msg.register) || null;\nvar dinfo = flow.get(\"devices.\" + msg.address) || null;\n\nif (!minfo) { return null; }\nif (!dinfo) { return null; }  \n\nflow.set(\"modbusIn\",\"xxx\");\n\n\nif (minfo.datatype==\"bits\") {\n    \n    var oot = {};\n    var bits = minfo.items.split(\",\");\n    var bc=15;\n    for (var bit in bits) {\n    \n        var item = {};\n        item.payload = (256 * msg.payload[3]) + msg.payload[4];        \n        item.payload =   (\"00000000000000000\" + dec2bin(item.payload)).substr(-16);\n        item.payload =  item.payload.substr(bc,1);\n        \n        item.topic = dinfo.device + \"/\" + bits[bit].replace(\".\",\"/\");\n        \n        if (minfo[\"units\"]) { item.units = minfo[\"units\"]; }\n        item.title = (bits[bit].split(\".\")[1]?  bits[bit].split(\".\")[1]:bits[bit]) + \" [Modbus \" + msg.register + \", bit \" + bit + \"]\"; \n\n        if (minfo[\"title\"]) { item.title = minfo[\"title\"] + \", \" + item.title; }\n\n        if (minfo[\"values\"]) {\n            \n            if (minfo[\"values\"][15-bc]) {\n                if (minfo[\"values\"][15-bc][\"\" + item.payload]) { item.payload = minfo[\"values\"][15-bc][\"\" + item.payload]; }\n            }\n        }\n\n\n        \n        oot[item.topic] = item;\n        \n        bc=bc-1;\n\n    }\n    msg.payload = oot;\n    \n    return [null,msg];\n    \n    \n} \n\nelse if (minfo.datatype == \"UInt32LE\") {\n\n    msg.payload = String.fromCharCode(msg.payload[3]) + String.fromCharCode(msg.payload[4]) + String.fromCharCode(msg.payload[5]) + String.fromCharCode(msg.payload[6]);\n    msg.payload = Buffer.from(msg.payload, 'ascii');\n\n\n\n    msg.payload = msg.payload.readUInt32LE(0);\n    if (minfo[\"multiplier\"]>1) { msg.payload = msg.payload / minfo[\"multiplier\"]; }\n\n    msg.topic = dinfo.device + \"/\" + minfo[\"reading\"].replace(\".\", \"/\");\n\n\n\n    if (minfo[\"units\"]) { msg.units = minfo[\"units\"]; }\n    //if (minfo[\"title\"]) { msg.title = minfo[\"title\"]; }\n\n\n    if (minfo[\"title\"]) { msg.title = minfo[\"title\"] + \" [Modbus \" + msg.register + \"]\"; }\n    else { msg.title = (minfo[\"reading\"].split(\".\")[1] ? minfo[\"reading\"].split(\".\")[1] : minfo[\"reading\"]) + \" [Modbus \" + msg.register + \"]\"; }\n\n    return [msg, null];\n\n}\n\nelse if (minfo.datatype == \"IEEE754\") {\n\n    msg.payload = String.fromCharCode(msg.payload[3]) + String.fromCharCode(msg.payload[4]) + String.fromCharCode(msg.payload[5]) + String.fromCharCode(msg.payload[6]);\n    msg.payload = Buffer.from(msg.payload, 'ascii');\n\n    \n    let intValue;\n    // if (typeof msg.payload === \"number\") {\n    //     intValue = msg.payload;\n    // } else if (typeof msg.payload === \"string\") {\n    //     intValue = Number(msg.payload);\n    // } else if (msg.payload.length == 4) {\n        // four byte array or buffer\n        intValue = (((((msg.payload[0] << 8) + msg.payload[1]) << 8) + msg.payload[2]) << 8) + msg.payload[3];\n    // } else {\n    //     node.warn(\"Unrecognised payload type or length\");\n    // }\n\n    msg.payload = Int2Float32(intValue);\n\n    if (minfo[\"multiplier\"] > 1) { msg.payload = msg.payload / minfo[\"multiplier\"]; }    \n\n    msg.topic = dinfo.device + \"/\" + minfo[\"reading\"].replace(\".\", \"/\");\n\n\n\n    if (minfo[\"units\"]) { msg.units = minfo[\"units\"]; }\n    //if (minfo[\"title\"]) { msg.title = minfo[\"title\"]; }\n\n\n    if (minfo[\"title\"]) { msg.title = minfo[\"title\"] + \" [Modbus \" + msg.register + \"]\"; }\n    else { msg.title = (minfo[\"reading\"].split(\".\")[1] ? minfo[\"reading\"].split(\".\")[1] : minfo[\"reading\"]) + \" [Modbus \" + msg.register + \"]\"; }\n\n    return [msg, null];\n\n}\n\nelse {\n    \n   \n           \n    msg.payload = (256 * msg.payload[3]) + msg.payload[4];        \n    msg.payload =  msg.payload / parseFloat(minfo[\"multiplier\"] || 1);\n\n    msg.topic = dinfo.device + \"/\" + minfo[\"reading\"].replace(\".\",\"/\");\n\n\n    if (minfo[\"values\"]) {\n        \n        if (minfo[\"values\"]==\"alarmCodes\") { \n            \n            var ac = flow.get(\"alarmCodes\");\n            if (ac[\"\" + msg.payload]) { msg.payload = ac[\"\" + msg.payload]; }\n        }\n        \n        else if (minfo[\"values\"][\"\" + msg.payload]) { msg.payload = minfo[\"values\"][\"\" + msg.payload]; }\n    }\n\n    if (minfo[\"units\"]) { msg.units = minfo[\"units\"]; }\n    //if (minfo[\"title\"]) { msg.title = minfo[\"title\"]; }\n    \n    \n    if (minfo[\"title\"]) { msg.title = minfo[\"title\"] + \" [Modbus \" + msg.register + \"]\"; }\n    else  { msg.title = (minfo[\"reading\"].split(\".\")[1]?  minfo[\"reading\"].split(\".\")[1] : minfo[\"reading\"]) + \" [Modbus \" + msg.register + \"]\"; }\n\n    return [msg,null];\n    \n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 760,
        "wires": [
            [
                "27d9458030c135fb",
                "8cc37192c159c7d8",
                "8ade5b6cd4b47a8a"
            ],
            [
                "3548673d2b276515",
                "2783cecd9f2f8a33",
                "8cc37192c159c7d8"
            ]
        ]
    },
    {
        "id": "27d9458030c135fb",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 640,
        "wires": []
    },
    {
        "id": "1de4c5e262493d38",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "Modbus",
        "func": "// http://www.simplymodbus.ca/FC03.htm\n//11 03 006B 0003 7687\n// 11 03 06 AE41 5652 4340 49AD\n\n// uses address 17 as default.\n\n//var offs = 0;\n//if  (msg.payload[0] === 0) { offs = 1; }\nif (!msg.payload) { msg.payload={}; }\n\nvar address = msg.payload.address || msg.address ||8;\nvar fc = msg.payload.fc || msg.fc ;\nvar register = msg.payload.register || msg.register || 1;\nflow.set(\"curreg\", register);\nflow.set(\"fc\", fc);\n\n//register = register - 1;\n\nvar rlength = msg.payload.rlength || msg.rlength || 1;\n\nvar r1 = Math.floor(register / 256);\nvar r2 = register % 256;\n\n\n\n\nvar targetv = msg.targetv; //999;\n\n\nif (fc != 3 && fc != 6 && fc != 16) { return null; }\n\nflow.set(\"modbusIn\",\"\");\n\n//targetv = global.get(\"modbus.\"+register+\".value\") || 0;\n\n//targetv = parseInt(global.get(\"modbus.\"+register+\".multiply\") || 1) * targetv;\n\n\nfunction crc16(buffer) {\n    var crc = 0xFFFF;\n    var odd;\n\n    for (var i = 0; i < buffer.length; i++) {\n        crc = crc ^ buffer[i];\n\n        for (var j = 0; j < 8; j++) {\n            odd = crc & 0x0001;\n            crc = crc >> 1;\n            if (odd) {\n                crc = crc ^ 0xA001;\n            }\n        }\n    }\n\n    crc  = \"0000\" + crc.toString(16);\n    crc = crc.substr(-4);\n\n    return crc;\n}\n\nvar tosend = \"\";\nvar crcString =\"\";\nvar msg2={};\n \nif (fc == 3) {   // read\n\n    \n    tosend = String.fromCharCode(address) + String.fromCharCode(3);\n    tosend += String.fromCharCode(r1) + String.fromCharCode(r2);\n    tosend += String.fromCharCode(0) + String.fromCharCode(rlength);\n    \n    crcString = crc16(Buffer.from(tosend, 'ascii'));\n    tosend += String.fromCharCode(parseInt(crcString.substr(2,2),16)) + String.fromCharCode(parseInt(crcString.substr(0,2),16)) ;\n    \n    msg.payload  = Buffer.from(tosend, 'ascii');\n    \n    tosend = \"-\" + tosend;\n    \n    msg2.payload  = Buffer.from(tosend, 'ascii');\n    \n    \n    return [msg,msg2];\n\n} else if (fc == 6 ) {    // write\n\n\n    tosend = String.fromCharCode(address) + String.fromCharCode(6);\n    \n    tosend += String.fromCharCode(r1) + String.fromCharCode(r2);\n    \n    targetv = parseInt(targetv) ;\n    var hexStringValue  = \"0000\" + targetv.toString(16);\n    hexStringValue = hexStringValue.substring(-4);\n    \n    \n    //tosend += String.fromCharCode(parseInt(hexStringValue.substring(6, 2), 16)) + String.fromCharCode(parseInt(hexStringValue.substring(4, 16), 32)) ;\n    tosend += String.fromCharCode(parseInt(hexStringValue.substring(2, 2), 16)) + String.fromCharCode(parseInt(hexStringValue.substring(0, 16), 32));\n\n    \n    msg.payload  = Buffer.from(tosend, 'ascii');\n    \n    crcString = crc16(msg.payload);\n   \n    tosend += String.fromCharCode(parseInt(crcString.substring(2, 2), 16)) + String.fromCharCode(parseInt(crcString.substring(0,2),16)) ;\n   \n       \n    msg.payload  = Buffer.from(tosend, 'ascii');\n    tosend = \"-\" + tosend;\n    msg2.payload  = Buffer.from(tosend, 'ascii');\n    \n    \n    return [msg,msg2];\n\n} else if (fc == 16) {    // write\n\n\n    tosend = String.fromCharCode(address) + String.fromCharCode(16);\n\n    tosend += String.fromCharCode(r1) + String.fromCharCode(r2);\n\n    tosend += String.fromCharCode(0) + String.fromCharCode(2) + String.fromCharCode(4);\n\n    targetv = parseInt(targetv);\n    var hexStringValue = \"000000\" + targetv.toString(16);\n    //hexStringValue = hexStringValue.substring(hexStringValue.length-8, 8);\n\n    tosend += String.fromCharCode(targetv) + String.fromCharCode(0) + String.fromCharCode(0) + String.fromCharCode(0);\n\n    // tosend += String.fromCharCode(parseInt(hexStringValue.substring(6, 2), 16)) + String.fromCharCode(parseInt(hexStringValue.substring(4, 2), 16));\n    // tosend += String.fromCharCode(parseInt(hexStringValue.substring(2, 2), 16)) + String.fromCharCode(parseInt(hexStringValue.substring(0, 2), 16));\n\n\n    msg.payload = Buffer.from(tosend, 'ascii');\n\n    crcString = crc16(msg.payload);\n\n    tosend += String.fromCharCode(parseInt(crcString.substring(2, 2), 16)) + String.fromCharCode(parseInt(crcString.substring(0, 2), 16));\n\n\n    msg.payload = Buffer.from(tosend, 'ascii');\n    tosend = \"-\" + tosend;\n    msg2.payload = Buffer.from(tosend, 'ascii');\n\n\n    return [msg, msg2];\n\n} \n\n\n",
        "outputs": "2",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 380,
        "wires": [
            [
                "6e4111cfac076190",
                "67a35fe699a4f251",
                "9539937e45242612"
            ],
            []
        ]
    },
    {
        "id": "cdfa8f4564add840",
        "type": "serial in",
        "z": "647bea769565bae6",
        "name": "",
        "serial": "7bf23b37832ae370",
        "x": 650,
        "y": 760,
        "wires": [
            [
                "63e1d6a192f21d6a",
                "337a0a6ed35ec44f",
                "8b0d5f8852cfa8a1",
                "292238c2e869c017"
            ]
        ]
    },
    {
        "id": "67a35fe699a4f251",
        "type": "serial out",
        "z": "647bea769565bae6",
        "name": "",
        "serial": "7bf23b37832ae370",
        "x": 1210,
        "y": 380,
        "wires": []
    },
    {
        "id": "a40e64512649e255",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 640,
        "wires": []
    },
    {
        "id": "ec194d28f1bf65fe",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 260,
        "wires": []
    },
    {
        "id": "01a5aae1c9c00559",
        "type": "inject",
        "z": "647bea769565bae6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "",
        "payload": "registers",
        "payloadType": "flow",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "b78cea980c61ba7c"
            ]
        ]
    },
    {
        "id": "b78cea980c61ba7c",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "",
        "func": "\nvar oot = [];\n\nfor (var r in flow.get(\"registers\")) {\n    for (var d in flow.get(\"devices\")) {\n    \n    \n        var item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = flow.get(\"registers.\"+r+\".register\");\n        item.rlength = 2;\n\n        oot.push(item);\n        \n    }\n    \n}\n\nmsg.payload = oot;\n\nflow.set(\"msglist\",[]);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            [
                "f3efde5641cedee6"
            ]
        ]
    },
    {
        "id": "312f42e6295ab16e",
        "type": "split",
        "z": "647bea769565bae6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 550,
        "y": 320,
        "wires": [
            [
                "507d5366df7270d7"
            ]
        ]
    },
    {
        "id": "d3f8cff2c488c32a",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 630,
        "y": 200,
        "wires": []
    },
    {
        "id": "dd0e4e099c4458b4",
        "type": "link out",
        "z": "647bea769565bae6",
        "name": "",
        "links": [
            "72fc070f.39dd8"
        ],
        "x": 1495,
        "y": 680,
        "wires": []
    },
    {
        "id": "3548673d2b276515",
        "type": "split",
        "z": "647bea769565bae6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1050,
        "y": 840,
        "wires": [
            [
                "190290ab9e5f9842"
            ]
        ]
    },
    {
        "id": "2a4c44928490f73b",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1370,
        "y": 840,
        "wires": []
    },
    {
        "id": "2783cecd9f2f8a33",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1070,
        "y": 800,
        "wires": []
    },
    {
        "id": "db9b8198e28d45e7",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1510,
        "y": 780,
        "wires": []
    },
    {
        "id": "e16b8ff390173eac",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "34 - set PIR delay to 60s",
        "func": "\nmsg.fc = 6;\nmsg.address = 1;\nmsg.register = 47;\nmsg.rlength = 2;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\n\nmsg.targetv = 47;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 560,
        "wires": [
            [
                "3670f30cb2b2f8df"
            ]
        ]
    },
    {
        "id": "600e1fe0ac86dbc1",
        "type": "inject",
        "z": "647bea769565bae6",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 560,
        "wires": [
            [
                "e16b8ff390173eac"
            ]
        ]
    },
    {
        "id": "72b8d2d0ae3e2b7c",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "Read Key Registers",
        "func": "\n\nvar oot = [];\n\n    for (var d in flow.get(\"devices\")) {\n    \n    \n        var item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = 11;\n        item.rlength = 1;\n\n        oot.push(item);\n        \n        \n        \n        item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = 12;\n        item.rlength = 1;\n\n        oot.push(item);\n        \n   \n        item = {};\n        item.fc = 3;\n        item.address = flow.get(\"devices.\"+d+\".address\");\n        item.register = 8;\n        item.rlength = 1;\n\n        oot.push(item);\n        \n        \n    }\n    \n\n\nmsg.payload = oot;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 320,
        "wires": [
            [
                "312f42e6295ab16e"
            ]
        ]
    },
    {
        "id": "c2e9cc94edcef650",
        "type": "inject",
        "z": "647bea769565bae6",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "72b8d2d0ae3e2b7c"
            ]
        ]
    },
    {
        "id": "507d5366df7270d7",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "SHIFT",
        "func": "\nvar msglist=flow.get(\"msglist\") || [];\n\n//if (msglist.length> 100) { msglist = []; }\n    \nif (msg.payload == \"next\") { \n    \n    if (!msglist[0]) { return null; }\n    \n    if (flow.get(\"modbusIn\")===\"\") { return null; }\n    \n    msg = msglist[0];\n    msglist.shift();\n    flow.set(\"msglist\",msglist);\n    return msg;\n}\n\nelse {   \n    \n    msglist.push(msg); \n    flow.set(\"msglist\",msglist);\n    return null;\n    \n}\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": [
            [
                "1de4c5e262493d38"
            ]
        ]
    },
    {
        "id": "5001184c39521cb2",
        "type": "inject",
        "z": "647bea769565bae6",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "next",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "next",
        "payloadType": "str",
        "x": 610,
        "y": 400,
        "wires": [
            [
                "507d5366df7270d7"
            ]
        ]
    },
    {
        "id": "8cc37192c159c7d8",
        "type": "link out",
        "z": "647bea769565bae6",
        "name": "",
        "links": [
            "c4e46a82.1c9e7",
            "263e14a3b8f15c1b"
        ],
        "x": 1015,
        "y": 760,
        "wires": []
    },
    {
        "id": "6e4111cfac076190",
        "type": "trigger",
        "z": "647bea769565bae6",
        "name": "",
        "op1": "reading",
        "op2": "done",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": true,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "outputs": 1,
        "x": 1200,
        "y": 460,
        "wires": [
            [
                "518025f7721c2e1f"
            ]
        ]
    },
    {
        "id": "518025f7721c2e1f",
        "type": "change",
        "z": "647bea769565bae6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "modbusIn",
                "pt": "flow",
                "to": "xxx",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1370,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "263e14a3b8f15c1b",
        "type": "link in",
        "z": "647bea769565bae6",
        "name": "",
        "links": [
            "8cc37192c159c7d8"
        ],
        "x": 415,
        "y": 440,
        "wires": [
            [
                "699dbe6a4d88847a"
            ]
        ]
    },
    {
        "id": "a3c879b2817f0b7e",
        "type": "change",
        "z": "647bea769565bae6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "next",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 440,
        "wires": [
            [
                "507d5366df7270d7"
            ]
        ]
    },
    {
        "id": "5be7875388c689b4",
        "type": "inject",
        "z": "647bea769565bae6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 1010,
        "y": 460,
        "wires": [
            [
                "6e4111cfac076190"
            ]
        ]
    },
    {
        "id": "c22a2fd27183fb33",
        "type": "link in",
        "z": "647bea769565bae6",
        "name": "",
        "links": [
            "aad36e214f9f97df",
            "2db0089.690c2f8",
            "be5ca099.80857",
            "5dbf074d.dd7078",
            "315cd92.2bca026"
        ],
        "x": 635,
        "y": 360,
        "wires": [
            [
                "507d5366df7270d7"
            ]
        ]
    },
    {
        "id": "aad36e214f9f97df",
        "type": "link out",
        "z": "647bea769565bae6",
        "name": "",
        "links": [
            "c22a2fd27183fb33",
            "479e65f4.abc6cc"
        ],
        "x": 835,
        "y": 560,
        "wires": []
    },
    {
        "id": "190290ab9e5f9842",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "",
        "func": "msg= msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1190,
        "y": 840,
        "wires": [
            [
                "2a4c44928490f73b",
                "e1c3d44dfcb7ef48"
            ]
        ]
    },
    {
        "id": "e1c3d44dfcb7ef48",
        "type": "subflow:b2d492ed.c4def",
        "z": "647bea769565bae6",
        "name": "",
        "x": 1280,
        "y": 760,
        "wires": [
            [
                "dd0e4e099c4458b4",
                "db9b8198e28d45e7"
            ]
        ]
    },
    {
        "id": "3670f30cb2b2f8df",
        "type": "change",
        "z": "647bea769565bae6",
        "name": "not used",
        "rules": [
            {
                "t": "set",
                "p": "lastset",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 560,
        "wires": [
            [
                "aad36e214f9f97df"
            ]
        ]
    },
    {
        "id": "ac62979da0dd8ee0",
        "type": "delay",
        "z": "647bea769565bae6",
        "d": true,
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 750,
        "y": 240,
        "wires": [
            [
                "507d5366df7270d7"
            ]
        ]
    },
    {
        "id": "f3efde5641cedee6",
        "type": "split",
        "z": "647bea769565bae6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 240,
        "wires": [
            [
                "ac62979da0dd8ee0",
                "d3f8cff2c488c32a",
                "507d5366df7270d7"
            ]
        ]
    },
    {
        "id": "573ed2d6e6044c2d",
        "type": "change",
        "z": "647bea769565bae6",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "points",
                "pt": "msg",
                "to": "5000",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 720,
        "wires": [
            [
                "dd0e4e099c4458b4"
            ]
        ]
    },
    {
        "id": "8ade5b6cd4b47a8a",
        "type": "switch",
        "z": "647bea769565bae6",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "AlarmCode",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "WarningCode",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Position",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1050,
        "y": 700,
        "wires": [
            [
                "74efc887b96378f9",
                "dd0e4e099c4458b4"
            ],
            [
                "dd0e4e099c4458b4"
            ],
            [
                "573ed2d6e6044c2d"
            ],
            [
                "e1c3d44dfcb7ef48"
            ]
        ]
    },
    {
        "id": "c4fdf8e231ceeaad",
        "type": "inject",
        "z": "647bea769565bae6",
        "d": true,
        "name": "REGISTERS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "[{\"register\":\"8\",\"reading\":\"dat.co2\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"units\":\"ppm\"},{\"register\":\"11\",\"reading\":\"dat.humidity\",\"multiplier\":\"10\",\"datatype\":\"int16\",\"units\":\"%\"},{\"register\":\"12\",\"reading\":\"dat.temperature\",\"multiplier\":\"100\",\"datatype\":\"int16\",\"units\":\"°C\"},{\"register\":\"15\",\"reading\":\"dat.pirStatus\",\"multiplier\":\"1\",\"datatype\":\"int16\",\"values\":{\"65534\":0,\"65535\":1}},{\"register\":\"28\",\"reading\":\"dat.setpoint\",\"multiplier\":\"10\",\"datatype\":\"int16\",\"units\":\"%\"}]",
        "payloadType": "json",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "871bf7f22efd03e3"
            ]
        ]
    },
    {
        "id": "d4855d55c0055d0d",
        "type": "split",
        "z": "647bea769565bae6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 140,
        "wires": [
            [
                "2f843f2ce501fe13"
            ]
        ]
    },
    {
        "id": "2f843f2ce501fe13",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "Store Registers",
        "func": "\nvar rin = msg.payload;\nif (rin.register<1) { return null; } \n\n\nvar v = global.get(\"readings.\" + rin.reading + \".value\") || 0\nrin[\"value\"] = v;\n\n\n\nflow.set(\"registers.r\" + rin.register, rin);\n\nmsg.payload = flow.get(\"registers\") ;\n    \nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "053c0fd3335fed42",
        "type": "inject",
        "z": "647bea769565bae6",
        "name": "DEVICES",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "[{\"address\":\"1\",\"device\":\"modutherm1\"}]",
        "payloadType": "json",
        "x": 940,
        "y": 60,
        "wires": [
            [
                "8be04b3442ea1d33"
            ]
        ]
    },
    {
        "id": "8be04b3442ea1d33",
        "type": "split",
        "z": "647bea769565bae6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1035,
        "y": 60,
        "wires": [
            [
                "fbd5829c4330f093"
            ]
        ],
        "l": false
    },
    {
        "id": "fbd5829c4330f093",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "Store Devices",
        "func": "\nvar rin = msg.payload;\nif (rin.address<1) { return null; } \n\n\nflow.set(\"devices.\" + rin.address, rin);\n\n\n    \nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1160,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "5333c9de7cf83f4a",
        "type": "link in",
        "z": "647bea769565bae6",
        "name": "",
        "links": [
            "1f335ee0.7b9a41",
            "b09805d5.754898"
        ],
        "x": 225,
        "y": 500,
        "wires": [
            [
                "7ec1edd8b458547e"
            ]
        ]
    },
    {
        "id": "74efc887b96378f9",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "",
        "func": "msg.topic = msg.topic.replace(\"/stat/\",\"/alarm/\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 660,
        "wires": [
            [
                "dd0e4e099c4458b4"
            ]
        ]
    },
    {
        "id": "7ec1edd8b458547e",
        "type": "delay",
        "z": "647bea769565bae6",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 500,
        "wires": [
            [
                "3670f30cb2b2f8df"
            ]
        ]
    },
    {
        "id": "ebd257bbcaca218e",
        "type": "inject",
        "z": "647bea769565bae6",
        "name": "REGISTERS",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "[{\"register\":\"0\",\"reading\":\"sensor.tOutDHW\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Hot water temperature\",\"period\":1,\"units\":\"°C\"},{\"register\":\"2\",\"reading\":\"sensor.tCWS\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Cold water temperature\",\"period\":10,\"units\":\"°C\"},{\"register\":\"4\",\"reading\":\"sensor.tTank\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"External tank temperature\",\"period\":30,\"units\":\"°C\"},{\"register\":\"6\",\"reading\":\"sensor.fDHW\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"DHW water flow rate\",\"period\":1,\"units\":\"l/min\"},{\"register\":\"8\",\"reading\":\"sensor.kwDHW\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Hot water power\",\"period\":1,\"units\":\"kW\"},{\"register\":\"10\",\"reading\":\"sensor.tSetHTG\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Heating reference temperature\",\"period\":10,\"units\":\"°C\"},{\"register\":\"12\",\"reading\":\"sensor.tOutHTG\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Heating outlet temperature\",\"period\":1,\"units\":\"°C\"},{\"register\":\"14\",\"reading\":\"sensor.tInHTG\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Heating inlet temperature\",\"period\":5,\"units\":\"°C\"},{\"register\":\"16\",\"reading\":\"sensor.tOutdoor\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Outdoor temperature\",\"period\":60,\"units\":\"°C\"},{\"register\":\"18\",\"reading\":\"sensor.fHTG\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Heating flow rate\",\"period\":1,\"units\":\"l/min\"},{\"register\":\"20\",\"reading\":\"sensor.pwmPump\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Pump PWM\",\"period\":1,\"units\":\"%\"},{\"register\":\"22\",\"reading\":\"sensor.kwHTG\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Heating power\",\"period\":5,\"units\":\"kW\"},{\"register\":\"24\",\"reading\":\"sensor.pHTG\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Heating pressure\",\"period\":30,\"units\":\"bar\"},{\"register\":\"26\",\"reading\":\"sensor.tOutPrimary\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"District Outlet temperature\",\"period\":5,\"units\":\"°C\"},{\"register\":\"28\",\"reading\":\"sensor.tInPrimary\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"District inlet temperature\",\"period\":5,\"units\":\"°C\"},{\"register\":\"30\",\"reading\":\"sensor.dpPrimary\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"District differential pressure\",\"period\":10,\"units\":\"bar\"},{\"register\":\"32\",\"reading\":\"sensor.fPrimary\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"District flow rate\",\"period\":1,\"units\":\"l/min\"},{\"register\":\"34\",\"reading\":\"sensor.stepDHW\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Hot water valve step count\",\"period\":1,\"units\":\"/300\"},{\"register\":\"36\",\"reading\":\"sensor.stepHTG\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Heating valve step count\",\"period\":1,\"units\":\"/300\"},{\"register\":\"38\",\"reading\":\"sensor.stepDP\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Differential pressure valve step count\",\"period\":1,\"units\":\"/300\"},{\"register\":\"42\",\"reading\":\"config.mode\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Current Unit mode\",\"period\":1},{\"register\":\"46\",\"reading\":\"setpoint.tSetDHW\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Hot water reference temperature\",\"period\":60,\"units\":\"°C\"},{\"register\":\"48\",\"reading\":\"setpoint.tSetHTG\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Heating reference temperature\",\"period\":60,\"units\":\"°C\"},{\"register\":\"50\",\"reading\":\"config.modeHTG\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Heating mode\",\"period\":10},{\"register\":\"52\",\"reading\":\"config.tRefDiffHTG\",\"multiplier\":\"1\",\"datatype\":\"UInt32LE\",\"title\":\"Heating reference differential temperature\",\"period\":60,\"units\":\"°C\"},{\"register\":\"54\",\"reading\":\"config.dpReference\",\"multiplier\":10,\"datatype\":\"UInt32LE\",\"title\":\"Primary reference differential pressure\",\"period\":60,\"units\":\"bar\"},{\"register\":\"56\",\"reading\":\"config.fMaxDHW\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Primary max flowrate in hot water regulation\",\"period\":60,\"units\":\"l/min\"},{\"register\":\"58\",\"reading\":\"config.fMaxHTG\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Primary max flowrate in heating regulation\",\"period\":60,\"units\":\"l/min\"},{\"register\":\"60\",\"reading\":\"config.pwmPumpMax\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Max pump PWM\",\"period\":60,\"units\":\"%\"},{\"register\":\"62\",\"reading\":\"config.pwmPumpMin\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Min pump PWM\",\"period\":60,\"units\":\"%\"},{\"register\":\"64\",\"reading\":\"config.useTPrimary\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Use Heating inlet temperature for regulation\",\"period\":60},{\"register\":\"66\",\"reading\":\"config.stepMaxDP\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Primary differential pressure valve max step\",\"period\":60,\"units\":\"%\"},{\"register\":\"68\",\"reading\":\"config.stepMaxDHW\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Hot water valve max step\",\"period\":60,\"units\":\"/300\"},{\"register\":\"70\",\"reading\":\"config.stepMaxHTG\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Heating valve max step\",\"period\":60,\"units\":\"/300\"},{\"register\":\"72\",\"reading\":\"config.pMaxHTG\",\"multiplier\":10,\"datatype\":\"UInt32LE\",\"title\":\"Heating max pressure\",\"period\":60,\"units\":\"bar\"},{\"register\":\"74\",\"reading\":\"config.pMinHTG\",\"multiplier\":10,\"datatype\":\"UInt32LE\",\"title\":\"Heating min pressure\",\"period\":60,\"units\":\"bar\"},{\"register\":\"76\",\"reading\":\"config.extSFactor\",\"multiplier\":10,\"datatype\":\"UInt32LE\",\"title\":\"External sensor factor\",\"period\":60},{\"register\":\"78\",\"reading\":\"config.extSoffset\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"External sensor factor\",\"period\":60,\"units\":\"°C\"},{\"register\":\"80\",\"reading\":\"config.extSEnable\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"External sensor enable\",\"period\":60},{\"register\":\"82\",\"reading\":\"config.cylSensorEnable\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Heat cylinder sensor enable\",\"period\":60},{\"register\":\"84\",\"reading\":\"config.unitModel\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Unit model\",\"period\":60},{\"register\":\"86\",\"reading\":\"config.eCountEnable\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Energy counter enable\",\"period\":60},{\"register\":\"88\",\"reading\":\"config.modbusAddress\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Modbus address\",\"period\":60},{\"register\":\"90\",\"reading\":\"config.mbusAddress\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Mbus address\",\"period\":60},{\"register\":\"92\",\"reading\":\"config.extEValve\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"External electric valve\",\"period\":60},{\"register\":\"94\",\"reading\":\"config.warmEnable\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Keep warm enable\",\"period\":60},{\"register\":\"96\",\"reading\":\"config.tWarm\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Keep warm temperature\",\"period\":60,\"units\":\"°C\"},{\"register\":\"98\",\"reading\":\"config.tWarmHyst\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Keep warm hysteresis\",\"period\":60,\"units\":\"°C\"},{\"register\":\"100\",\"reading\":\"config.antiFreeze\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Antifreeze enable\",\"period\":60},{\"register\":\"102\",\"reading\":\"config.tOnAFreeze\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Antifreeze temperature on\",\"period\":60,\"units\":\"°C\"},{\"register\":\"104\",\"reading\":\"config.tOffAFreeze\",\"multiplier\":1,\"datatype\":\"UInt32LE\",\"title\":\"Antifreeze temperature off\",\"period\":60,\"units\":\"°C\"}]",
        "payloadType": "json",
        "x": 930,
        "y": 120,
        "wires": [
            [
                "4c997c3fe02c9f64"
            ]
        ]
    },
    {
        "id": "871bf7f22efd03e3",
        "type": "change",
        "z": "647bea769565bae6",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "registers",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 140,
        "wires": [
            [
                "d4855d55c0055d0d"
            ]
        ]
    },
    {
        "id": "8bf677761232628c",
        "type": "inject",
        "z": "647bea769565bae6",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "12cc2f087a92608c"
            ]
        ]
    },
    {
        "id": "12cc2f087a92608c",
        "type": "http request",
        "z": "647bea769565bae6",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://raw.githubusercontent.com/heatweb/plumbing-controller/main/json/modbus/sontay.json",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 310,
        "y": 80,
        "wires": [
            [
                "f1d9ae30c474d514",
                "11d6cfda03776a53"
            ]
        ]
    },
    {
        "id": "d30d0d3d69eb91d6",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 690,
        "y": 80,
        "wires": []
    },
    {
        "id": "f1d9ae30c474d514",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "sontay1",
        "func": "\nfunction checkMatch(device) {\n  return device.id == \"sontay1\";\n}\n\nmsg.payload = msg.payload.filter(checkMatch);\n\nif (msg.payload[0]) { msg.payload = msg.payload[0].registers }\n\nelse { return null; }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 80,
        "wires": [
            [
                "d30d0d3d69eb91d6",
                "871bf7f22efd03e3"
            ]
        ]
    },
    {
        "id": "11d6cfda03776a53",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 40,
        "wires": []
    },
    {
        "id": "699dbe6a4d88847a",
        "type": "delay",
        "z": "647bea769565bae6",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 550,
        "y": 440,
        "wires": [
            [
                "a3c879b2817f0b7e"
            ]
        ]
    },
    {
        "id": "814692684deb4e34",
        "type": "split",
        "z": "647bea769565bae6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1095,
        "y": 120,
        "wires": [
            [
                "7d33e16f56de9381"
            ]
        ],
        "l": false
    },
    {
        "id": "7d33e16f56de9381",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "Store Registers",
        "func": "\nvar rin = msg.payload;\nif (rin.register01) { return null; } \n\n\nvar v = global.get(\"readings.\" + rin.reading + \".value\") || 0\nrin[\"value\"] = v;\n\n\n\nflow.set(\"registers.r\" + rin.register, rin);\n\nmsg.payload = flow.get(\"registers\") ;\n    \nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4c997c3fe02c9f64",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "Store Registers",
        "func": "\nflow.set(\"registers\" , {});\n\n    \nreturn msg;\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1035,
        "y": 120,
        "wires": [
            [
                "814692684deb4e34"
            ]
        ],
        "l": false
    },
    {
        "id": "c7211edbc62634db",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "readFloatBE",
        "func": "//msg.payload = (msg.payload[0] * 256) + msg.payload[1];\n\nmsg.payload = msg.payload.readFloatBE(0);\nmsg.topic = \"plantroom/dat/kwIn\";\nmsg.units = \"kW\";\n\nvar msg1 = {};\n//msg1.payload = Math.max(0, (1.0 * msg.payload) - 0.09);\nmsg1.payload = msg.payload;\nmsg1.topic = \"heatpump/dat/kwIn\";\nmsg1.units = \"kW\";\n\n\nreturn [msg,msg1];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1200,
        "wires": [
            [
                "1152286b29e56844"
            ],
            []
        ]
    },
    {
        "id": "1152286b29e56844",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "debug 41",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1200,
        "y": 1200,
        "wires": []
    },
    {
        "id": "ca59ce8c02150498",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "debug 42",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1180,
        "y": 1340,
        "wires": []
    },
    {
        "id": "2640c1acff67b367",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "readUInt32LE",
        "func": "//msg.payload = (msg.payload[0] * 256) + msg.payload[1];\n\nmsg.topic = \"heatpump/dat/kwhIn\";\nmsg.units = \"kWh\";\nmsg.payload = parseFloat(msg.payload.readUInt32LE(0));\n\n// Wh\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1140,
        "wires": [
            [
                "69ac43b7ded59a13"
            ]
        ]
    },
    {
        "id": "69ac43b7ded59a13",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "debug 43",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1200,
        "y": 1140,
        "wires": []
    },
    {
        "id": "838a4b1364abb534",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "readFloatBE",
        "func": "//msg.payload = (msg.payload[0] * 256) + msg.payload[1];\n\nmsg.payload = msg.payload.readFloatLE(0);\nmsg.topic = \"plantroom/dat/kwIn\";\nmsg.units = \"kW\";\n\nvar msg1 = {};\n//msg1.payload = Math.max(0, (1.0 * msg.payload) - 0.09);\nmsg1.payload = msg.payload;\nmsg1.topic = \"heatpump/dat/kwIn\";\nmsg1.units = \"kW\";\n\n\nreturn [msg,msg1];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 1280,
        "wires": [
            [
                "09f05f31847eb8d4"
            ],
            []
        ]
    },
    {
        "id": "09f05f31847eb8d4",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "debug 44",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1200,
        "y": 1280,
        "wires": []
    },
    {
        "id": "29fc122d3835ada4",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "readBigInt64BE",
        "func": "//msg.payload = (msg.payload[0] * 256) + msg.payload[1];\n\nmsg.topic = \"heatpump/dat/kwhIn\";\nmsg.units = \"kWh\";\nmsg.payload = parseFloat(msg.payload.buffer.readBigInt64BE(0))/1000;\n\n// Wh\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1340,
        "wires": [
            [
                "ca59ce8c02150498"
            ]
        ]
    },
    {
        "id": "7718a67deffc9ebc",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "readUInt32BE",
        "func": "//msg.payload = (msg.payload[0] * 256) + msg.payload[1];\n\nmsg.topic = \"heatpump/dat/kwhIn\";\nmsg.units = \"kWh\";\nmsg.payload = parseFloat(msg.payload.readUInt32BE(0));\n\n// Wh\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1080,
        "wires": [
            [
                "105529091cd9b8e5"
            ]
        ]
    },
    {
        "id": "105529091cd9b8e5",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "debug 45",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1200,
        "y": 1080,
        "wires": []
    },
    {
        "id": "337a0a6ed35ec44f",
        "type": "function",
        "z": "647bea769565bae6",
        "d": true,
        "name": "function 1",
        "func": "//msg.payload = Buffer.from(msg.payload,3,4);\n\n//msg.payload = (((((msg.payload[3] << 8) + msg.payload[4]) << 8) + msg.payload[5]) << 8) + msg.payload[6];\n\n//  var oot = [];\n//  oot.push(msg.payload[3]);\n//  oot.push(msg.payload[4]);\n//  oot.push(msg.payload[5]);\n//  oot.push(msg.payload[6]);\n//  msg.payload = oot;\n \n\nmsg.payload = String.fromCharCode(msg.payload[3]) + String.fromCharCode(msg.payload[4]) + String.fromCharCode(msg.payload[5]) + String.fromCharCode(msg.payload[6]);\nmsg.payload = Buffer.from(msg.payload, 'ascii');\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 980,
        "wires": [
            [
                "7718a67deffc9ebc",
                "2640c1acff67b367",
                "c7211edbc62634db",
                "838a4b1364abb534",
                "19fd2eb8dc0d4fc6"
            ]
        ]
    },
    {
        "id": "19fd2eb8dc0d4fc6",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "debug 46",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 980,
        "wires": []
    },
    {
        "id": "0968c9b8d4ef66bf",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "fc16",
        "func": "\nmsg.fc = 16;\nmsg.address = 1;\nmsg.register = 46;\nmsg.rlength = 2;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\n\nmsg.targetv = 48;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 600,
        "wires": [
            [
                "3670f30cb2b2f8df"
            ]
        ]
    },
    {
        "id": "f39d3c0a969b8dc6",
        "type": "inject",
        "z": "647bea769565bae6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 600,
        "wires": [
            [
                "0968c9b8d4ef66bf"
            ]
        ]
    },
    {
        "id": "a74428730f51e2bf",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "fc16",
        "func": "\nmsg.fc = 16;\nmsg.address = 1;\nmsg.register = 48;\nmsg.rlength = 2;\n\nflow.set(\"multiply\", 1);\nflow.set(\"rtopic\", \"test\");\n\n\nmsg.targetv = 47;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 640,
        "wires": [
            [
                "3670f30cb2b2f8df"
            ]
        ]
    },
    {
        "id": "9c2dcbdce36f37d9",
        "type": "inject",
        "z": "647bea769565bae6",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 640,
        "wires": [
            [
                "a74428730f51e2bf"
            ]
        ]
    },
    {
        "id": "81de130cfaaa34f0",
        "type": "link in",
        "z": "647bea769565bae6",
        "name": "link in 4",
        "links": [
            "c731a49ba871b81e"
        ],
        "x": 185,
        "y": 720,
        "wires": [
            [
                "79a82e81080adf03"
            ]
        ]
    },
    {
        "id": "7095b0cc276457eb",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "fc16",
        "func": "msg.fc = 16;\nmsg.address = 1;\nmsg.rlength = 2;\n\nflow.set(\"multiply\", 1);\n//flow.set(\"rtopic\", \"test\");\n\nmsg.register = -1;\n\nvar varkey = msg.topic.split(\"/\")[4];\n\nvar regs = flow.get(\"registers\");\nfor (var r in regs) {\n\n    if ((regs[r].reading.split('.')[0] == \"config\" || regs[r].reading.split('.')[0] == \"setpoint\" || regs[r].reading.split('.')[0] == \"settings\") && regs[r].reading.split('.')[1] == varkey) {\n        msg.register = parseInt(regs[r].register);\n        \n        if (regs[r].multiplier > 1) { msg.payload = msg.payload * regs[r].multiplier; }\n        msg.targetv = msg.payload;\n\n        break;\n    }\n\n}\n\nif (msg.register == -1) {return null;}\n\n// if (msg.topic.indexOf(\"set/tSetDHW\") > 0) { msg.register = 46; }\n// else if (msg.topic.indexOf(\"set/tSetHTG\") > 0) { msg.register = 48; }\n// else { return null; }\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 720,
        "wires": [
            [
                "3670f30cb2b2f8df"
            ]
        ]
    },
    {
        "id": "34862f974d1d427d",
        "type": "change",
        "z": "647bea769565bae6",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "msglist",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 690,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "9539937e45242612",
        "type": "switch",
        "z": "647bea769565bae6",
        "name": "",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1030,
        "y": 260,
        "wires": [
            [
                "ec194d28f1bf65fe"
            ]
        ]
    },
    {
        "id": "8b0d5f8852cfa8a1",
        "type": "switch",
        "z": "647bea769565bae6",
        "name": "",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 640,
        "wires": [
            [
                "a40e64512649e255"
            ]
        ]
    },
    {
        "id": "292238c2e869c017",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 824,
        "y": 682,
        "wires": []
    },
    {
        "id": "06989b2e6e62dcae",
        "type": "function",
        "z": "647bea769565bae6",
        "name": "function 2",
        "func": "var targetv = parseInt(48);\nvar hexStringValue = \"000000\" + targetv.toString(16);\nmsg.payload = hexStringValue; //.substring(hexStringValue.length - 8, 8);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 180,
        "wires": [
            [
                "c04d1eb70cfe6bf1"
            ]
        ]
    },
    {
        "id": "5908e37f62ecbcce",
        "type": "inject",
        "z": "647bea769565bae6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 900,
        "y": 180,
        "wires": [
            [
                "06989b2e6e62dcae"
            ]
        ]
    },
    {
        "id": "c04d1eb70cfe6bf1",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "debug 48",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 180,
        "wires": []
    },
    {
        "id": "fd4f670a80b7a9f6",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "debug 49",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 780,
        "wires": []
    },
    {
        "id": "79a82e81080adf03",
        "type": "delay",
        "z": "647bea769565bae6",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "10",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 320,
        "y": 720,
        "wires": [
            [
                "7095b0cc276457eb",
                "fd4f670a80b7a9f6"
            ]
        ]
    },
    {
        "id": "56b84fd53aa46142",
        "type": "mqtt in",
        "z": "647bea769565bae6",
        "name": "",
        "topic": "modutherm/zcchie4exe4/modutherm1/set/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "0f81912e387ea1d4",
        "nl": true,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 280,
        "y": 900,
        "wires": [
            [
                "c81cf2238a0eaf40",
                "c731a49ba871b81e"
            ]
        ]
    },
    {
        "id": "c81cf2238a0eaf40",
        "type": "debug",
        "z": "647bea769565bae6",
        "name": "debug 47",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 900,
        "wires": []
    },
    {
        "id": "c731a49ba871b81e",
        "type": "link out",
        "z": "647bea769565bae6",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "81de130cfaaa34f0"
        ],
        "x": 605,
        "y": 940,
        "wires": []
    },
    {
        "id": "584a0cb7497bf741",
        "type": "mqtt in",
        "z": "647bea769565bae6",
        "name": "",
        "topic": "modutherm/zcchie4exe4/modutherm1/cmd/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "0f81912e387ea1d4",
        "nl": true,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 290,
        "y": 960,
        "wires": [
            [
                "c81cf2238a0eaf40",
                "c731a49ba871b81e"
            ]
        ]
    },
    {
        "id": "7bf23b37832ae370",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "19200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "50",
        "bin": "bin",
        "out": "time",
        "addchar": "\\n",
        "responsetimeout": ""
    },
    {
        "id": "0f81912e387ea1d4",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.heatweb.cloud",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]