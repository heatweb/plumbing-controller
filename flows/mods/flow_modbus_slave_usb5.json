[
    {
        "id": "b20313b.2bf7af",
        "type": "tab",
        "label": "Modbus Slave",
        "disabled": false,
        "info": ""
    },
    {
        "id": "974ccc44.d3304",
        "type": "serial in",
        "z": "b20313b.2bf7af",
        "name": "",
        "serial": "1effca4f.9db4f6",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "54012dab.d23cc4",
                "fa1bf6a1.eba458"
            ]
        ]
    },
    {
        "id": "a73e7ddb.4aa38",
        "type": "debug",
        "z": "b20313b.2bf7af",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 1170,
        "y": 220,
        "wires": []
    },
    {
        "id": "2cae4a3a.8d1916",
        "type": "serial out",
        "z": "b20313b.2bf7af",
        "name": "",
        "serial": "1effca4f.9db4f6",
        "x": 1170,
        "y": 260,
        "wires": []
    },
    {
        "id": "69ce61c5.52596",
        "type": "function",
        "z": "b20313b.2bf7af",
        "name": "store HIU",
        "func": "// http://www.simplymodbus.ca/FC03.htm\n//11 03 006B 0003 7687\n// 11 03 06 AE41 5652 4340 49AD\n\n// uses address 17 as default.\n\nvar msgin = msg.payload;\n\nvar offs = 0;\nif  (msg.payload[0] === 0) { offs = 1; }\n\nvar address = msg.payload[offs + 0] ;\nvar fc = msg.payload[offs + 1] ;\nvar register = msg.payload[offs + 3] || 0 ;\nvar cnt = msg.payload[offs + 5] || 1 ;\nvar targetv = 999;\n\nif (address != 17) { return null; }\n\nif (fc != 3 && fc != 6 && fc != 16) { return null; }\n\n///if(register==107) { targetv = 23.5; }\n//else if(register==1) { targetv = 15.73; }\n\ntargetv = global.get(\"modbus.ama0.\"+register) || 0;\n\n\n//new\n\n\n\n//\n\n\n\n\nfunction crc16(buffer) {\n    var crc = 0xFFFF;\n    var odd;\n\n    for (var i = 0; i < buffer.length; i++) {\n        crc = crc ^ buffer[i];\n\n        for (var j = 0; j < 8; j++) {\n            odd = crc & 0x0001;\n            crc = crc >> 1;\n            if (odd) {\n                crc = crc ^ 0xA001;\n            }\n        }\n    }\n\n    return crc;\n}\n\nvar nval = 0;\nvar tosend = \"\";\nvar hexString  = \"\";\n\nfunction mbrrapush(pload) {\n        var mbrra = flow.get(\"mbrra\") || [];\n        var ok = 80;\n        var inn=\"\"; for (var i = 0; i < msgin.length; i++) {  inn += msgin[i] + \" \"; } \n        var oot=\"\"; for (i = 0; i < pload.length; i++) {  oot += pload[i] + \" \"; } \n        if (msgin.length<8) { ok = 20; } \n        mbrra.push({\"request\":inn, \"ok\":ok, \"address\":address, \"register\":register, \"function\": fc, \"count\":cnt, \"topic\": \"\", \"value\": targetv, \"response\": oot});\n        if (mbrra.length>14) { mbrra.shift(); }\n        flow.set(\"mbrra\",mbrra);\n    }\n    \n    \n    \nif (msg.payload.length<8) { mbrrapush(\"\");  return null; }    \n\n\n    \nif (fc == 3) {   // read\n\n    \n    tosend = String.fromCharCode(17) + String.fromCharCode(3) + String.fromCharCode(2);\n    \n    targetv = parseInt(targetv) ;\n    var hexStringValue  = \"0000\" + targetv.toString(16);\n    hexStringValue = hexStringValue.substr(-4);\n    \n    \n    tosend += String.fromCharCode(parseInt(hexStringValue.substr(0,2),16)) + String.fromCharCode(parseInt(hexStringValue.substr(2,2),16)) ;\n    \n    \n    msg.payload  = Buffer.from(tosend, 'ascii');\n    \n    msg.payload = crc16(msg.payload);\n    \n    hexString  = \"0000\" + msg.payload.toString(16);\n    hexString = hexString.substr(-4);\n    \n    \n    tosend += String.fromCharCode(parseInt(hexString.substr(2,2),16)) + String.fromCharCode(parseInt(hexString.substr(0,2),16)) ;\n    msg.payload  = Buffer.from(tosend, 'ascii');\n\n    mbrrapush(msg.payload);\n\n    \n    \n    return [msg,null];\n\n} else if (fc == 6) {    // write\n\n\n    nval = (256*msg.payload[4]) + msg.payload[5];\n\n    msg2={};\n    msg2.topic = register;\n    msg2.payload = nval;\n \n    msg3={};\n    msg3.payload = msg.payload[4] + \",\" + msg.payload[5];\n \n    mbrrapush(msg.payload);\n \n    return [msg,msg2,msg3];\n\n} else if (fc == 16) {    // write\n\n\n    nval = (256*msg.payload[7]) + msg.payload[8];\n\n    msg2={};\n    msg2.topic = register;\n    msg2.payload = nval;\n \n   \n \n  \n    tosend = String.fromCharCode(msg.payload[0]);\n    tosend +=  String.fromCharCode(msg.payload[1]);\n    tosend +=  String.fromCharCode(msg.payload[2]);\n    tosend +=  String.fromCharCode(msg.payload[3]);\n    tosend +=  String.fromCharCode(msg.payload[4]);\n    tosend +=  String.fromCharCode(1);\n   \n\n    msg.payload  = Buffer.from(tosend, 'ascii');\n    \n    msg.payload = crc16(msg.payload);\n    \n    hexString  = \"0000\" + msg.payload.toString(16);\n    hexString = hexString.substr(-4);\n    \n    \n    tosend += String.fromCharCode(parseInt(hexString.substr(2,2),16)) + String.fromCharCode(parseInt(hexString.substr(0,2),16)) ;\n    msg.payload  = Buffer.from(tosend, 'ascii');\n \n \n    mbrrapush(msg.payload);\n \n    return [msg,msg2];\n\n}\n\n\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 260,
        "wires": [
            [
                "a73e7ddb.4aa38",
                "2cae4a3a.8d1916",
                "df7a9fd8.1046f",
                "69b48d96.57ae94"
            ],
            [
                "464ac8c7.871258",
                "4d647ff4.e7181"
            ],
            [
                "ec128ceb.3b0ef"
            ]
        ]
    },
    {
        "id": "356720e0.d8ec4",
        "type": "comment",
        "z": "b20313b.2bf7af",
        "name": "Registers",
        "info": "1: Pr Flow Temp [C] [x10]\n2: Pr Diff Pressure [bar] [x100]\n3: State [0-10]\n4: PowerUpCounter [x1]\n5: ErrorCounter [x1]\n6: PressureModeAuto [0/1]\n10: Setpoint DHW [C] [x10]\n11: WarmupBoost [l/m] [x10]\n12: EcoMode [0/1]\n13: DHWAntiLegionella [0/1]\n14: DHWEcoHeatTemp [C] [x10]\n15: DHWEcoHeatTime [minutes] [x1]\n20: DHW Flow Rate [l/m] [x10]\n21: DHW Output Temp [C] [x10]\n22: Pr Rtn Temp DHW [C] [x10]\n23: Valve Position DHW [0-270] [x1]\n24: Pr Flow Rate DHW [l/m] [x10]\n30: DHReturnLimit [C] [x10]\n31: HESupply [C] [x10]\n32: PumpTimeout [s]\n33: HEProtectionMode [0/1]\n40: Room Thermostat [0/1]\n41: CH Output Temp [C] [x10]\n42: Pr Rtn Temp CH [C] [x10]\n43: Valve Position CH [0-270] [x1]\n44: Pr Flow Rate CH [l/m] [x10]\n45: CH System Pressure [bar] [x100]\n46: CH Pump [0/1] ",
        "x": 110.99998474121094,
        "y": 56.99998474121094,
        "wires": []
    },
    {
        "id": "6e4aee66.58b74",
        "type": "comment",
        "z": "b20313b.2bf7af",
        "name": "Links",
        "info": "http://www.simplymodbus.ca/FC03.htm\n",
        "x": 253.49996948242188,
        "y": 56.79998779296875,
        "wires": []
    },
    {
        "id": "7b9a9441.f353fc",
        "type": "comment",
        "z": "b20313b.2bf7af",
        "name": "Modifications to HIU",
        "info": "Remove USBO serial input and output\nAlter Rotate to remove USB0\nAlter backup to reference flows_ihiu_m8_modbus.json\nChange button USB0 to USB6\nAdded node to save modbus to global values\n",
        "x": 439.4499816894531,
        "y": 57.616668701171875,
        "wires": []
    },
    {
        "id": "464ac8c7.871258",
        "type": "function",
        "z": "b20313b.2bf7af",
        "name": "HSF modbus set",
        "func": "\nmsg.usb=\"ama0\";\n\n\nvar current = global.get(\"modbus.\"+msg.usb+\".\"+msg.topic);  \n\nif (msg.payload==current) { return null; }\n\nswitch(msg.topic) {\n    case 10: //setpoint\n        msg.hsfcode = 9;\n        msg.type = \"number\";\n        msg.multiply = 10;\n        break;\n        \n    case 11: //WarmupBoost \n        msg.hsfcode = 12;\n        msg.type = \"number\";\n        msg.multiply = 10;\n        break;\n        \n    case 12: //EcoMode \n        msg.hsfcode = 10;\n        msg.type = \"onoff\";\n        break;\n \n    case 13: //DHWAntiLegionella  \n        msg.hsfcode = 34;\n        msg.type = \"onoff\";\n        break;\n        \n    case 14: //DHWEcoHeatTemp \n        msg.hsfcode = 33;\n        msg.type = \"number\";\n        msg.multiply = 10;\n        break;\n        \n    case 15: //DHReturnLimit   \n        msg.hsfcode = 32;\n        msg.type = \"number\";\n        msg.multiply = 1;\n        break;\n        \n    case 30: //DHWEcoHeatTime  \n        msg.hsfcode = 21;\n        msg.type = \"number\";\n        msg.multiply = 10;\n        break;\n        \n    case 31: //HESupply   \n        msg.hsfcode = 22;\n        msg.type = \"number\";\n        msg.multiply = 10;\n        break;\n        \n    case 32: //PumpTimeout   \n        msg.hsfcode = 23;\n        msg.type = \"number\";\n        msg.multiply = 1;\n        break;\n    \n    case 33: //HEProtectionMode   \n        msg.hsfcode = 24;\n        msg.type = \"onoff\";\n        break;\n        \n        \n    case 34: //CentralHeatingControl\n        msg.hsfcode = 38;\n        msg.type = \"onoff\";\n        break;\n       \n    case 50: //PrePayShutOff\n        msg.hsfcode = 39;\n        msg.type = \"onoff\";\n        break;\n       \n        \n    default: \n        return null;\n} \n\n\n//msg.payload = \"Changing \"\n\n//global.set(\"modbus.\"+msg.usb+\".34\",parseInt(DAT.CentralHeatingControl));\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 580,
        "wires": [
            [
                "549edda8.e6fa94"
            ]
        ]
    },
    {
        "id": "549edda8.e6fa94",
        "type": "delay",
        "z": "b20313b.2bf7af",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 790,
        "y": 580,
        "wires": [
            [
                "85817f39.72219",
                "b634da65.916828"
            ]
        ]
    },
    {
        "id": "4d647ff4.e7181",
        "type": "debug",
        "z": "b20313b.2bf7af",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 1170,
        "y": 320,
        "wires": []
    },
    {
        "id": "85817f39.72219",
        "type": "debug",
        "z": "b20313b.2bf7af",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 1030,
        "y": 580,
        "wires": []
    },
    {
        "id": "75de437b.00717c",
        "type": "debug",
        "z": "b20313b.2bf7af",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 490,
        "y": 360,
        "wires": []
    },
    {
        "id": "c2926665.d7b1b8",
        "type": "switch",
        "z": "b20313b.2bf7af",
        "name": "",
        "property": "payload[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "17",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 330,
        "y": 320,
        "wires": [
            [
                "75de437b.00717c",
                "430015e9.55d6ac"
            ]
        ]
    },
    {
        "id": "430015e9.55d6ac",
        "type": "change",
        "z": "b20313b.2bf7af",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "cread",
                "pt": "flow",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 320,
        "wires": [
            [
                "46fbcf29.43092"
            ]
        ]
    },
    {
        "id": "54012dab.d23cc4",
        "type": "debug",
        "z": "b20313b.2bf7af",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 330,
        "y": 120,
        "wires": []
    },
    {
        "id": "1773016d.89f57f",
        "type": "debug",
        "z": "b20313b.2bf7af",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 930,
        "y": 180,
        "wires": []
    },
    {
        "id": "3da1d32.906a52c",
        "type": "ui_template",
        "z": "b20313b.2bf7af",
        "d": true,
        "group": "24d3d755.7feff8",
        "name": "",
        "order": 0,
        "width": "6",
        "height": "6",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1060,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "39495eb1.9e3f72",
        "type": "function",
        "z": "b20313b.2bf7af",
        "name": "",
        "func": "var lc = flow.get(\"lc\") || 0;\nlc++;\nflow.set(\"lc\", lc);\n\nvar mbreq = flow.get(\"mbreq\") || \"\";\n\n\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    \n    mbreq += msg.payload[i] + \" \";\n    \n} \nmbreq += \"<br />\";\nflow.set(\"mbreq\", mbreq);\n\n\nmsg.payload = mbreq;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 80,
        "wires": [
            [
                "3da1d32.906a52c"
            ]
        ]
    },
    {
        "id": "dc43beb.ae8424",
        "type": "ui_template",
        "z": "b20313b.2bf7af",
        "d": true,
        "group": "19b1379d.e23038",
        "name": "",
        "order": 0,
        "width": "6",
        "height": "6",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1280,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "df7a9fd8.1046f",
        "type": "function",
        "z": "b20313b.2bf7af",
        "name": "",
        "func": "\nvar mbres = flow.get(\"mbres\") || \"\";\n\n\nfor (var i = 0; i < msg.payload.length; i++) {\n    \n    mbres += msg.payload[i] + \" \";\n    \n} \nmbres += \"<br />\";\nflow.set(\"mbres\", mbres);\n\n\nmsg.payload = mbres;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1130,
        "y": 140,
        "wires": [
            [
                "dc43beb.ae8424"
            ]
        ]
    },
    {
        "id": "46fbcf29.43092",
        "type": "function",
        "z": "b20313b.2bf7af",
        "name": "",
        "func": "var lc = flow.get(\"lc\") || 0;\n\nif (lc>16) { \n    \n    mbreq=\"\";\n    lc = 0;\n    flow.set(\"mbres\", \"\");\n    flow.set(\"mbreq\", \"\");\n    flow.set(\"lc\", 0);\n    \n    \n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 240,
        "wires": [
            [
                "39495eb1.9e3f72",
                "69ce61c5.52596",
                "1773016d.89f57f"
            ]
        ]
    },
    {
        "id": "ec128ceb.3b0ef",
        "type": "debug",
        "z": "b20313b.2bf7af",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "false",
        "x": 1170,
        "y": 360,
        "wires": []
    },
    {
        "id": "fa1bf6a1.eba458",
        "type": "switch",
        "z": "b20313b.2bf7af",
        "name": "",
        "property": "payload[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "17",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 240,
        "wires": [
            [
                "afa76373.ac7ca"
            ]
        ]
    },
    {
        "id": "afa76373.ac7ca",
        "type": "switch",
        "z": "b20313b.2bf7af",
        "name": "",
        "property": "payload[1]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 320,
        "wires": [
            [
                "c2926665.d7b1b8"
            ],
            [
                "c2926665.d7b1b8"
            ]
        ]
    },
    {
        "id": "b634da65.916828",
        "type": "link out",
        "z": "b20313b.2bf7af",
        "name": "",
        "links": [
            "e37f8350.e7e89"
        ],
        "x": 925.5500793457031,
        "y": 610.6833190917969,
        "wires": []
    },
    {
        "id": "2d409675.560aaa",
        "type": "function",
        "z": "b20313b.2bf7af",
        "name": "heating off",
        "func": "// http://www.simplymodbus.ca/FC03.htm\n//11 03 006B 0003 7687\n// 11 03 06 AE41 5652 4340 49AD\n\n// uses address 17 as default.\n\nvar offs = 0;\n\n    \n    //var tosend = String.fromCharCode(17) + String.fromCharCode(3) + String.fromCharCode(0) + String.fromCharCode(1)  + String.fromCharCode(0) + String.fromCharCode(1)  + String.fromCharCode(99) + String.fromCharCode(99);\n    \n    //tosend = tosend + String.fromCharCode(17) + String.fromCharCode(3) + String.fromCharCode(0) + String.fromCharCode(2)  + String.fromCharCode(0) + String.fromCharCode(1)  + String.fromCharCode(99) + String.fromCharCode(99);\n    //tosend = tosend + String.fromCharCode(17) + String.fromCharCode(6) + String.fromCharCode(0) + String.fromCharCode(34)  + String.fromCharCode(0) + String.fromCharCode(0)  + String.fromCharCode(99) + String.fromCharCode(99);\n    \n    var tosend = String.fromCharCode(17) + String.fromCharCode(6) + String.fromCharCode(0) + String.fromCharCode(34)  + String.fromCharCode(0) + String.fromCharCode(0)  + String.fromCharCode(99) + String.fromCharCode(99);\n    \n    //tosend = tosend + String.fromCharCode(17) + String.fromCharCode(16) + String.fromCharCode(0) + String.fromCharCode(12)  + String.fromCharCode(0) + String.fromCharCode(1)  + String.fromCharCode(2)  + String.fromCharCode(0) + String.fromCharCode(1) + String.fromCharCode(99) + String.fromCharCode(99);\n    \n    \n    msg.payload  = Buffer.from(tosend, 'ascii');\n    \n   \n   return msg;\n   \n",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "8c6373ea.b985c",
        "type": "inject",
        "z": "b20313b.2bf7af",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 520,
        "y": 180,
        "wires": [
            [
                "2d409675.560aaa"
            ]
        ]
    },
    {
        "id": "79b7954a.bac1bc",
        "type": "ui_table",
        "z": "b20313b.2bf7af",
        "group": "844e6809.aedfb8",
        "name": "",
        "order": 0,
        "width": "12",
        "height": "7",
        "columns": [
            {
                "field": "request",
                "title": "Request",
                "width": "20%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "ok",
                "title": "ok",
                "width": "7%",
                "align": "left",
                "formatter": "traffic",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "address",
                "title": "Address",
                "width": "13%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "function",
                "title": "FC",
                "width": "7%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "register",
                "title": "Register",
                "width": "13%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "count",
                "title": "n",
                "width": "6%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "value",
                "title": "Value",
                "width": "10%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "response",
                "title": "Response",
                "width": "20%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1230,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "69b48d96.57ae94",
        "type": "change",
        "z": "b20313b.2bf7af",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "mbrra",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 460,
        "wires": [
            [
                "dae5a202.79ab3",
                "ad479ca0.4d97a"
            ]
        ]
    },
    {
        "id": "dae5a202.79ab3",
        "type": "debug",
        "z": "b20313b.2bf7af",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 520,
        "wires": []
    },
    {
        "id": "b4ce652c.aa1ba8",
        "type": "inject",
        "z": "b20313b.2bf7af",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "mbrra",
        "payloadType": "flow",
        "x": 1020,
        "y": 420,
        "wires": [
            [
                "79b7954a.bac1bc"
            ]
        ]
    },
    {
        "id": "ad479ca0.4d97a",
        "type": "trigger",
        "z": "b20313b.2bf7af",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "3",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1020,
        "y": 460,
        "wires": [
            [
                "79b7954a.bac1bc"
            ]
        ]
    },
    {
        "id": "b6a4fced.51308",
        "type": "inject",
        "z": "b20313b.2bf7af",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 700,
        "y": 740,
        "wires": [
            [
                "50682811.477638"
            ]
        ]
    },
    {
        "id": "50682811.477638",
        "type": "change",
        "z": "b20313b.2bf7af",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "mbrra",
                "pt": "flow",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "1effca4f.9db4f6",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB5",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "20",
        "bin": "bin",
        "out": "interbyte",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "24d3d755.7feff8",
        "type": "ui_group",
        "name": "Request",
        "tab": "f31f7b99.d7a6e8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "19b1379d.e23038",
        "type": "ui_group",
        "name": "Reponse",
        "tab": "f31f7b99.d7a6e8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "844e6809.aedfb8",
        "type": "ui_group",
        "name": "Default",
        "tab": "f31f7b99.d7a6e8",
        "order": 3,
        "disp": false,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f31f7b99.d7a6e8",
        "type": "ui_tab",
        "name": "Modbus",
        "icon": "dashboard",
        "order": 28
    }
]