[
    {
        "id": "3bcc1796d56e0e4a",
        "type": "subflow",
        "name": "rbe 24h",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "ed3595ba7ad0e4b1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 160,
                "wires": [
                    {
                        "id": "6fdbb2068778d3c9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ed3595ba7ad0e4b1",
        "type": "rbe",
        "z": "3bcc1796d56e0e4a",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "6fdbb2068778d3c9"
            ]
        ]
    },
    {
        "id": "ac6886f7de81d7ca",
        "type": "inject",
        "z": "3bcc1796d56e0e4a",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "ed3595ba7ad0e4b1"
            ]
        ]
    },
    {
        "id": "6fdbb2068778d3c9",
        "type": "switch",
        "z": "3bcc1796d56e0e4a",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "344fa160119932f8",
        "type": "subflow",
        "name": "rbe 5m",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "486403111458df8e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 160,
                "wires": [
                    {
                        "id": "c822677b38fcd83c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "486403111458df8e",
        "type": "rbe",
        "z": "344fa160119932f8",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "c822677b38fcd83c"
            ]
        ]
    },
    {
        "id": "9dd86fca5dcbfcab",
        "type": "inject",
        "z": "344fa160119932f8",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "486403111458df8e"
            ]
        ]
    },
    {
        "id": "c822677b38fcd83c",
        "type": "switch",
        "z": "344fa160119932f8",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 280,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "bb7dc97af4d5079f",
        "type": "tab",
        "label": "Data",
        "disabled": true,
        "info": ""
    },
    {
        "id": "8d2bdb3948eb93f1",
        "type": "influxdb out",
        "z": "bb7dc97af4d5079f",
        "influxdb": "cb2f30e6e588172b",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "heatweb",
        "bucket": "heatweb",
        "x": 890,
        "y": 280,
        "wires": []
    },
    {
        "id": "7f6ac3549ff079e0",
        "type": "debug",
        "z": "bb7dc97af4d5079f",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 240,
        "wires": []
    },
    {
        "id": "5f624b8658ee8064",
        "type": "link in",
        "z": "bb7dc97af4d5079f",
        "name": "link in 3",
        "links": [
            "a938c2e8f258a061",
            "962b30a1333f36d6"
        ],
        "x": 165,
        "y": 500,
        "wires": [
            [
                "3db84835686957bb"
            ]
        ]
    },
    {
        "id": "3db84835686957bb",
        "type": "switch",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "settings/title",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 260,
        "y": 500,
        "wires": [
            [
                "bed984f8b547b2f2"
            ]
        ]
    },
    {
        "id": "bed984f8b547b2f2",
        "type": "function",
        "z": "bb7dc97af4d5079f",
        "name": "store titles",
        "func": "flow.set(\"title.\"+msg.topic.split(\"/\")[2], msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "a938c2e8f258a061",
        "type": "link out",
        "z": "bb7dc97af4d5079f",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "07c0acabb2881b4c",
            "5f624b8658ee8064"
        ],
        "x": 665,
        "y": 140,
        "wires": []
    },
    {
        "id": "d6bf4c8617db644b",
        "type": "mqtt in",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": false,
        "inputs": 1,
        "x": 540,
        "y": 140,
        "wires": [
            [
                "a938c2e8f258a061",
                "c030bf29f8543fbb"
            ]
        ]
    },
    {
        "id": "cfa318a298d52ac6",
        "type": "function",
        "z": "bb7dc97af4d5079f",
        "name": "InfluxDB",
        "func": "\nvar oot = {};\nvar tags = {};\nvar tops = msg.topic.split(\"/\");\n\n\n\n\nif (!tops[4]) { return null; }\n\nvar net = global.get(\"config.networkId\") || \"local\";\nnet = (tops[0] == \"local\" ? net : tops[0])\n\ntags.node = tops[1];\ntags.device = tops[2];\ntags.network = net;\ntags.vargroup = tops[3];\ntags.varkey = tops[4];\n\n//tags.title = flow.get(\"title.\" + tops[2]) || tops[2];\n\nvar msg1={};\nmsg1.topic = \"\"+msg.topic;\n\ntry {\n\n    \n\n    if (isNaN(msg.payload)) { msg1.payload = '' + msg.payload  }\n    else { msg1.payload = parseFloat(msg.payload); }\n    \n\n    oot[tops[3] + '_' + tops[4]] = msg1.payload;\n\n    msg1.measurement = net + '_' + tops[1] + '_' + tops[2];\n    msg1.payload = [oot, tags];\n\n    return msg1;\n\n\n\n\n} catch { return null; }\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 320,
        "wires": [
            [
                "8d2bdb3948eb93f1",
                "7f6ac3549ff079e0",
                "0651f596ada12b3b"
            ]
        ]
    },
    {
        "id": "761ec70754c423d0",
        "type": "subflow:344fa160119932f8",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "x": 480,
        "y": 280,
        "wires": [
            [
                "cfa318a298d52ac6"
            ]
        ]
    },
    {
        "id": "07c0acabb2881b4c",
        "type": "link in",
        "z": "bb7dc97af4d5079f",
        "name": "link in 1",
        "links": [
            "190658415505c339",
            "a938c2e8f258a061"
        ],
        "x": 165,
        "y": 320,
        "wires": [
            [
                "dcf4a957f4f99360",
                "44ba45692c1c7871"
            ]
        ]
    },
    {
        "id": "c030bf29f8543fbb",
        "type": "debug",
        "z": "bb7dc97af4d5079f",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 180,
        "wires": []
    },
    {
        "id": "44ba45692c1c7871",
        "type": "function",
        "z": "bb7dc97af4d5079f",
        "name": "Metrics List",
        "func": "\n\n\nvar metrics = {};\n\nmetrics.timestamp = new Date().getTime();\nmetrics.topic = msg.topic;\nmetrics.payload = msg.payload;\n\nvar mname = msg.topic.replace(/\\//g,\"_\")\n\n\nflow.set(\"metrics.\" + mname, metrics);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "dcf4a957f4f99360",
        "type": "switch",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "/dat/",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "/stat/",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 300,
        "y": 320,
        "wires": [
            [
                "761ec70754c423d0"
            ],
            [
                "761ec70754c423d0"
            ],
            [
                "8c0c09d3adbc45cf"
            ]
        ]
    },
    {
        "id": "0651f596ada12b3b",
        "type": "influxdb out",
        "z": "bb7dc97af4d5079f",
        "influxdb": "064937e416bcf5e9",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "heatweb",
        "bucket": "heatweb",
        "x": 900,
        "y": 340,
        "wires": []
    },
    {
        "id": "d6d2db6df8ec9045",
        "type": "influxdb in",
        "z": "bb7dc97af4d5079f",
        "influxdb": "cb2f30e6e588172b",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "heatweb",
        "x": 810,
        "y": 500,
        "wires": [
            [
                "69869fa964a7c97a",
                "5cbb9ede4c3149f8"
            ]
        ]
    },
    {
        "id": "6b152ce8a4c5e60f",
        "type": "inject",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "props": [
            {
                "p": "query",
                "v": "from(bucket: \"heatweb\")    |> range(start: -10y, stop: now())  |> filter(fn: (r) => r[\"_field\"] == \"settings_title\")   |> last()  |> yield(name: \"last\")",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 650,
        "y": 500,
        "wires": [
            [
                "d6d2db6df8ec9045"
            ]
        ]
    },
    {
        "id": "69869fa964a7c97a",
        "type": "debug",
        "z": "bb7dc97af4d5079f",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 460,
        "wires": []
    },
    {
        "id": "5cbb9ede4c3149f8",
        "type": "function",
        "z": "bb7dc97af4d5079f",
        "name": "load titles",
        "func": "\nfor (var mynode in msg.payload) {\n\n    flow.set(\"title.\" + msg.payload[mynode].node, msg.payload[mynode]._value);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "950648c0c6e2895f",
        "type": "inject",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 60,
        "wires": [
            [
                "77f4c2e4fa6539d3"
            ]
        ]
    },
    {
        "id": "77f4c2e4fa6539d3",
        "type": "file in",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "filename": "/boot/heatweb/config.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 390,
        "y": 60,
        "wires": [
            [
                "70acc4676d8213df"
            ]
        ]
    },
    {
        "id": "bbe372b762c9304c",
        "type": "change",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "70acc4676d8213df",
        "type": "json",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 590,
        "y": 60,
        "wires": [
            [
                "bbe372b762c9304c"
            ]
        ]
    },
    {
        "id": "8c0c09d3adbc45cf",
        "type": "subflow:3bcc1796d56e0e4a",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "x": 480,
        "y": 340,
        "wires": [
            [
                "cfa318a298d52ac6"
            ]
        ]
    },
    {
        "id": "6f22ad63faf003fd",
        "type": "inject",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "8918515ac59d33ab"
            ]
        ]
    },
    {
        "id": "8918515ac59d33ab",
        "type": "function",
        "z": "bb7dc97af4d5079f",
        "name": "subscriptions",
        "func": "\nmsg.topic = [];\nvar topic = global.get(\"config.networkId\") + \"/#\";\nmsg.topic.push({\"topic\": topic, \"qos\":0});\n\nmsg.action=\"subscribe\"\nmsg.payload = null;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 140,
        "wires": [
            [
                "d6bf4c8617db644b"
            ]
        ]
    },
    {
        "id": "cfba670749e516ad",
        "type": "http in",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "url": "/metrics",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 620,
        "wires": [
            [
                "f0ca0f96f2cafdd7"
            ]
        ]
    },
    {
        "id": "e6f6ddc9f3cefe6e",
        "type": "http response",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 680,
        "wires": []
    },
    {
        "id": "f0ca0f96f2cafdd7",
        "type": "function",
        "z": "bb7dc97af4d5079f",
        "name": "Metrics",
        "func": "\n//temperature{ node = \"mynode\", topic = \"zigbee2mqtt_0x00157d00032b1234\" } { { payload } }\n\nvar metrics = flow.get(\"metrics\")||{};\n//flow.set(\"metrics\",{});\n\nvar net = global.get(\"config.networkId\") || \"local\";\n\nvar oot = \"\";\n//oot = 'stat_state {network=\"local\", node=\"mynodered1\", device=\"prometheus\", vargroup=\"stat\", varkey=\"state\"} 1\\n';\n\nfor (var m in metrics) {\n\n    if (isNaN(metrics[m].payload)) { continue; }\n    \n    var tops = metrics[m].topic.split(\"/\");\n\n    //if (tops[3] != \"dat\") { continue; }    \n\n    oot += tops[3] + '_' + tops[4] + '{network=\"' + net + '\",node=\"' + tops[1] + '\",device=\"' + tops[2] + '\",vargroup=\"' + tops[3] + '\",varkey=\"' + tops[4] + '\"} ' + metrics[m].payload + \"\\n\";\n\n}\n\n\nmsg.payload = oot;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 620,
        "wires": [
            [
                "e6f6ddc9f3cefe6e",
                "117ad9adb3cb2895"
            ]
        ]
    },
    {
        "id": "117ad9adb3cb2895",
        "type": "debug",
        "z": "bb7dc97af4d5079f",
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 620,
        "wires": []
    },
    {
        "id": "f9b829673ede18e6",
        "type": "http in",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "url": "/metrics/:vargroup",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 680,
        "wires": [
            [
                "67cbed5866f31055"
            ]
        ]
    },
    {
        "id": "67cbed5866f31055",
        "type": "function",
        "z": "bb7dc97af4d5079f",
        "name": "Metrics",
        "func": "\nvar metrics = flow.get(\"metrics\")||{};\n\n\nvar net = global.get(\"config.networkId\") || \"local\";\n\nvar oot = \"\";\n//oot = 'stat_state {network=\"local\", node=\"mynodered1\", device=\"prometheus\", vargroup=\"stat\", varkey=\"state\"} 1\\n';\n\nfor (var m in metrics) {\n\n    var tops = metrics[m].topic.split(\"/\");\n    \n    if (isNaN(metrics[m].payload)) { continue; }\n    if (tops[3] != msg.req.params.vargroup) { continue; }    \n\n    \n    oot += tops[3] + '_' + tops[4] + '{network=\"' + net + '\",node=\"' + tops[1] + '\",device=\"' + tops[2] + '\",vargroup=\"' + tops[3] + '\",varkey=\"' + tops[4] + '\"} ' + metrics[m].payload + \"\\n\";\n\n}\n\n\nmsg.payload = oot;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 680,
        "wires": [
            [
                "e6f6ddc9f3cefe6e",
                "117ad9adb3cb2895"
            ]
        ]
    },
    {
        "id": "98e511d6ef6eb614",
        "type": "http in",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "url": "/readings/:vargroup",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 800,
        "wires": [
            [
                "fe1a7a311b04e80c"
            ]
        ]
    },
    {
        "id": "fe1a7a311b04e80c",
        "type": "function",
        "z": "bb7dc97af4d5079f",
        "name": "Metrics",
        "func": "\nvar metrics = flow.get(\"metrics\")||{};\n\n\nvar net = global.get(\"config.networkId\") || \"local\";\n\nvar oot = {readings:[]};\n//oot = 'stat_state {network=\"local\", node=\"mynodered1\", device=\"prometheus\", vargroup=\"stat\", varkey=\"state\"} 1\\n';\n\nfor (var m in metrics) {\n\n    var tops = metrics[m].topic.split(\"/\");\n    \n    if (!isNaN(metrics[m].payload)) { metrics[m].payload = parseFloat(metrics[m].payload); }\n    if (msg.req.params.vargroup && tops[3] != msg.req.params.vargroup) { continue; }    \n\n    var tline = {};\n    tline.value = metrics[m].payload;\n    tline.timestamp = metrics[m].timestamp;\n    tline.network = net;\n    tline.node = tops[1];\n    tline.device = tops[2];\n    tline.vargroup = tops[3];\n    tline.varkey = tops[4];\n\n    oot.readings.push(tline);\n    \n    //oot += tops[3] + '_' + tops[4] + '{network=\"' + net + '\",node=\"' + tops[1] + '\",device=\"' + tops[2] + '\",vargroup=\"' + tops[3] + '\",varkey=\"' + tops[4] + '\"} ' + metrics[m].payload + \"\\n\";\n\n}\n\n\nmsg.payload = oot;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 740,
        "wires": [
            [
                "3678b4ae51a6c3ee"
            ]
        ]
    },
    {
        "id": "986db4a1afd02673",
        "type": "http in",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "url": "/readings",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 740,
        "wires": [
            [
                "fe1a7a311b04e80c"
            ]
        ]
    },
    {
        "id": "3678b4ae51a6c3ee",
        "type": "http response",
        "z": "bb7dc97af4d5079f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 740,
        "wires": []
    },
    {
        "id": "cb2f30e6e588172b",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "local",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "7ad2997b.42a908",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "064937e416bcf5e9",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "heatweb",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "https://europe-west1-1.gcp.cloud2.influxdata.com",
        "rejectUnauthorized": true
    }
]