[
    {
        "id": "03f09d0d134d2f90",
        "type": "tab",
        "label": "Sequent IO",
        "disabled": false,
        "info": "Flow for communicating with all versions of Heatweb BEMS IO Board.  Version 1 as standard. Requires manual adjustment to board type and port selection. Port selection can be pasted in from [HWWiki Wiring Editor](https://hwwiki.ddns.net/index.php/Wiring_Editor).",
        "env": []
    },
    {
        "id": "5ecd5bf0795bd642",
        "type": "inject",
        "z": "03f09d0d134d2f90",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 640,
        "wires": [
            [
                "f80e2139d14010f2"
            ]
        ]
    },
    {
        "id": "7fc27ff1e4cf8c1a",
        "type": "comment",
        "z": "03f09d0d134d2f90",
        "name": "TI COMMANDS",
        "info": "        -v              Display the ti command version number\n        -h              Display the list of command options or one command option details\n        -warranty       Display the warranty\n        -list:          List all ti boards connected\n                        return the # of boards and stack level for every board\n        board           Display the board status and firmware version number\n        rtcbrd          Display the RTC backup battery voltage\n        relwr:          Set relays (AC switch) On/Off\n        relrd:          Read relays  status\n        reltest:                Turn ON and OFF the relays until press a key\n        contactrd:      Read dry contact status\n                        Warning: For this measurements to be valid place the jumper in position \"1K\"\n        countrd:        Read dry contact transitions count\n                        Warning: For this measurements to be valid place the jumper in position \"1K\"\n        countrst:       Reset dry contact transitions count\n        edgerd:         Read dry contact transitions type, ret 0 - disable, 1 - rising, 2 - falling, 3 - both\n        edgewr:         Write dry contact transitions type: 0 - disable, 1 - rising, 2 - falling, 3 - both\n        dacrd:          Read DAC voltage value (0 - 10V)\n        dacwr:          Write DAC output voltage value (0..10V)\n        odrd:           Read open drain pwm value (0 - 100%)\n        odwr:           Write the open drain output pwm value (0..100%)\n        adcrd:          Read ADC input voltage value (0 - 10V)\n                        Warning: For this measurements to be valid place the jumper in position \"0-10V\"\n        r1krd:          Read resistor input  value (1k) in kiloOhms, Warning: You must palce the jumper in position \"1K\".\n                        Return 30kOhm for resistor out of range\n        r10krd:         Read resistor input  value (10k) in kiloOhms, Warning: You must palce the jumper in position \"10K                                                                                                                    \".\n                        Return 30kOhm for resistor out of range\n        rthrd:          Read thermistor input  resistance value in kiloOhms, Return 60kOhm for resistor out of range\n        pwmrd:          Read PWM input\n        adccal:         Calibrate one ADC channel, the calibration must be done in 2 points at min 5V apart\n        adccalrst:      Reset the calibration for one ADC channel\n        daccal:         Calibrate one DAC channel, the calibration must be done in 2 points at min 5V apart\n        daccalrst:      Reset calibration for one DAC channel\n        wdtr:           Reload the watchdog timer and enable the watchdog if is disabled\n        wdtpwr:         Set the watchdog period in seconds,\n                        reload command must be issue in this interval to prevent Raspberry Pi power off\n        wdtprd:         Get the watchdog period in seconds,\n                        reload command must be issue in this interval to prevent Raspberry Pi power off\n        wdtipwr:        Set the watchdog initial period in seconds,\n                        This period is loaded after power cycle, giving Raspberry time to boot\n        wdtiprd:        Get the watchdog initial period in seconds.\n                        This period is loaded after power cycle, giving Raspberry time to boot\n        wdtopwr:        Set the watchdog off period in seconds (max 48 days).\n                        This is the time that watchdog mantain Raspberry turned off\n        wdtoprd:        Get the watchdog off period in seconds (max 48 days)\n                        This is the time that watchdog mantain Raspberry turned off\n        rtcrd:          Get the internal RTC  date and time(mm/dd/yy hh:mm:ss)\ntcbrd:          Get the internal RTC backup battery voltage\n        rtcwr:          Set the internal RTC  date and time(mm/dd/yy hh:mm:ss)\n        bckbrd:         Get the backup battery voltage\n        pwrsrd:         Get the power supply status\n",
        "x": 100,
        "y": 40,
        "wires": []
    },
    {
        "id": "73eb8679965c1672",
        "type": "trigger",
        "z": "03f09d0d134d2f90",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "nul",
        "duration": "10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 230,
        "y": 820,
        "wires": [
            [
                "b5726b628ee3e61b"
            ]
        ]
    },
    {
        "id": "3e140d99885b1dcf",
        "type": "function",
        "z": "03f09d0d134d2f90",
        "name": "",
        "func": "\nvar msg1 = {};\nmsg1.topic = \"system/firmwareHat\",\nmsg1.payload = msg.payload.split(\",\")[0].trim().split(\" \")[2];\nmsg1.title = \"IO Hat Firmware Version\";\n\nvar msg2 = {};\nmsg2.topic = \"system/tCpuHat\",\nmsg2.payload = msg.payload.split(\",\")[1].trim().split(\" \")[2];\nmsg2.units=\"Â°C\";\nmsg2.title = \"IO Hat CPU Temperature\";\n\nvar msg3 = {};\nmsg3.topic = \"system/vPowerHat\",\nmsg3.payload = msg.payload.split(\",\")[2].trim().split(\" \")[2];\nmsg3.units=\"volts\";\nmsg3.title = \"IO Hat Power Supply Voltage\";\n\n\nvar msg4 = {};\nmsg4.topic = \"system/vBatteryHat\",\nmsg4.payload = msg.payload.split(\",\")[3].trim().split(\" \")[1];\nmsg4.units=\"volts\";\nmsg4.title = \"IO Hat Battery Voltage\";\n\nreturn [msg1, msg2,msg3,msg4];",
        "outputs": 4,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 840,
        "wires": [
            [
                "da443342a3ee7581"
            ],
            [
                "da443342a3ee7581"
            ],
            [
                "da443342a3ee7581"
            ],
            [
                "da443342a3ee7581"
            ]
        ]
    },
    {
        "id": "3fdcb94d47bf9bff",
        "type": "link in",
        "z": "03f09d0d134d2f90",
        "name": "",
        "links": [
            "c52dea4958c2f7ea",
            "26f1ad336f82aeeb"
        ],
        "x": 935,
        "y": 860,
        "wires": [
            [
                "a9c8363a03750511"
            ]
        ]
    },
    {
        "id": "b5726b628ee3e61b",
        "type": "exec",
        "z": "03f09d0d134d2f90",
        "command": "bash /home/pi/node-hiu/sq2.sh",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "sq2.sh",
        "x": 390,
        "y": 820,
        "wires": [
            [
                "1a5f38473038651a",
                "3e140d99885b1dcf"
            ],
            [],
            []
        ]
    },
    {
        "id": "1a5f38473038651a",
        "type": "debug",
        "z": "03f09d0d134d2f90",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 780,
        "wires": []
    },
    {
        "id": "301ee1a1ec6f3074",
        "type": "template",
        "z": "03f09d0d134d2f90",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{cmdprefix}} board\n{{cmdprefix}} wdtr",
        "output": "str",
        "x": 580,
        "y": 400,
        "wires": [
            [
                "69e19411dbc48dd4"
            ]
        ]
    },
    {
        "id": "69e19411dbc48dd4",
        "type": "file",
        "z": "03f09d0d134d2f90",
        "name": "",
        "filename": "/home/pi/node-hiu/sq2.sh",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 910,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "f80e2139d14010f2",
        "type": "exec",
        "z": "03f09d0d134d2f90",
        "command": "bash /home/pi/node-hiu/sq.sh",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "sq.sh",
        "x": 390,
        "y": 640,
        "wires": [
            [
                "0fbb5027b2e50745",
                "92d71bc19a90ebb7"
            ],
            [],
            [
                "5225132d4929334b",
                "119c833c97aaa8ef"
            ]
        ]
    },
    {
        "id": "0fbb5027b2e50745",
        "type": "debug",
        "z": "03f09d0d134d2f90",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 560,
        "wires": []
    },
    {
        "id": "a9c8363a03750511",
        "type": "debug",
        "z": "03f09d0d134d2f90",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 860,
        "wires": []
    },
    {
        "id": "722ebfebdf90d15a",
        "type": "change",
        "z": "03f09d0d134d2f90",
        "name": "portSetup",
        "rules": [
            {
                "t": "set",
                "p": "portSetup",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 340,
        "wires": [
            [
                "c470f5c039353850"
            ]
        ]
    },
    {
        "id": "c470f5c039353850",
        "type": "function",
        "z": "03f09d0d134d2f90",
        "name": "",
        "func": "//[{\"portId\":\"TH8\",\"block\":\"TH8\",\"channel\":\"8\",\"name\":\"TH8 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"ntcr23\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"DHW\",\"topicKey\":\"tCo\",\"mapUnits\":\"kÎ© to Â°C\",\"map\":\"[[97.006,-20],[72.911,-15],[72.911,-10],[42.317,-5],[32.651,0],[25.395,5],[19.903,10],[15.714,15],[12.493,20],[10,25],[8.056,30],[6.53,35],[5.325,40],[4.367,45],[3.601,50],[2.985,55],[2.467,60],[2.082,65],[1.752,70],[1.256,80],[0.916,90],[0.678,100],[0.51,110],[0.388,120]]\"},\n//{\"portId\":\"D1\",\"block\":\"\",\"channel\":\"1\",\"name\":\"Digital Input D1\",\"figure\":\"Input\",\"portColor\":\"#00ffff\",\"wiredTo\":\"FS\",\"wiredToPort\":\"pulse\",\"signalType\":\"PULSE\",\"topicDevice\":\"FS\",\"topicKey\":\"pulse\",\"mapUnits\":\"pulse/s to ltr/min\",\"map\":\"[[0,0],[265,30]]\"},{\"portId\":\"P1\",\"block\":\"\",\"channel\":\"1\",\"name\":\"PWM Input P1\",\"figure\":\"Input\",\"portColor\":\"#40aceb\",\"wiredTo\":\"pump\",\"wiredToPort\":\"speed\",\"signalType\":\"PWM\",\"topicDevice\":\"pump\",\"topicKey\":\"speed\",\"mapUnits\":\"% to %\",\"map\":\"[[0,0],[100,100]]\"},{\"portId\":\"P2\",\"block\":\"\",\"channel\":\"2\",\"name\":\"PWM Input P2\",\"figure\":\"Input\",\"portColor\":\"#40aceb\",\"wiredTo\":\"valve4\",\"wiredToPort\":\"position\",\"signalType\":\"PWM\",\"topicDevice\":\"valve4\",\"topicKey\":\"position\",\"mapUnits\":\"% to %\",\"map\":\"[[0,0],[100,100]]\"},{\"portId\":\"OD2\",\"block\":\"OD2\",\"channel\":\"2\",\"name\":\"PWM Output OD2\",\"figure\":\"Output\",\"portColor\":\"#40aceb\",\"wiredTo\":\"valve4\",\"wiredToPort\":\"setpoint\",\"signalType\":\"PWM\",\"topicDevice\":\"valve4\",\"topicKey\":\"setpoint\",\"mapUnits\":\"% to %\",\"map\":\"[[0,0],[100,100]]\"},{\"portId\":\"OD1\",\"block\":\"OD1\",\"channel\":\"1\",\"name\":\"PWM Output OD1\",\"figure\":\"Output\",\"portColor\":\"#40aceb\",\"wiredTo\":\"pump\",\"wiredToPort\":\"setpoint\",\"signalType\":\"PWM\",\"topicDevice\":\"pump\",\"topicKey\":\"setpoint\",\"mapUnits\":\"% to %\",\"map\":\"[[0,0],[100,100]]\"}]\n\n\n// echo \"rthrd1\",$(ti rthrd 1)\n// echo \"countrd1\",$(ti countrd 1)\n// echo \"pwmrd1\",$(ti pwmrd 1)\n// echo \"pwmrd2\",$(ti pwmrd 2)\n\n\nvar oot=\"\";\nvar pL = msg.payload;\nvar cmdprefix = flow.get(\"cmdprefix\") || \"ti\";\n\nfor (var p in pL) {\n    \n    \n    if (pL[p].portId.substr(0,2)==\"TH\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',rthrd' + pL[p].channel + '\",$('+cmdprefix+' rthrd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].signalType.substr(0,5)==\"PULSE\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',countrd' + pL[p].channel + '\",$('+cmdprefix+' countrd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].portId.substr(0,1)==\"D\" && pL[p].signalType.substr(0,3)==\"DRY\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',contactrd' + pL[p].channel + '\",$('+cmdprefix+' contactrd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].portId.substr(0,1)==\"P\" && pL[p].signalType.substr(0,3)==\"PWM\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',pwmrd' + pL[p].channel + '\",$('+cmdprefix+' pwmrd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].portId.substr(0,2)==\"IN\" && pL[p].signalType.substr(0,5)==\"NTC1K\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',r1krd' + pL[p].channel + '\",$('+cmdprefix+' r1krd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].portId.substr(0,2)==\"IN\" && pL[p].signalType.substr(0,6)==\"NTC10K\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',r10krd' + pL[p].channel + '\",$('+cmdprefix+' r10krd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].portId.substr(0,2)==\"IN\" && pL[p].signalType.substr(0,5)==\"0-10V\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',adcrd' + pL[p].channel + '\",$('+cmdprefix+' adcrd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].portId.substr(0,2)==\"IN\" && pL[p].signalType.substr(0,3)==\"DRY\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',contactrd' + pL[p].channel + '\",$('+cmdprefix+' contactrd ' + pL[p].channel + ')\\n';\n        \n    } else if (pL[p].portId.substr(0,1)==\"IN\" && pL[p].signalType.substr(0,5)==\"PULSE\") {\n        \n        oot += 'echo \"' + pL[p].portId + ',countrd' + pL[p].channel + '\",$('+cmdprefix+' countrd ' + pL[p].channel + ')\\n';\n        \n    }\n    \n    \n    \n}\n\n\nmsg.payload=oot;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 340,
        "wires": [
            [
                "11c03d3cbc04923d",
                "f63e5d3839a91cd1"
            ]
        ]
    },
    {
        "id": "11c03d3cbc04923d",
        "type": "file",
        "z": "03f09d0d134d2f90",
        "name": "",
        "filename": "/home/pi/node-hiu/sq.sh",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1230,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "99f19987a9d79c31",
        "type": "function",
        "z": "03f09d0d134d2f90",
        "name": "",
        "func": "\n\nfunction uniq(a) {\n    var seen = {};\n    return a.filter(function(item) {\n        return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n    });\n}\n\nif (msg.payload.indexOf(\",\")<1) { return null; }\n\nvar invar = msg.payload.split(\",\");\n\nvar presult = global.get(\"portSetup\").filter(port => port.portId == invar[0]);\nif (presult.length>0) { \n    \n    var msg1 = {};\n    \n    var readin = parseFloat(invar[2].split(\" \")[0]);\n    \n    if (presult[0].signalType && presult[0].signalType.indexOf(\"PULSE\") == 0) {\n        \n        var p1 = flow.get(\"c\" + invar[0] + \"last\") || 0;\n        flow.set(\"c\" + invar[0] + \"last\",readin);\n        readin = readin - p1;\n    }\n    \n    msg1.topic = (presult[0].topicDevice?presult[0].topicDevice + \"/\":\"\") + \"dat/\" + (presult[0].topicKey || \"value\"),\n    msg1.payload = readin;\n    msg1.points = 1000;\n    msg1.units = presult[0].mapUnits;\n    msg1.title = (presult[0].topicDevice?presult[0].topicDevice + \" \":\"\") + presult[0].wiredToPort;\n    \n    var msg2 = {};\n    msg2.topic = \"raw/\" + invar[0],\n    msg2.payload = readin;\n    msg2.title = presult[0].name || (\"Raw \" + invar[0]);\n    if (presult[0].mapUnits) { msg2.units = presult[0].mapUnits.split(\" to \")[0];  }\n    \n    var msg3 = { \"payload\":\"ok\"};  // alarm\n    msg3.topic=\"alarm/terminal\" + presult[0].portId;\n    \n    \n    \n    if (invar[1].substr(0, 5) == \"rthrd\" && readin==60) {  // sensor not connected\n\n        msg1 = null;\n        msg3.payload = \"Sensor Disconnected\"\n\n    }\n\n    else if (invar[1].substr(0, 5) == \"rthrd\" && readin == 30) {  // sensor not connected\n\n        msg1 = null;\n        msg3.payload = \"Sensor Short-circuit\"\n\n    }\n\n    else if(presult[0][\"map\"]) {\n     \n        msg1.units = presult[0].mapUnits.split(\" to \")[1];   \n        msg1.payload = \"\";\n        \n        var ntc = JSON.parse(presult[0][\"map\"]);\n        \n        var temp = -999;\n        for (var i = 1; i < ntc.length; i++) { \n            \n            if  (ntc[i][0]==readin) { \n                \n                temp = ntc[i][1];\n                \n                break;\n            }\n            else if  (ntc[i-1][0]==readin) { \n                \n                temp = ntc[i-1][1];\n                \n                break;\n            }\n            else if  ((ntc[i-1][0]<=readin) && (ntc[i][0]>readin)) { \n                \n                temp = ntc[i-1][1] - ((ntc[i][1] - ntc[i-1][1]) * ((readin - ntc[i-1][0]) / (ntc[i-1][0] - ntc[i][0])));\n                \n                break;\n            }\n            else if  ((ntc[i-1][0]>=readin) && (ntc[i][0]<readin)) { \n                \n                temp = ntc[i-1][1] - ((ntc[i][1] - ntc[i-1][1]) * ((readin - ntc[i-1][0]) / (ntc[i-1][0] - ntc[i][0])));\n                \n                break;\n            }\n            \n        }\n        \n\n        if (presult[0].signalType && presult[0].signalType.indexOf(\"PULSE\") == 0) {\n\n            //temp = 1.111;\n            if (temp == -999) { //} && (ntc[ntc.length -1][0] > readin)) {\n\n                temp = ((ntc[1][1]) * ((readin) / (ntc[1][0])));\n                //temp = ntc.length;\n\n            }\n        }\n\n        if (temp != -999) {\n            \n            msg1.payload =  temp; //parseInt(temp*100)/100; \n            \n            // if (temp <10) { msg1.payload =  parseInt(temp*100)/100; }\n            // else { msg1.payload =  parseInt(temp*10)/10; }\n            \n            if (presult[0].signalType && (presult[0].signalType.indexOf(\"NTC\")==0) && readin==60) {\n                \n                msg3.payload = \"Out of range\"\n                \n            }\n            \n            \n        } else {\n            \n            //msg1.payload = 0;\n            msg1 = null;\n            msg3.payload = \"Out of range\"\n        }\n    }\n    \n    if (msg1) {\n\n        \n        var readout = parseInt(parseFloat(msg1.payload)*100)/100; \n\n        //var readout = 50;\n        \n        var history = context.get(invar[0]) || [];\n        \n        // if (history.length>5 && history.indexOf(msg1.payload)<0) {  history = [];  }\n        // else if (history.length>1) {\n        //     var uniqh = uniq(history);\n        //     if ((uniqh.length<4) && (history.length<10)) {  \n        //         // slow mode\n        //         msg1=null; \n                \n        //     } else {\n        //     // else if (uniqh.length>0) {   readin = history.reduce((a, b) => a + b, 0) / history.length;  }\n        //         msg1.payload = history.reduce((a, b) => a + b, 0) / history.length; \n        //         msg1.payload =  parseInt(msg1.payload*100)/100; \n        //     }\n        //     if (history.length>9) { history=[msg1.payload]; }\n            \n        // }\n        \n        if (invar[1].substr(0, 5) == \"rthrd\" && history.indexOf(readout)>-1) {  \n            \n            msg1.payload =  parseInt((history.reduce((a, b) => a + b, 0) / history.length)*100)/100; \n            \n        } //msg1=null;\n        \n        history.push(readout);\n        if (history.length>20) { history.shift(); }\n        context.set(invar[0],history);\n        \n    }   \n    \n    if (msg1) { msg1.payload = parseInt(msg1.payload * 100) / 100;  }\n    \n    return [msg1, msg2, msg3];\n      \n}\n\nreturn null;",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 660,
        "wires": [
            [
                "2e988386940749d8",
                "da443342a3ee7581"
            ],
            [
                "da443342a3ee7581"
            ],
            [
                "da443342a3ee7581"
            ]
        ]
    },
    {
        "id": "92d71bc19a90ebb7",
        "type": "split",
        "z": "03f09d0d134d2f90",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 660,
        "wires": [
            [
                "99f19987a9d79c31",
                "c77d99f6194079d7"
            ]
        ]
    },
    {
        "id": "26f1ad336f82aeeb",
        "type": "link out",
        "z": "03f09d0d134d2f90",
        "name": "",
        "links": [
            "72fc070f.39dd8",
            "3fdcb94d47bf9bff"
        ],
        "x": 1175,
        "y": 740,
        "wires": []
    },
    {
        "id": "0b9b33794e321921",
        "type": "template",
        "z": "03f09d0d134d2f90",
        "name": "BOARD SETUP",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "{{cmdprefix}} wdtpwr 30\n{{cmdprefix}} edgewr 8 1",
        "output": "str",
        "x": 600,
        "y": 480,
        "wires": [
            [
                "5fb83c77f77d7cdb"
            ]
        ]
    },
    {
        "id": "5fb83c77f77d7cdb",
        "type": "file",
        "z": "03f09d0d134d2f90",
        "name": "",
        "filename": "/home/pi/node-hiu/sqsetup.sh",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 480,
        "wires": [
            [
                "d76edb39ad2c4601"
            ]
        ]
    },
    {
        "id": "62339bb059d4a43b",
        "type": "exec",
        "z": "03f09d0d134d2f90",
        "command": "bash /home/pi/node-hiu/sqsetup.sh",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1280,
        "y": 480,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "d76edb39ad2c4601",
        "type": "trigger",
        "z": "03f09d0d134d2f90",
        "name": "",
        "op1": "",
        "op2": "1",
        "op1type": "nul",
        "op2type": "num",
        "duration": "1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1040,
        "y": 480,
        "wires": [
            [
                "62339bb059d4a43b"
            ]
        ]
    },
    {
        "id": "5225132d4929334b",
        "type": "link out",
        "z": "03f09d0d134d2f90",
        "name": "",
        "mode": "link",
        "links": [
            "0632f1bc7ce231b2",
            "38851676a0d913c9"
        ],
        "x": 555,
        "y": 720,
        "wires": []
    },
    {
        "id": "119c833c97aaa8ef",
        "type": "delay",
        "z": "03f09d0d134d2f90",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 210,
        "y": 760,
        "wires": [
            [
                "73eb8679965c1672"
            ]
        ]
    },
    {
        "id": "2e988386940749d8",
        "type": "debug",
        "z": "03f09d0d134d2f90",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 600,
        "wires": []
    },
    {
        "id": "f63e5d3839a91cd1",
        "type": "debug",
        "z": "03f09d0d134d2f90",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 300,
        "wires": []
    },
    {
        "id": "f0671ce68e136d63",
        "type": "inject",
        "z": "03f09d0d134d2f90",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ti",
        "payloadType": "str",
        "x": 1030,
        "y": 80,
        "wires": [
            [
                "0607bca7108e1f7c"
            ]
        ]
    },
    {
        "id": "f7757b4ca8561b28",
        "type": "change",
        "z": "03f09d0d134d2f90",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "cmdprefix",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 200,
        "wires": [
            [
                "1a634abb96ea0953",
                "91668c2ca5f738bb"
            ]
        ]
    },
    {
        "id": "bf7eb1cb4b51e1dd",
        "type": "inject",
        "z": "03f09d0d134d2f90",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "megabas 1",
        "payloadType": "str",
        "x": 1040,
        "y": 120,
        "wires": [
            [
                "0607bca7108e1f7c"
            ]
        ]
    },
    {
        "id": "570aa45dabac319e",
        "type": "change",
        "z": "03f09d0d134d2f90",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "cmdprefix",
                "pt": "msg",
                "to": "cmdprefix",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "301ee1a1ec6f3074"
            ]
        ]
    },
    {
        "id": "a225e75c1489d1ba",
        "type": "change",
        "z": "03f09d0d134d2f90",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "cmdprefix",
                "pt": "msg",
                "to": "cmdprefix",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 480,
        "wires": [
            [
                "0b9b33794e321921"
            ]
        ]
    },
    {
        "id": "da443342a3ee7581",
        "type": "rbe",
        "z": "03f09d0d134d2f90",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "property": "payload",
        "x": 930,
        "y": 740,
        "wires": [
            [
                "11ef8c40cb8707eb"
            ]
        ]
    },
    {
        "id": "95e237adbbb4b523",
        "type": "inject",
        "z": "03f09d0d134d2f90",
        "name": "",
        "props": [
            {
                "p": "reset",
                "v": "1",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 990,
        "y": 680,
        "wires": [
            [
                "da443342a3ee7581"
            ]
        ]
    },
    {
        "id": "11ef8c40cb8707eb",
        "type": "switch",
        "z": "03f09d0d134d2f90",
        "name": "",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1050,
        "y": 740,
        "wires": [
            [
                "26f1ad336f82aeeb"
            ]
        ]
    },
    {
        "id": "4dc151ca46e90967",
        "type": "comment",
        "z": "03f09d0d134d2f90",
        "name": "Building Automation Hat Commands",
        "info": "     -v              Display the megabas command version number\n        -h              Display the list of command options or one command option details\n        -warranty       Display the warranty\n        -list:          List all megabas boards connected\n                        return the # of boards and stack level for every board\n        board           Display the board status and firmware version number\n        trwr:           Set triacs (AC switch) On/Off\n        trrd:           Read triacs (AC switch) status\n        trtest:         Turn ON and OFF the triacs until press a key\n        contactrd:      Read dry contact status\n                        Warning: For this measurements to be valid place the jumper in position \"1K\"\n        countrd:        Read dry contact transitions count\n                        Warning: For this measurements to be valid place the jumper in position \"1K\"\n        countrst:       Reset dry contact transitions count\n        edgerd:         Read dry contact transitions type, ret 0 - disable, 1 - rising, 2 - falling, 3 -both\n        edgewr:         Write dry contact transitions type: 0 - disable, 1 - rising, 2 - falling, 3 - bot                                  h\n        dacrd:          Read DAC voltage value (0 - 10V)\n        dacwr:          Write DAC output voltage value (0..10V)\n        adcrd:          Read ADC input voltage value (0 - 10V)\n                        Warning: For this measurements to be valid place the jumper in position \"0-10V\"\n        r1krd:          Read resistor input  value (1k) in kiloOhms, Warning: You must palce the jumper in position \"1K\".\n                        Return 30kOhm for resistor out of range\n        r10krd:         Read resistor input  value (10k) in kiloOhms, Warning: You must palce the jumper in position \"10K\".\n                        Return 30kOhm for resistor out of range\n        adccal:         Calibrate one ADC channel, the calibration must be done in 2 points at min 5V apart\n        adccalrst:      Reset the calibration for one ADC channel\n        daccal:         Calibrate one DAC channel, the calibration must be done in 2 points at min 5V apart\n        daccalrst:      Reset calibration for one DAC channel\n        wdtr:           Reload the watchdog timer and enable the watchdog if is disabled\n        wdtpwr:         Set the watchdog period in seconds,\n                        reload command must be issue in this interval to prevent Raspberry Pi power off\n        wdtprd:         Get the watchdog period in seconds,\n                        reload command must be issue in this interval to prevent Raspberry Pi power off\n        wdtipwr:        Set the watchdog initial period in seconds,\n                        This period is loaded after power cycle, giving Raspberry time to boot\n        wdtiprd:        Get the watchdog initial period in seconds.\n                        This period is loaded after power cycle, giving Raspberry time to boot\n        wdtopwr:        Set the watchdog off period in seconds (max 48 days).\n                        This is the time that watchdog mantain Raspberry turned off\n        wdtoprd:        Get the watchdog off period in seconds (max 48 days)\n                        This is the time that watchdog mantain Raspberry turned off\n        rs485rd:        Read the RS485 communication settings\n        rs485wr:        Write the RS485 communication settings\n        rtcrd:          Get the internal RTC  date and time(mm/dd/yy hh:mm:ss)\n        rtcwr:          Set the internal RTC  date and time(mm/dd/yy hh:mm:ss)\n",
        "x": 340,
        "y": 40,
        "wires": []
    },
    {
        "id": "8920b47930855b75",
        "type": "comment",
        "z": "03f09d0d134d2f90",
        "name": "Building Automation Hat ",
        "info": "https://sequentmicrosystems.com/collections/industrial-automation/products/raspberry-pi-building-automation",
        "x": 600,
        "y": 40,
        "wires": []
    },
    {
        "id": "c77d99f6194079d7",
        "type": "debug",
        "z": "03f09d0d134d2f90",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 600,
        "wires": []
    },
    {
        "id": "ae2a41ec80dbaa23",
        "type": "inject",
        "z": "03f09d0d134d2f90",
        "name": "PORT SETUP - SIMPLE DHW HIU",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "set/io",
        "payload": "[{\"portId\":\"IN1\",\"block\":\"IN1\",\"channel\":\"1\",\"name\":\"IN1 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"ntcr23\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"dhw\",\"topicKey\":\"tH\",\"mapUnits\":\"kÎ© to Â°C\",\"map\":\"[[97.006,-20],[72.911,-15],[72.911,-10],[42.317,-5],[32.650,0],[25.390,5],[19.900,10],[15.710,15],[12.490,20],[10,25],[8.057,30],[6.531,35],[5.327,40],[4.369,45],[3.603,50],[2.986,55],[2.488,60],[2.083,65],[1.752,70],[1.258,80],[0.918,90],[0.678,100],[0.51,110],[0.388,120]]\"},{\"portId\":\"IN2\",\"block\":\"IN2\",\"channel\":\"2\",\"name\":\"IN2 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"ntcr23\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"dhw\",\"topicKey\":\"tHo\",\"mapUnits\":\"kÎ© to Â°C\",\"map\":\"[[97.006,-20],[72.911,-15],[72.911,-10],[42.317,-5],[32.651,0],[25.395,5],[19.903,10],[15.714,15],[12.493,20],[10,25],[8.056,30],[6.53,35],[5.324,40],[4.365,45],[3.599,50],[2.982,55],[2.483,60],[2.079,65],[1.738,70],[1.476,75],[1.252,80],[0.912,90],[0.678,100],[0.51,110],[0.388,120]]\"},{\"portId\":\"IN3\",\"block\":\"IN3\",\"channel\":\"3\",\"name\":\"IN3 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ff00\",\"wiredTo\":\"ntcr23\",\"wiredToPort\":\"temperature\",\"signalType\":\"NTC10K\",\"topicDevice\":\"dhw\",\"topicKey\":\"tCo\",\"mapUnits\":\"kÎ© to Â°C\",\"map\":\"[[97.006,-20],[72.911,-15],[72.911,-10],[42.317,-5],[32.651,0],[25.395,5],[19.903,10],[15.714,15],[12.493,20],[10,25],[8.056,30],[6.53,35],[5.324,40],[4.365,45],[3.599,50],[2.982,55],[2.483,60],[2.079,65],[1.738,70],[1.476,75],[1.252,80],[0.912,90],[0.678,100],[0.51,110],[0.388,120]]\"},{\"portId\":\"IN8\",\"block\":\"IN8\",\"channel\":\"8\",\"name\":\"IN8 Signal\",\"figure\":\"Input\",\"portColor\":\"#00ffff\",\"wiredTo\":\"FS\",\"wiredToPort\":\"pulse\",\"signalType\":\"PULSE\",\"topicDevice\":\"dhw\",\"topicKey\":\"fC\",\"mapUnits\":\"pulse/s to ltr/min\",\"map\":\"[[0,0],[59.5,30]]\"}]",
        "payloadType": "json",
        "x": 500,
        "y": 120,
        "wires": [
            [
                "b9839bfd176c7dbb"
            ]
        ]
    },
    {
        "id": "0c41b183b899ccad",
        "type": "mqtt out",
        "z": "03f09d0d134d2f90",
        "name": "",
        "topic": "_/set/io",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ad2997b.42a908",
        "x": 840,
        "y": 120,
        "wires": []
    },
    {
        "id": "12b1b35f41010d30",
        "type": "mqtt in",
        "z": "03f09d0d134d2f90",
        "name": "",
        "topic": "_/set/io",
        "qos": "0",
        "datatype": "json",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 550,
        "y": 260,
        "wires": [
            [
                "e4ac7c2a2adbf210",
                "722ebfebdf90d15a"
            ]
        ]
    },
    {
        "id": "e4ac7c2a2adbf210",
        "type": "debug",
        "z": "03f09d0d134d2f90",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 260,
        "wires": []
    },
    {
        "id": "b9839bfd176c7dbb",
        "type": "json",
        "z": "03f09d0d134d2f90",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 710,
        "y": 120,
        "wires": [
            [
                "0c41b183b899ccad"
            ]
        ]
    },
    {
        "id": "7006906bf1072ded",
        "type": "json",
        "z": "03f09d0d134d2f90",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 570,
        "y": 340,
        "wires": [
            [
                "722ebfebdf90d15a"
            ]
        ]
    },
    {
        "id": "199b0695bf091c2f",
        "type": "function",
        "z": "03f09d0d134d2f90",
        "name": "",
        "func": "\n\nfunction uniq(a) {\n    var seen = {};\n    return a.filter(function(item) {\n        return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n    });\n}\n\nif (msg.payload.indexOf(\",\")<1) { return null; }\n\nvar invar = msg.payload.split(\",\");\n\nvar presult = global.get(\"portSetup\").filter(port => port.portId == invar[0]);\nif (presult.length>0) { \n    \n    var msg1 = {};\n    \n    var readin = parseFloat(invar[2].split(\" \")[0]);\n    \n    \n    \n    msg1.topic = (presult[0].topicDevice?presult[0].topicDevice + \"/\":\"\") + \"dat/\" + (presult[0].topicKey || \"value\"),\n    msg1.payload = readin;\n    msg1.points = 1000;\n    msg1.units = presult[0].mapUnits;\n    msg1.title = (presult[0].topicDevice?presult[0].topicDevice + \" \":\"\") + presult[0].wiredToPort;\n    \n    var msg2 = {};\n    msg2.topic = \"raw/\" + invar[0],\n    msg2.payload = readin;\n    msg2.title = presult[0].name || (\"Raw \" + invar[0]);\n    if (presult[0].mapUnits) { msg2.units = presult[0].mapUnits.split(\" to \")[0];  }\n    \n    var msg3 = { \"payload\":\"ok\"};  // alarm\n    msg3.topic=\"alarm/terminal\" + presult[0].portId;\n    \n    if (invar[1].substr(0, 5) == \"rthrd\" && readin==60) {  // sensor not connected\n\n        msg1 = null;\n        msg3.payload = \"Sensor Disconnected\"\n\n    }\n\n    else if (invar[1].substr(0, 5) == \"rthrd\" && readin == 30) {  // sensor not connected\n\n        msg1 = null;\n        msg3.payload = \"Sensor Short-circuit\"\n\n    }\n\n    else if(presult[0][\"map\"]) {\n     \n        msg1.units = presult[0].mapUnits.split(\" to \")[1];   \n        msg1.payload = \"\";\n        \n        var ntc = JSON.parse(presult[0][\"map\"]);\n        \n        var temp = -999;\n        for (var i = 1; i < ntc.length; i++) { \n            \n            if  (ntc[i][0]==readin) { \n                \n                temp = ntc[i][1];\n                \n                break;\n            }\n            else if  (ntc[i-1][0]==readin) { \n                \n                temp = ntc[i-1][1];\n                \n                break;\n            }\n            else if  ((ntc[i-1][0]<=readin) && (ntc[i][0]>readin)) { \n                \n                temp = ntc[i-1][1] - ((ntc[i][1] - ntc[i-1][1]) * ((readin - ntc[i-1][0]) / (ntc[i-1][0] - ntc[i][0])));\n                \n                break;\n            }\n            else if  ((ntc[i-1][0]>=readin) && (ntc[i][0]<readin)) { \n                \n                temp = ntc[i-1][1] - ((ntc[i][1] - ntc[i-1][1]) * ((readin - ntc[i-1][0]) / (ntc[i-1][0] - ntc[i][0])));\n                \n                break;\n            }\n            \n        }\n        \n\n        if (presult[0].signalType && presult[0].signalType.indexOf(\"PULSE\") == 0) {\n\n            //temp = 1.111;\n            if (temp == -999) { //} && (ntc[ntc.length -1][0] > readin)) {\n\n                temp = ((ntc[1][1]) * ((readin) / (ntc[1][0])));\n                //temp = ntc.length;\n\n            }\n        }\n\n        if (temp != -999) {\n            \n            msg1.payload =  temp; //parseInt(temp*100)/100; \n            \n            // if (temp <10) { msg1.payload =  parseInt(temp*100)/100; }\n            // else { msg1.payload =  parseInt(temp*10)/10; }\n            \n            if (presult[0].signalType && (presult[0].signalType.indexOf(\"NTC\")==0) && readin==60) {\n                \n                msg3.payload = \"Out of range\"\n                \n            }\n            \n            \n        } else {\n            \n            //msg1.payload = 0;\n            msg1 = null;\n            msg3.payload = \"Out of range\"\n        }\n    }\n    \n    if (msg1) {\n\n        \n        var readout = parseInt(parseFloat(msg1.payload)*100)/100; \n\n        //var readout = 50;\n        \n        var history = context.get(invar[0]) || [];\n        \n        // if (history.length>5 && history.indexOf(msg1.payload)<0) {  history = [];  }\n        // else if (history.length>1) {\n        //     var uniqh = uniq(history);\n        //     if ((uniqh.length<4) && (history.length<10)) {  \n        //         // slow mode\n        //         msg1=null; \n                \n        //     } else {\n        //     // else if (uniqh.length>0) {   readin = history.reduce((a, b) => a + b, 0) / history.length;  }\n        //         msg1.payload = history.reduce((a, b) => a + b, 0) / history.length; \n        //         msg1.payload =  parseInt(msg1.payload*100)/100; \n        //     }\n        //     if (history.length>9) { history=[msg1.payload]; }\n            \n        // }\n        \n        if (invar[1].substr(0, 5) == \"rthrd\" && history.indexOf(readout)>-1) {  \n            \n            msg1.payload =  parseInt((history.reduce((a, b) => a + b, 0) / history.length)*100)/100; \n            \n        } //msg1=null;\n        \n        history.push(readout);\n        if (history.length>20) { history.shift(); }\n        context.set(invar[0],history);\n        \n    }   \n    \n    \n    return [msg1, msg2, msg3];\n      \n}\n\nreturn null;",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1000,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "2569825f9a52410c",
        "type": "function",
        "z": "03f09d0d134d2f90",
        "name": "",
        "func": "\n\nfunction uniq(a) {\n    var seen = {};\n    return a.filter(function(item) {\n        return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n    });\n}\n\n\nvar invar = msg.payload.split(\",\");\n\nvar presult = global.get(\"portSetup\").filter(port => port.portId == invar[0]);\nif (presult.length>0) { \n    \n    var msg1 = {};\n    \n    var readin = parseFloat(invar[2].split(\" \")[0]);\n    \n    \n    \n    msg1.topic = (presult[0].topicDevice?presult[0].topicDevice + \"/\":\"\") + \"dat/\" + (presult[0].topicKey || \"value\"),\n    msg1.payload = readin;\n    msg1.points = 1000;\n    msg1.units = presult[0].mapUnits;\n    msg1.title = (presult[0].topicDevice?presult[0].topicDevice + \" \":\"\") + presult[0].wiredToPort;\n    \n    var msg2 = {};\n    msg2.topic = \"raw/\" + invar[0],\n    msg2.payload = readin;\n    msg2.title = presult[0].name || (\"Raw \" + invar[0]);\n    if (presult[0].mapUnits) { msg2.units = presult[0].mapUnits.split(\" to \")[0];  }\n    \n    var msg3 = { \"payload\":\"ok\"};  // alarm\n    msg3.topic=\"alarm/terminal\" + presult[0].portId;\n    \n    \n    if(presult[0][\"map\"]) {\n     \n        if (presult[0].mapUnits) { msg1.units = presult[0].mapUnits.split(\" to \")[1];  }\n        msg1.payload = \"\";\n        \n        var ntc = JSON.parse(presult[0][\"map\"]);\n        \n        var temp = -999;\n        for (var i = 1; i < ntc.length; i++) { \n            \n            if  (ntc[i][0]==readin) { \n                \n                temp = ntc[i][1];\n                \n                break;\n            }\n            else if  (ntc[i-1][0]==readin) { \n                \n                temp = ntc[i-1][1];\n                \n                break;\n            }\n            else if  ((ntc[i-1][0]<=readin) && (ntc[i][0]>readin)) { \n                \n                temp = ntc[i-1][1] - ((ntc[i][1] - ntc[i-1][1]) * ((readin - ntc[i-1][0]) / (ntc[i-1][0] - ntc[i][0])));\n                \n                break;\n            }\n            else if  ((ntc[i-1][0]>=readin) && (ntc[i][0]<readin)) { \n                \n                temp = ntc[i-1][1] - ((ntc[i][1] - ntc[i-1][1]) * ((readin - ntc[i-1][0]) / (ntc[i-1][0] - ntc[i][0])));\n                \n                break;\n            }\n            \n        }\n        \n        if (temp != -999) {\n            \n            msg1.payload =  temp; //parseInt(temp*100)/100; \n            \n            // if (temp <10) { msg1.payload =  parseInt(temp*100)/100; }\n            // else { msg1.payload =  parseInt(temp*10)/10; }\n            \n            if (presult[0].signalType && (presult[0].signalType.indexOf(\"NTC\")==0) && readin==60) {\n                \n                msg3.payload = \"Out of range\"\n                \n            }\n            \n            \n        } else {\n            \n            msg1 = null;\n            msg3.payload = \"Out of range\"\n        }\n    }\n    \n    if (msg1) {\n        \n        \n        var readout = parseInt(parseFloat(msg1.payload)*100)/100; \n        \n        var history = context.get(invar[0]) || [];\n        \n        // if (history.length>5 && history.indexOf(msg1.payload)<0) {  history = [];  }\n        // else if (history.length>1) {\n        //     var uniqh = uniq(history);\n        //     if ((uniqh.length<4) && (history.length<10)) {  \n        //         // slow mode\n        //         msg1=null; \n                \n        //     } else {\n        //     // else if (uniqh.length>0) {   readin = history.reduce((a, b) => a + b, 0) / history.length;  }\n        //         msg1.payload = history.reduce((a, b) => a + b, 0) / history.length; \n        //         msg1.payload =  parseInt(msg1.payload*100)/100; \n        //     }\n        //     if (history.length>9) { history=[msg1.payload]; }\n             \n        // }\n        \n        \n        //// SMOOTHING\n        \n        // if (msg1 && history.indexOf(readout)>-1) {  \n            \n        //     msg1.payload =  parseInt((history.reduce((a, b) => a + b, 0) / history.length)*100)/100; \n            \n        // } //msg1=null;\n        \n        history.push(readout);\n        if (history.length>20) { history.shift(); }\n        context.set(invar[0],history);\n        \n        \n    }    \n    \n    return [msg1, msg2, msg3];\n      \n}\n\nreturn null;",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1000,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "0607bca7108e1f7c",
        "type": "mqtt out",
        "z": "03f09d0d134d2f90",
        "name": "",
        "topic": "_/set/ioCommand",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "7ad2997b.42a908",
        "x": 1270,
        "y": 80,
        "wires": []
    },
    {
        "id": "c982e20b85d63972",
        "type": "mqtt in",
        "z": "03f09d0d134d2f90",
        "name": "",
        "topic": "_/set/ioCommand",
        "qos": "0",
        "datatype": "utf8",
        "broker": "7ad2997b.42a908",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 200,
        "wires": [
            [
                "f7757b4ca8561b28"
            ]
        ]
    },
    {
        "id": "0271392ecfb72b34",
        "type": "inject",
        "z": "03f09d0d134d2f90",
        "name": "ioCommand",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "settings.ioCommand.value",
        "payloadType": "global",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "f7757b4ca8561b28"
            ]
        ]
    },
    {
        "id": "1a634abb96ea0953",
        "type": "debug",
        "z": "03f09d0d134d2f90",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 200,
        "wires": []
    },
    {
        "id": "91668c2ca5f738bb",
        "type": "link out",
        "z": "03f09d0d134d2f90",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "92bff8de10c66936"
        ],
        "x": 415,
        "y": 260,
        "wires": []
    },
    {
        "id": "92bff8de10c66936",
        "type": "link in",
        "z": "03f09d0d134d2f90",
        "name": "link in 2",
        "links": [
            "91668c2ca5f738bb",
            "f88d2c3350e78be3"
        ],
        "x": 205,
        "y": 340,
        "wires": [
            [
                "2d6c82fdac4bf920",
                "570aa45dabac319e",
                "a225e75c1489d1ba"
            ]
        ]
    },
    {
        "id": "2d6c82fdac4bf920",
        "type": "change",
        "z": "03f09d0d134d2f90",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "settings.io.value",
                "tot": "global",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 340,
        "wires": [
            [
                "7006906bf1072ded"
            ]
        ]
    },
    {
        "id": "7ad2997b.42a908",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]